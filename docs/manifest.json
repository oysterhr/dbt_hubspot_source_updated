{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v10.json", "dbt_version": "1.6.1", "generated_at": "2023-10-04T15:43:13.260323Z", "invocation_id": "9c4bab68-f6c6-4a34-91cf-1cf5150c4f17", "env": {}, "project_name": "develop", "project_id": "a19ea622182c63ddc19bb22cde982b82", "user_id": "e607f749-4294-4b15-833b-0ae4a87d4d24", "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}, "nodes": {"model.hubspot_source.stg_hubspot__company_property_history": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__company_property_history", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__company_property_history.sql", "original_file_path": "models/stg_hubspot__company_property_history.sql", "unique_id": "model.hubspot_source.stg_hubspot__company_property_history", "fqn": ["hubspot_source", "stg_hubspot__company_property_history"], "alias": "stg_hubspot__company_property_history", "checksum": {"name": "sha256", "checksum": "940237aa18b0102cc4a03697b38ec7eaff2e9a192e95385cf6dcdcfc5c05ebe2"}, "config": {"enabled": true, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a change to company record in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_source": {"name": "change_source", "description": "The source (reason) of the change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_source_id": {"name": "change_source_id", "description": "The ID of the object that caused the change, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_timestamp": {"name": "change_timestamp", "description": "The timestamp the changed occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_id": {"name": "company_id", "description": "The ID of the related company record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "field_name": {"name": "field_name", "description": "The name of the field being changed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "new_value": {"name": "new_value", "description": "The new value of the field.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__company.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_hubspot", "enabled": true}, "created_at": 1696434198.1808808, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__company_property_history`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_company_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__company_property_history_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__company_property_history_tmp')),\n                staging_columns=get_company_property_history_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        company_id,\n        name as field_name,\n        source as change_source,\n        source_id as change_source_id,\n        cast(change_timestamp as {{ dbt.type_timestamp() }}) as change_timestamp, -- source field name = timestamp ; alias declared in macros/get_company_property_history_columns.sql\n        value as new_value\n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__company_property_history_tmp", "package": null, "version": null}, {"name": "stg_hubspot__company_property_history_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_company_property_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.hubspot_source.stg_hubspot__company_property_history_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__company_property_history.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__company_property_history_tmp`\n\n), macro as (\n\n    select\n        \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as INT64) as \n    \n    company_id\n    \n , \n    cast(null as STRING) as \n    \n    name\n    \n , \n    cast(null as STRING) as \n    \n    source\n    \n , \n    cast(null as STRING) as \n    \n    source_id\n    \n , \n    cast(null as TIMESTAMP) as change_timestamp , \n    cast(null as STRING) as \n    \n    value\n    \n \n\n\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        company_id,\n        name as field_name,\n        source as change_source,\n        source_id as change_source_id,\n        cast(change_timestamp as TIMESTAMP) as change_timestamp, -- source field name = timestamp ; alias declared in macros/get_company_property_history_columns.sql\n        value as new_value\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__owner": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__owner", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__owner.sql", "original_file_path": "models/stg_hubspot__owner.sql", "unique_id": "model.hubspot_source.stg_hubspot__owner", "fqn": ["hubspot_source", "stg_hubspot__owner"], "alias": "stg_hubspot__owner", "checksum": {"name": "sha256", "checksum": "63c283e3d59df503cdf72cdd84f3cdbda254ebfeca8657ab8078082bd1affdd0"}, "config": {"enabled": true, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents an owner/user in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "A timestamp for when the owner was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_address": {"name": "email_address", "description": "The email address of the owner.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "The first name of the owner.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "Full name of the owner.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "The last name of the owner.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "The ID of the owner.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owner_type": {"name": "owner_type", "description": "The type of owner.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "A timestamp for when the owner was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__owner.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_hubspot", "enabled": true}, "created_at": 1696434197.7912939, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__owner`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_owner_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__owner_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__owner_tmp')),\n                staging_columns=get_owner_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        cast(created_at as {{ dbt.type_timestamp() }}) as created_timestamp,\n        email as email_address,\n        first_name,\n        last_name,\n        owner_id,\n        portal_id,\n        type as owner_type,\n        cast(updated_at as {{ dbt.type_timestamp() }}) as updated_timestamp,\n        trim( {{ dbt.concat(['first_name', \"' '\", 'last_name']) }} ) as full_name\n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__owner_tmp", "package": null, "version": null}, {"name": "stg_hubspot__owner_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_owner_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp", "macro.dbt.concat"], "nodes": ["model.hubspot_source.stg_hubspot__owner_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__owner.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__owner_tmp`\n\n), macro as (\n\n    select\n        \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    created_at\n    \n , \n    cast(null as STRING) as \n    \n    email\n    \n , \n    cast(null as STRING) as \n    \n    first_name\n    \n , \n    cast(null as STRING) as \n    \n    last_name\n    \n , \n    cast(null as INT64) as \n    \n    owner_id\n    \n , \n    cast(null as INT64) as \n    \n    portal_id\n    \n , \n    cast(null as STRING) as \n    \n    type\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    updated_at\n    \n \n\n\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        cast(created_at as TIMESTAMP) as created_timestamp,\n        email as email_address,\n        first_name,\n        last_name,\n        owner_id,\n        portal_id,\n        type as owner_type,\n        cast(updated_at as TIMESTAMP) as updated_timestamp,\n        trim( first_name || ' ' || last_name ) as full_name\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__contact_list_member": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__contact_list_member", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__contact_list_member.sql", "original_file_path": "models/stg_hubspot__contact_list_member.sql", "unique_id": "model.hubspot_source.stg_hubspot__contact_list_member", "fqn": ["hubspot_source", "stg_hubspot__contact_list_member"], "alias": "stg_hubspot__contact_list_member", "checksum": {"name": "sha256", "checksum": "9b3e60e51076efcc2acba6532f99454044e536418490674e5890ea6b85521739"}, "config": {"enabled": true, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a 'link' between a contact and a contact list.", "columns": {"is_contact_list_member_deleted": {"name": "is_contact_list_member_deleted", "description": "Boolean indicating whether a record has been deleted in Hubspot and/or inferred deleted in Hubspot by Fivetran; _fivetran_deleted and is_deleted fields are equivalent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "added_timestamp": {"name": "added_timestamp", "description": "The timestamp a contact was added to a list.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_list_id": {"name": "contact_list_id", "description": "The ID of the related contact list.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__contact.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_hubspot", "enabled": true}, "created_at": 1696434197.763156, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__contact_list_member`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled', 'hubspot_contact_list_member_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__contact_list_member_tmp') }} \n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__contact_list_member_tmp')),\n                staging_columns=get_contact_list_member_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        _fivetran_deleted as is_contact_list_member_deleted,\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        cast(added_at as {{ dbt.type_timestamp() }}) as added_timestamp,\n        contact_id,\n        contact_list_id\n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__contact_list_member_tmp", "package": null, "version": null}, {"name": "stg_hubspot__contact_list_member_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_contact_list_member_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.hubspot_source.stg_hubspot__contact_list_member_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__contact_list_member.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__contact_list_member_tmp` \n\n), macro as (\n\n    select\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    added_at\n    \n , \n    cast(null as INT64) as \n    \n    contact_id\n    \n , \n    cast(null as INT64) as \n    \n    contact_list_id\n    \n \n\n\n    from base\n\n), fields as (\n\n    select\n        _fivetran_deleted as is_contact_list_member_deleted,\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        cast(added_at as TIMESTAMP) as added_timestamp,\n        contact_id,\n        contact_list_id\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__contact": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__contact", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__contact.sql", "original_file_path": "models/stg_hubspot__contact.sql", "unique_id": "model.hubspot_source.stg_hubspot__contact", "fqn": ["hubspot_source", "stg_hubspot__contact"], "alias": "stg_hubspot__contact", "checksum": {"name": "sha256", "checksum": "3abd2c3fef2de803f77ebeb49437b1a27b87281f88505ab7e7feba565532cc47"}, "config": {"enabled": true, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a contact in Hubspot.", "columns": {"is_contact_deleted": {"name": "is_contact_deleted", "description": "Boolean indicating whether a record has been deleted in Hubspot and/or inferred deleted in Hubspot by Fivetran; _fivetran_deleted and is_deleted fields are equivalent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "The contact's email.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_company": {"name": "contact_company", "description": "The name of the contact's company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "The contact's first name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "The contact's last name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The date that the contact was created in your HubSpot account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_title": {"name": "job_title", "description": "The contact's job title.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_annual_revenue": {"name": "company_annual_revenue", "description": "The contact's annual company revenue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "calculated_merged_vids": {"name": "calculated_merged_vids", "description": "List of mappings representing contact IDs that have been merged into the contact at hand. Format: <merged_contact_id>:<merged_at_in_epoch_time>;<second_merged_contact_id>:<merged_at_in_epoch_time> This field has replaced the `CONTACT_MERGE_AUDIT` table, which was deprecated by the Hubspot v3 CRM API.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__contact.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_hubspot", "enabled": true}, "created_at": 1696434197.778079, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__contact`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled', 'hubspot_contact_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__contact_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__contact_tmp')),\n                staging_columns=get_contact_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n\n{% if var('hubspot__pass_through_all_columns', false) %}\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__contact_tmp')),\n                staging_columns=get_contact_columns()\n            )\n        }}\n        {% if all_passthrough_column_check('stg_hubspot__contact_tmp',get_contact_columns()) > 0 %}\n        -- just pass everything through if extra columns are present, but ensure required columns are present.\n        ,{{ \n            fivetran_utils.remove_prefix_from_columns(\n                columns=adapter.get_columns_in_relation(ref('stg_hubspot__contact_tmp')), \n                prefix='property_', exclude=get_macro_columns(get_contact_columns())) \n        }}\n        {% endif %}\n    from base\n\n{% else %}\n        -- just default columns + explicitly configured passthrough columns.\n        -- a few columns below are aliased within the macros/get_contact_columns.sql macro\n        contact_id,\n        is_contact_deleted,\n        calculated_merged_vids, -- will be null for BigQuery users until v3 api is rolled out to them\n        email,\n        contact_company,\n        first_name,\n        last_name,\n        cast(created_at as {{ dbt.type_timestamp() }}) as created_at,\n        job_title,\n        company_annual_revenue,\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced\n\n        --The below macro adds the fields defined within your hubspot__contact_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('hubspot__contact_pass_through_columns') }}\n\n        -- The below macro add the ability to create calculated fields using the hubspot__contact_calculated_fields variable.\n        {{ fivetran_utils.calculated_fields('hubspot__contact_calculated_fields') }}\n\n    from macro\n{% endif %}    \n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__contact_tmp", "package": null, "version": null}, {"name": "stg_hubspot__contact_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_contact_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp", "macro.fivetran_utils.fill_pass_through_columns", "macro.fivetran_utils.calculated_fields"], "nodes": ["model.hubspot_source.stg_hubspot__contact_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__contact.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__contact_tmp`\n\n), macro as (\n\n    select\n        \n    cast(null as boolean) as is_contact_deleted , \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as INT64) as contact_id , \n    cast(null as STRING) as calculated_merged_vids , \n    cast(null as STRING) as email , \n    cast(null as STRING) as contact_company , \n    cast(null as STRING) as first_name , \n    cast(null as STRING) as last_name , \n    cast(null as TIMESTAMP) as created_at , \n    cast(null as STRING) as job_title , \n    cast(null as INT64) as company_annual_revenue \n\n\n    from base\n\n), fields as (\n\n    select\n\n\n        -- just default columns + explicitly configured passthrough columns.\n        -- a few columns below are aliased within the macros/get_contact_columns.sql macro\n        contact_id,\n        is_contact_deleted,\n        calculated_merged_vids, -- will be null for BigQuery users until v3 api is rolled out to them\n        email,\n        contact_company,\n        first_name,\n        last_name,\n        cast(created_at as TIMESTAMP) as created_at,\n        job_title,\n        company_annual_revenue,\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced\n\n        --The below macro adds the fields defined within your hubspot__contact_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n        -- The below macro add the ability to create calculated fields using the hubspot__contact_calculated_fields variable.\n        \n\n\n\n    from macro\n    \n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__deal": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__deal", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__deal.sql", "original_file_path": "models/stg_hubspot__deal.sql", "unique_id": "model.hubspot_source.stg_hubspot__deal", "fqn": ["hubspot_source", "stg_hubspot__deal"], "alias": "stg_hubspot__deal", "checksum": {"name": "sha256", "checksum": "91428a592a2f27feb5bb5bef6962578e4f6f14abe501dea34addb9799cb2a284"}, "config": {"enabled": true, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a deal in Hubspot.", "columns": {"is_deal_deleted": {"name": "is_deal_deleted", "description": "Boolean indicating whether a record has been deleted in Hubspot and/or inferred deleted in Hubspot by Fivetran; _fivetran_deleted and is_deleted fields are equivalent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_id": {"name": "deal_id", "description": "The ID of the deal", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_pipeline_id": {"name": "deal_pipeline_id", "description": "The ID of the deal's pipeline.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_pipeline_stage_id": {"name": "deal_pipeline_stage_id", "description": "The ID of the deal's pipeline stage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "The ID of the deal's owner.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_name": {"name": "deal_name", "description": "The name you have given this deal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "A brief description of the deal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The total value of the deal in the deal's currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "closed_at": {"name": "closed_at", "description": "The day the deal is expected to close, or was closed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The date the deal was created. This property is set automatically by HubSpot.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__deal.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_hubspot", "enabled": true}, "created_at": 1696434197.692998, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__deal_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__deal_tmp')),\n                staging_columns=get_deal_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n\n{% if var('hubspot__pass_through_all_columns', false) %}\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__deal_tmp')),\n                staging_columns=get_deal_columns()\n            )\n        }}\n        {% if all_passthrough_column_check('stg_hubspot__deal_tmp',get_deal_columns()) > 0 %}\n        -- just pass everything through if extra columns are present, but ensure required columns are present.\n        ,{{ \n            fivetran_utils.remove_prefix_from_columns(\n                columns=adapter.get_columns_in_relation(ref('stg_hubspot__deal_tmp')), \n                prefix='property_',exclude=get_macro_columns(get_deal_columns()))\n        }}\n        {% endif %}\n    from base\n\n{% else %}\n        -- just default columns + explicitly configured passthrough columns\n        -- a few columns below are aliased within the macros/get_deal_columns.sql macro\n        deal_name,\n        cast(closed_at as {{ dbt.type_timestamp() }}) as closed_at,\n        cast(created_at as {{ dbt.type_timestamp() }}) as created_at,\n        is_deal_deleted,\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        deal_id,\n        cast(deal_pipeline_id as {{ dbt.type_string() }}) as deal_pipeline_id,\n        cast(deal_pipeline_stage_id as {{ dbt.type_string() }}) as deal_pipeline_stage_id,\n        owner_id,\n        portal_id,\n        description,\n        amount\n\n        --The below macro adds the fields defined within your hubspot__deal_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('hubspot__deal_pass_through_columns') }}\n\n        -- The below macro add the ability to create calculated fields using the hubspot__deal_calculated_fields variable.\n        {{ fivetran_utils.calculated_fields('hubspot__deal_calculated_fields') }}\n\n    from macro\n{% endif %}\n\n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__deal_tmp", "package": null, "version": null}, {"name": "stg_hubspot__deal_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_deal_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.fivetran_utils.fill_pass_through_columns", "macro.fivetran_utils.calculated_fields"], "nodes": ["model.hubspot_source.stg_hubspot__deal_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__deal.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal_tmp`\n\n), macro as (\n\n    select\n        \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as INT64) as \n    \n    deal_id\n    \n , \n    cast(null as STRING) as \n    \n    deal_pipeline_id\n    \n , \n    cast(null as STRING) as \n    \n    deal_pipeline_stage_id\n    \n , \n    cast(null as boolean) as is_deal_deleted , \n    cast(null as INT64) as \n    \n    owner_id\n    \n , \n    cast(null as INT64) as \n    \n    portal_id\n    \n , \n    cast(null as STRING) as deal_name , \n    cast(null as STRING) as description , \n    cast(null as INT64) as amount , \n    cast(null as TIMESTAMP) as closed_at , \n    cast(null as TIMESTAMP) as created_at \n\n\n    from base\n\n), fields as (\n\n    select\n\n\n        -- just default columns + explicitly configured passthrough columns\n        -- a few columns below are aliased within the macros/get_deal_columns.sql macro\n        deal_name,\n        cast(closed_at as TIMESTAMP) as closed_at,\n        cast(created_at as TIMESTAMP) as created_at,\n        is_deal_deleted,\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        deal_id,\n        cast(deal_pipeline_id as STRING) as deal_pipeline_id,\n        cast(deal_pipeline_stage_id as STRING) as deal_pipeline_stage_id,\n        owner_id,\n        portal_id,\n        description,\n        amount\n\n        --The below macro adds the fields defined within your hubspot__deal_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n        -- The below macro add the ability to create calculated fields using the hubspot__deal_calculated_fields variable.\n        \n\n\n\n    from macro\n\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__deal_pipeline": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__deal_pipeline", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__deal_pipeline.sql", "original_file_path": "models/stg_hubspot__deal_pipeline.sql", "unique_id": "model.hubspot_source.stg_hubspot__deal_pipeline", "fqn": ["hubspot_source", "stg_hubspot__deal_pipeline"], "alias": "stg_hubspot__deal_pipeline", "checksum": {"name": "sha256", "checksum": "609076f2f64b0919e1eb96171164d2847e794bc5c5fc61ef0191ce8a370bd40e"}, "config": {"enabled": true, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a pipeline in Hubspot.", "columns": {"is_deal_pipeline_deleted": {"name": "is_deal_pipeline_deleted", "description": "Boolean indicating whether a record has been deleted in Hubspot and/or inferred deleted in Hubspot by Fivetran; _fivetran_deleted and is_deleted fields are equivalent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_pipeline_id": {"name": "deal_pipeline_id", "description": "The ID of the pipeline.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "display_order": {"name": "display_order", "description": "Used to determine the order in which the pipelines appear when viewed in HubSpot", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_pipeline_created_at": {"name": "deal_pipeline_created_at", "description": "A timestamp representing when the record was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_pipeline_updated_at": {"name": "deal_pipeline_updated_at", "description": "A timestamp representing when the record was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Whether the stage is currently in use.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pipeline_label": {"name": "pipeline_label", "description": "The human-readable label for the pipeline. The label is used when showing the pipeline in HubSpot.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__deal.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_hubspot", "enabled": true}, "created_at": 1696434197.6869178, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal_pipeline`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__deal_pipeline_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__deal_pipeline_tmp')),\n                staging_columns=get_deal_pipeline_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        _fivetran_deleted as is_deal_pipeline_deleted,\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        active as is_active,\n        display_order,\n        label as pipeline_label,\n        cast(pipeline_id as {{ dbt.type_string() }}) as deal_pipeline_id,\n        created_at as deal_pipeline_created_at,\n        updated_at as deal_pipeline_updated_at\n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__deal_pipeline_tmp", "package": null, "version": null}, {"name": "stg_hubspot__deal_pipeline_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_deal_pipeline_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp", "macro.dbt.type_string"], "nodes": ["model.hubspot_source.stg_hubspot__deal_pipeline_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__deal_pipeline.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal_pipeline_tmp`\n\n), macro as (\n\n    select\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as boolean) as \n    \n    active\n    \n , \n    cast(null as INT64) as \n    \n    display_order\n    \n , \n    cast(null as STRING) as \n    \n    label\n    \n , \n    cast(null as STRING) as \n    \n    pipeline_id\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    created_at\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    updated_at\n    \n \n\n\n    from base\n\n), fields as (\n\n    select\n        _fivetran_deleted as is_deal_pipeline_deleted,\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        active as is_active,\n        display_order,\n        label as pipeline_label,\n        cast(pipeline_id as STRING) as deal_pipeline_id,\n        created_at as deal_pipeline_created_at,\n        updated_at as deal_pipeline_updated_at\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__deal_company": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__deal_company", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__deal_company.sql", "original_file_path": "models/stg_hubspot__deal_company.sql", "unique_id": "model.hubspot_source.stg_hubspot__deal_company", "fqn": ["hubspot_source", "stg_hubspot__deal_company"], "alias": "stg_hubspot__deal_company", "checksum": {"name": "sha256", "checksum": "967bfcd2c8e73fd2ad82bcd81d22f75617c6d549fa9b801c0f3e9ceb6d4b5643"}, "config": {"enabled": true, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a 'link' between a deal and company.", "columns": {"company_id": {"name": "company_id", "description": "The ID of the company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_id": {"name": "deal_id", "description": "The ID of the deal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type_id": {"name": "type_id", "description": "The ID of the type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__deal.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_hubspot", "enabled": true}, "created_at": 1696434197.701115, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal_company`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled','hubspot_deal_company_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__deal_company_tmp') }}\n\n), macro as (\n\n    select \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__deal_company_tmp')),\n                staging_columns=get_deal_company_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        company_id,\n        deal_id,\n        type_id,\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced\n        \n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__deal_company_tmp", "package": null, "version": null}, {"name": "stg_hubspot__deal_company_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_deal_company_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.hubspot_source.stg_hubspot__deal_company_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__deal_company.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal_company_tmp`\n\n), macro as (\n\n    select \n        \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as INT64) as \n    \n    deal_id\n    \n , \n    cast(null as INT64) as \n    \n    company_id\n    \n , \n    cast(null as INT64) as \n    \n    type_id\n    \n \n\n\n    from base\n\n), fields as (\n\n    select\n        company_id,\n        deal_id,\n        type_id,\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced\n        \n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__contact_list": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__contact_list", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__contact_list.sql", "original_file_path": "models/stg_hubspot__contact_list.sql", "unique_id": "model.hubspot_source.stg_hubspot__contact_list", "fqn": ["hubspot_source", "stg_hubspot__contact_list"], "alias": "stg_hubspot__contact_list", "checksum": {"name": "sha256", "checksum": "9746193b0a4ef3ba286a69c54223df553b1fc54cde8987189ac76796fb10a059"}, "config": {"enabled": true, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a contact list in Hubspot.", "columns": {"is_contact_list_deleted": {"name": "is_contact_list_deleted", "description": "Boolean indicating whether a record has been deleted in Hubspot and/or inferred deleted in Hubspot by Fivetran; _fivetran_deleted and is_deleted fields are equivalent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_list_id": {"name": "contact_list_id", "description": "The ID of the contact list.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_list_name": {"name": "contact_list_name", "description": "The name of the contact list.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "A timestamp of the time the list was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_deletable": {"name": "is_deletable", "description": "If this is false, this is a system list and cannot be deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_dynamic": {"name": "is_dynamic", "description": "Whether the contact list is dynamic.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata_error": {"name": "metadata_error", "description": "Any errors that happened the last time the list was processed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata_last_processing_state_change_at": {"name": "metadata_last_processing_state_change_at", "description": "A timestamp of the last time that the processing state changed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata_last_size_change_at": {"name": "metadata_last_size_change_at", "description": "A timestamp of the last time that the size of the list changed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata_processing": {"name": "metadata_processing", "description": "One of DONE, REFRESHING, INITIALIZING, or PROCESSING. \nDONE indicates the list has finished processing, any other value indicates that list membership is being evaluated.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata_size": {"name": "metadata_size", "description": "The approximate number of contacts in the list.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "A timestamp of the time that the list was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__contact.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_hubspot", "enabled": true}, "created_at": 1696434197.768987, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__contact_list`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled', 'hubspot_contact_list_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__contact_list_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__contact_list_tmp')),\n                staging_columns=get_contact_list_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        _fivetran_deleted as is_contact_list_deleted,\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        cast(created_at as {{ dbt.type_timestamp() }}) as created_timestamp,\n        deleteable as is_deletable,\n        dynamic as is_dynamic,\n        id as contact_list_id,\n        metadata_error,\n        cast(metadata_last_processing_state_change_at as {{ dbt.type_timestamp() }}) as metadata_last_processing_state_change_at,\n        cast(metadata_last_size_change_at as {{ dbt.type_timestamp() }}) as metadata_last_size_change_at,\n        metadata_processing,\n        metadata_size,\n        name as contact_list_name,\n        portal_id,\n        cast(updated_at as {{ dbt.type_timestamp() }}) as updated_timestamp\n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__contact_list_tmp", "package": null, "version": null}, {"name": "stg_hubspot__contact_list_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_contact_list_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.hubspot_source.stg_hubspot__contact_list_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__contact_list.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__contact_list_tmp`\n\n), macro as (\n\n    select\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    created_at\n    \n , \n    cast(null as boolean) as \n    \n    deleteable\n    \n , \n    cast(null as boolean) as \n    \n    dynamic\n    \n , \n    cast(null as INT64) as \n    \n    id\n    \n , \n    cast(null as STRING) as \n    \n    metadata_error\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    metadata_last_processing_state_change_at\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    metadata_last_size_change_at\n    \n , \n    cast(null as STRING) as \n    \n    metadata_processing\n    \n , \n    cast(null as INT64) as \n    \n    metadata_size\n    \n , \n    cast(null as STRING) as \n    \n    name\n    \n , \n    cast(null as INT64) as \n    \n    portal_id\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    updated_at\n    \n \n\n\n    from base\n\n), fields as (\n\n    select\n        _fivetran_deleted as is_contact_list_deleted,\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        cast(created_at as TIMESTAMP) as created_timestamp,\n        deleteable as is_deletable,\n        dynamic as is_dynamic,\n        id as contact_list_id,\n        metadata_error,\n        cast(metadata_last_processing_state_change_at as TIMESTAMP) as metadata_last_processing_state_change_at,\n        cast(metadata_last_size_change_at as TIMESTAMP) as metadata_last_size_change_at,\n        metadata_processing,\n        metadata_size,\n        name as contact_list_name,\n        portal_id,\n        cast(updated_at as TIMESTAMP) as updated_timestamp\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__deal_pipeline_stage": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__deal_pipeline_stage", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__deal_pipeline_stage.sql", "original_file_path": "models/stg_hubspot__deal_pipeline_stage.sql", "unique_id": "model.hubspot_source.stg_hubspot__deal_pipeline_stage", "fqn": ["hubspot_source", "stg_hubspot__deal_pipeline_stage"], "alias": "stg_hubspot__deal_pipeline_stage", "checksum": {"name": "sha256", "checksum": "bb740799529f61e4687494a9bc66c468f6a92842675c16f658ed004306adb7a1"}, "config": {"enabled": true, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a pipeline stage in Hubspot.", "columns": {"is_deal_pipeline_stage_deleted": {"name": "is_deal_pipeline_stage_deleted", "description": "Boolean indicating whether a record has been deleted in Hubspot and/or inferred deleted in Hubspot by Fivetran; _fivetran_deleted and is_deleted fields are equivalent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_pipeline_id": {"name": "deal_pipeline_id", "description": "The ID of the related pipeline.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_pipeline_stage_id": {"name": "deal_pipeline_stage_id", "description": "The ID of the pipeline stage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "display_order": {"name": "display_order", "description": "Used to determine the order in which the stages appear when viewed in HubSpot.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Whether the pipeline stage is currently in use.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_closed_won": {"name": "is_closed_won", "description": "Whether the stage represents a Closed Won deal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pipeline_stage_label": {"name": "pipeline_stage_label", "description": "The human-readable label for the stage. The label is used when showing the stage in HubSpot.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "probability": {"name": "probability", "description": "The probability that the deal will close. Used for the deal forecast.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_pipeline_stage_created_at": {"name": "deal_pipeline_stage_created_at", "description": "A timestamp representing when the record was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_pipeline_stage_updated_at": {"name": "deal_pipeline_stage_updated_at", "description": "A timestamp representing when the record was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__deal.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_hubspot", "enabled": true}, "created_at": 1696434197.683347, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal_pipeline_stage`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__deal_pipeline_stage_tmp') }}\n\n), macro as (\n\n    select \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__deal_pipeline_stage_tmp')),\n                staging_columns=get_deal_pipeline_stage_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        _fivetran_deleted as is_deal_pipeline_stage_deleted,\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        active as is_active,\n        closed_won as is_closed_won,\n        display_order,\n        label as pipeline_stage_label,\n        pipeline_id as deal_pipeline_id,\n        probability,\n        cast(stage_id as {{ dbt.type_string() }}) as deal_pipeline_stage_id,\n        created_at as deal_pipeline_stage_created_at,\n        updated_at as deal_pipeline_stage_updated_at\n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__deal_pipeline_stage_tmp", "package": null, "version": null}, {"name": "stg_hubspot__deal_pipeline_stage_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_deal_pipeline_stage_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp", "macro.dbt.type_string"], "nodes": ["model.hubspot_source.stg_hubspot__deal_pipeline_stage_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__deal_pipeline_stage.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal_pipeline_stage_tmp`\n\n), macro as (\n\n    select \n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as boolean) as \n    \n    active\n    \n , \n    cast(null as boolean) as \n    \n    closed_won\n    \n , \n    cast(null as INT64) as \n    \n    display_order\n    \n , \n    cast(null as STRING) as \n    \n    label\n    \n , \n    cast(null as STRING) as \n    \n    pipeline_id\n    \n , \n    cast(null as FLOAT64) as \n    \n    probability\n    \n , \n    cast(null as STRING) as \n    \n    stage_id\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    created_at\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    updated_at\n    \n \n\n\n    from base\n\n), fields as (\n\n    select\n        _fivetran_deleted as is_deal_pipeline_stage_deleted,\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        active as is_active,\n        closed_won as is_closed_won,\n        display_order,\n        label as pipeline_stage_label,\n        pipeline_id as deal_pipeline_id,\n        probability,\n        cast(stage_id as STRING) as deal_pipeline_stage_id,\n        created_at as deal_pipeline_stage_created_at,\n        updated_at as deal_pipeline_stage_updated_at\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__deal_stage": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__deal_stage", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__deal_stage.sql", "original_file_path": "models/stg_hubspot__deal_stage.sql", "unique_id": "model.hubspot_source.stg_hubspot__deal_stage", "fqn": ["hubspot_source", "stg_hubspot__deal_stage"], "alias": "stg_hubspot__deal_stage", "checksum": {"name": "sha256", "checksum": "fb6709d278e9110b5b3737c4a6a3e99eeab2aaa58cc175478467b56ca5cf3ccd"}, "config": {"enabled": true, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a deal stage.", "columns": {"_fivetran_active": {"name": "_fivetran_active", "description": "Boolean indicating whether the deal stage is active.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_end": {"name": "_fivetran_end", "description": "The Fivetran calculated exist time of the deal stage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_start": {"name": "_fivetran_start", "description": "The date the deal stage was entered.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_entered": {"name": "date_entered", "description": "The timestamp the deal stage was entered.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_id": {"name": "deal_id", "description": "Reference to the deal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source": {"name": "source", "description": "The relevant source of the deal stage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_id": {"name": "source_id", "description": "Reference to the source.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_stage_name": {"name": "deal_stage_name", "description": "The value of the deal stage. Typically the name of the stage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__deal.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_hubspot", "enabled": true}, "created_at": 1696434197.698903, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal_stage`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled'])) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_hubspot__deal_stage_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__deal_stage_tmp')),\n                staging_columns=get_deal_stage_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(date_entered as {{ dbt.type_timestamp() }}) as date_entered,\n        deal_id,\n        source,\n        source_id,\n        value as deal_stage_name,\n        _fivetran_active,\n        cast(_fivetran_end as {{ dbt.type_timestamp() }}) as _fivetran_end,\n        cast(_fivetran_start as {{ dbt.type_timestamp() }}) as _fivetran_start\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_hubspot__deal_stage_tmp", "package": null, "version": null}, {"name": "stg_hubspot__deal_stage_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_deal_stage_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.hubspot_source.stg_hubspot__deal_stage_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__deal_stage.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal_stage_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    cast(null as boolean) as \n    \n    _fivetran_active\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_end\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_start\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    date_entered\n    \n , \n    cast(null as INT64) as \n    \n    deal_id\n    \n , \n    cast(null as STRING) as \n    \n    source\n    \n , \n    cast(null as STRING) as \n    \n    source_id\n    \n , \n    cast(null as STRING) as \n    \n    value\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(date_entered as TIMESTAMP) as date_entered,\n        deal_id,\n        source,\n        source_id,\n        value as deal_stage_name,\n        _fivetran_active,\n        cast(_fivetran_end as TIMESTAMP) as _fivetran_end,\n        cast(_fivetran_start as TIMESTAMP) as _fivetran_start\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__deal_property_history": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__deal_property_history", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__deal_property_history.sql", "original_file_path": "models/stg_hubspot__deal_property_history.sql", "unique_id": "model.hubspot_source.stg_hubspot__deal_property_history", "fqn": ["hubspot_source", "stg_hubspot__deal_property_history"], "alias": "stg_hubspot__deal_property_history", "checksum": {"name": "sha256", "checksum": "74a8aeac69fa9dcb469aac74bced29d6f38e405a8c8f00b63ba6106a4d29918b"}, "config": {"enabled": true, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents the details of your deal properties.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_source": {"name": "change_source", "description": "The source (reason) of the change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_source_id": {"name": "change_source_id", "description": "The ID of the object that caused the change, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_timestamp": {"name": "change_timestamp", "description": "The timestamp the changed occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_id": {"name": "deal_id", "description": "The ID of the related deal record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "field_name": {"name": "field_name", "description": "The name of the field being changed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "new_value": {"name": "new_value", "description": "The new value of the field.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__deal.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_hubspot", "enabled": true}, "created_at": 1696434197.706305, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal_property_history`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__deal_property_history_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__deal_property_history_tmp')),\n                staging_columns=get_deal_property_history_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        deal_id,\n        name as field_name,\n        source as change_source,\n        source_id as change_source_id,\n        cast(change_timestamp as {{ dbt.type_timestamp() }}) as change_timestamp, -- source field name = timestamp ; alias declared in macros/get_deal_property_history_columns.sql\n        value as new_value\n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__deal_property_history_tmp", "package": null, "version": null}, {"name": "stg_hubspot__deal_property_history_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_deal_property_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.hubspot_source.stg_hubspot__deal_property_history_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__deal_property_history.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal_property_history_tmp`\n\n), macro as (\n\n    select\n        \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as INT64) as \n    \n    deal_id\n    \n , \n    cast(null as STRING) as \n    \n    name\n    \n , \n    cast(null as STRING) as \n    \n    source\n    \n , \n    cast(null as STRING) as \n    \n    source_id\n    \n , \n    cast(null as TIMESTAMP) as change_timestamp , \n    cast(null as STRING) as \n    \n    value\n    \n \n\n\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        deal_id,\n        name as field_name,\n        source as change_source,\n        source_id as change_source_id,\n        cast(change_timestamp as TIMESTAMP) as change_timestamp, -- source field name = timestamp ; alias declared in macros/get_deal_property_history_columns.sql\n        value as new_value\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__company": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__company", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__company.sql", "original_file_path": "models/stg_hubspot__company.sql", "unique_id": "model.hubspot_source.stg_hubspot__company", "fqn": ["hubspot_source", "stg_hubspot__company"], "alias": "stg_hubspot__company", "checksum": {"name": "sha256", "checksum": "9e7a4d481fa37fa819b57ad690c040e0701e7a65d020d3aac7ae4ee71b32e341"}, "config": {"enabled": true, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a company in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_company_deleted": {"name": "is_company_deleted", "description": "Boolean indicating whether a record has been deleted in Hubspot and/or inferred deleted in Hubspot by Fivetran; _fivetran_deleted and is_deleted fields are equivalent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_id": {"name": "company_id", "description": "The ID of the company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_name": {"name": "company_name", "description": "The name of the company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "A short statement about the company's mission and goals.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The date the company was added to your account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "industry": {"name": "industry", "description": "The type of business the company performs.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "street_address": {"name": "street_address", "description": "The street address of the company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "street_address_2": {"name": "street_address_2", "description": "Additional address information for the company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "city": {"name": "city", "description": "The city where the company is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "state": {"name": "state", "description": "The state where the company is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "country": {"name": "country", "description": "The country where the company is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_annual_revenue": {"name": "company_annual_revenue", "description": "The actual or estimated annual revenue of the company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__company.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_hubspot", "enabled": true}, "created_at": 1696434198.187627, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__company`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_company_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__company_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__company_tmp')),\n                staging_columns=get_company_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n\n{% if var('hubspot__pass_through_all_columns', false) %}\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__company_tmp')),\n                staging_columns=get_company_columns()\n            )\n        }}\n        {% if all_passthrough_column_check('stg_hubspot__company_tmp',get_company_columns()) > 0 %}\n        -- just pass everything through if extra columns are present, but ensure required columns are present.\n        ,{{ \n            fivetran_utils.remove_prefix_from_columns(\n                columns=adapter.get_columns_in_relation(ref('stg_hubspot__company_tmp')), \n                prefix='property_', exclude=get_macro_columns(get_company_columns()))\n        }}\n        {% endif %}\n    from base\n\n{% else %}\n        -- just default columns + explicitly configured passthrough columns\n        -- a few columns below are aliased within the macros/get_company_columns.sql macro\n        company_id,\n        is_company_deleted,\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        company_name,\n        description,\n        created_at,\n        industry,\n        street_address,\n        street_address_2,\n        city,\n        state,\n        country,\n        company_annual_revenue\n        \n        --The below macro adds the fields defined within your hubspot__ticket_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('hubspot__company_pass_through_columns') }}\n\n        -- The below macro add the ability to create calculated fields using the hubspot__company_calculated_fields variable.\n        {{ fivetran_utils.calculated_fields('hubspot__company_calculated_fields') }}\n        \n    from macro\n\n{% endif %}\n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__company_tmp", "package": null, "version": null}, {"name": "stg_hubspot__company_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_company_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp", "macro.fivetran_utils.fill_pass_through_columns", "macro.fivetran_utils.calculated_fields"], "nodes": ["model.hubspot_source.stg_hubspot__company_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__company.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__company_tmp`\n\n), macro as (\n\n    select\n        \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as INT64) as company_id , \n    cast(null as boolean) as is_company_deleted , \n    cast(null as STRING) as company_name , \n    cast(null as STRING) as description , \n    cast(null as TIMESTAMP) as created_at , \n    cast(null as STRING) as industry , \n    cast(null as STRING) as street_address , \n    cast(null as STRING) as street_address_2 , \n    cast(null as STRING) as city , \n    cast(null as STRING) as state , \n    cast(null as STRING) as country , \n    cast(null as INT64) as company_annual_revenue \n\n\n    from base\n\n), fields as (\n\n    select\n\n\n        -- just default columns + explicitly configured passthrough columns\n        -- a few columns below are aliased within the macros/get_company_columns.sql macro\n        company_id,\n        is_company_deleted,\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        company_name,\n        description,\n        created_at,\n        industry,\n        street_address,\n        street_address_2,\n        city,\n        state,\n        country,\n        company_annual_revenue\n        \n        --The below macro adds the fields defined within your hubspot__ticket_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n        -- The below macro add the ability to create calculated fields using the hubspot__company_calculated_fields variable.\n        \n\n\n        \n    from macro\n\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__deal_contact": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__deal_contact", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__deal_contact.sql", "original_file_path": "models/stg_hubspot__deal_contact.sql", "unique_id": "model.hubspot_source.stg_hubspot__deal_contact", "fqn": ["hubspot_source", "stg_hubspot__deal_contact"], "alias": "stg_hubspot__deal_contact", "checksum": {"name": "sha256", "checksum": "a931817a5186b2be43b92ec13c7cb7086e392c1b4a39618b2150dadebdc93c9d"}, "config": {"enabled": true, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a 'link' between a deal and contact.", "columns": {"contact_id": {"name": "contact_id", "description": "The ID of the contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_id": {"name": "deal_id", "description": "The ID of the deal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type_id": {"name": "type_id", "description": "The ID of the type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__deal.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_hubspot", "enabled": true}, "created_at": 1696434197.702654, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal_contact`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled','hubspot_deal_contact_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__deal_contact_tmp') }}\n\n), macro as (\n\n    select \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__deal_contact_tmp')),\n                staging_columns=get_deal_contact_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        contact_id,\n        deal_id,\n        type_id,\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced\n        \n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__deal_contact_tmp", "package": null, "version": null}, {"name": "stg_hubspot__deal_contact_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_deal_contact_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.hubspot_source.stg_hubspot__deal_contact_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__deal_contact.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal_contact_tmp`\n\n), macro as (\n\n    select \n        \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as INT64) as \n    \n    deal_id\n    \n , \n    cast(null as INT64) as \n    \n    contact_id\n    \n , \n    cast(null as INT64) as \n    \n    type_id\n    \n \n\n\n    from base\n\n), fields as (\n\n    select\n        contact_id,\n        deal_id,\n        type_id,\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced\n        \n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__contact_property_history": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__contact_property_history", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__contact_property_history.sql", "original_file_path": "models/stg_hubspot__contact_property_history.sql", "unique_id": "model.hubspot_source.stg_hubspot__contact_property_history", "fqn": ["hubspot_source", "stg_hubspot__contact_property_history"], "alias": "stg_hubspot__contact_property_history", "checksum": {"name": "sha256", "checksum": "c03d2dbaf4c0b9327b86f9562d4082e9fb71a4ce2aa0366fe6511d324b3c9fa3"}, "config": {"enabled": true, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a change to contact record in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_source": {"name": "change_source", "description": "The source (reason) of the change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_source_id": {"name": "change_source_id", "description": "The ID of the object that caused the change, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_timestamp": {"name": "change_timestamp", "description": "The timestamp the changed occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "field_name": {"name": "field_name", "description": "The name of the field being changed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "new_value": {"name": "new_value", "description": "The new value of the field.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__contact.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_hubspot", "enabled": true}, "created_at": 1696434197.7699142, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__contact_property_history`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled', 'hubspot_contact_property_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__contact_property_history_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__contact_property_history_tmp')),\n                staging_columns=get_contact_property_history_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        contact_id,\n        name as field_name,\n        source as change_source,\n        source_id as change_source_id,\n        cast(change_timestamp as {{ dbt.type_timestamp() }}) as change_timestamp, -- source field name = timestamp ; alias declared in macros/get_contact_property_history_columns.sql\n        value as new_value\n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__contact_property_history_tmp", "package": null, "version": null}, {"name": "stg_hubspot__contact_property_history_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_contact_property_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.hubspot_source.stg_hubspot__contact_property_history_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__contact_property_history.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__contact_property_history_tmp`\n\n), macro as (\n\n    select\n        \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as INT64) as \n    \n    contact_id\n    \n , \n    cast(null as STRING) as \n    \n    name\n    \n , \n    cast(null as STRING) as \n    \n    source\n    \n , \n    cast(null as STRING) as \n    \n    source_id\n    \n , \n    cast(null as TIMESTAMP) as change_timestamp , \n    cast(null as STRING) as \n    \n    value\n    \n \n\n\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        contact_id,\n        name as field_name,\n        source as change_source,\n        source_id as change_source_id,\n        cast(change_timestamp as TIMESTAMP) as change_timestamp, -- source field name = timestamp ; alias declared in macros/get_contact_property_history_columns.sql\n        value as new_value\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__contact_property_history_tmp": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__contact_property_history_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__contact_property_history_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__contact_property_history_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__contact_property_history_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__contact_property_history_tmp"], "alias": "stg_hubspot__contact_property_history_tmp", "checksum": {"name": "sha256", "checksum": "69264ce20150d31bbf7965f7e2ec0e9626645b53ca250cf26559d060458348b8"}, "config": {"enabled": true, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_hubspot", "enabled": true}, "created_at": 1696434196.611152, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__contact_property_history_tmp`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled', 'hubspot_contact_property_enabled'])) }}\n\nselect *\nfrom {{ var('contact_property_history') }}", "language": "sql", "refs": [], "sources": [["hubspot", "contact_property_history"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.contact_property_history"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__contact_property_history_tmp.sql", "compiled": true, "compiled_code": "\n\nselect *\nfrom `singular-vector-135519`.`hubspot_v3_part2`.`contact_property_history`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__deal_tmp": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__deal_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__deal_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__deal_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__deal_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__deal_tmp"], "alias": "stg_hubspot__deal_tmp", "checksum": {"name": "sha256", "checksum": "95ab2e8450bc8766ee190c591105b2512308e0c526c185ee2f670233d158be29"}, "config": {"enabled": true, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_hubspot", "enabled": true}, "created_at": 1696434196.640367, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal_tmp`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled'])) }}\n\nselect *\nfrom {{ var('deal') }}", "language": "sql", "refs": [], "sources": [["hubspot", "deal"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.deal"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__deal_tmp.sql", "compiled": true, "compiled_code": "\n\nselect *\nfrom `singular-vector-135519`.`hubspot_v3_part2`.`deal`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__deal_contact_tmp": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__deal_contact_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__deal_contact_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__deal_contact_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__deal_contact_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__deal_contact_tmp"], "alias": "stg_hubspot__deal_contact_tmp", "checksum": {"name": "sha256", "checksum": "a03a5d11d3b15254e18c4bc166239aec5f4a3a8eb77d0219d4760fa6cd266d63"}, "config": {"enabled": true, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_hubspot", "enabled": true}, "created_at": 1696434196.662123, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal_contact_tmp`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled','hubspot_deal_contact_enabled'])) }}\n\nselect *\nfrom {{ var('deal_contact') }}", "language": "sql", "refs": [], "sources": [["hubspot", "deal_contact"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.deal_contact"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__deal_contact_tmp.sql", "compiled": true, "compiled_code": "\n\nselect *\nfrom `singular-vector-135519`.`hubspot_v3_part2`.`deal_contact`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__contact_list_member_tmp": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__contact_list_member_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__contact_list_member_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__contact_list_member_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__contact_list_member_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__contact_list_member_tmp"], "alias": "stg_hubspot__contact_list_member_tmp", "checksum": {"name": "sha256", "checksum": "dd37cfd1177b5cd9bac732c78e6bf3e96103e76d2f8d580f1a0d9d71245bff1f"}, "config": {"enabled": true, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_hubspot", "enabled": true}, "created_at": 1696434196.6722822, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__contact_list_member_tmp`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled', 'hubspot_contact_list_member_enabled'])) }}\n\nselect *\nfrom {{ var('contact_list_member') }}", "language": "sql", "refs": [], "sources": [["hubspot", "contact_list_member"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.contact_list_member"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__contact_list_member_tmp.sql", "compiled": true, "compiled_code": "\n\nselect *\nfrom `singular-vector-135519`.`hubspot_v3_part2`.`contact_list_member`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__owner_tmp": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__owner_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__owner_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__owner_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__owner_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__owner_tmp"], "alias": "stg_hubspot__owner_tmp", "checksum": {"name": "sha256", "checksum": "7016105d385f9bb6c72d2c5c02b43655dd343da40ed69c2bf43209987b4aee49"}, "config": {"enabled": true, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_hubspot", "enabled": true}, "created_at": 1696434196.680894, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__owner_tmp`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_owner_enabled'])) }}\n\nselect *\nfrom {{ var('owner') }}", "language": "sql", "refs": [], "sources": [["hubspot", "owner"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.owner"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__owner_tmp.sql", "compiled": true, "compiled_code": "\n\nselect *\nfrom `singular-vector-135519`.`hubspot_v3_part2`.`owner`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__deal_stage_tmp": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__deal_stage_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__deal_stage_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__deal_stage_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__deal_stage_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__deal_stage_tmp"], "alias": "stg_hubspot__deal_stage_tmp", "checksum": {"name": "sha256", "checksum": "d98adfb22006395b46ce982b350e610362da6fc44ffd82862173c2435e322738"}, "config": {"enabled": true, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_hubspot", "enabled": true}, "created_at": 1696434196.691144, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal_stage_tmp`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled'])) }}\n\nselect * \nfrom {{ var('deal_stage') }}", "language": "sql", "refs": [], "sources": [["hubspot", "deal_stage"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.deal_stage"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__deal_stage_tmp.sql", "compiled": true, "compiled_code": "\n\nselect * \nfrom `singular-vector-135519`.`hubspot_v3_part2`.`deal_stage`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__deal_pipeline_tmp": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__deal_pipeline_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__deal_pipeline_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__deal_pipeline_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__deal_pipeline_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__deal_pipeline_tmp"], "alias": "stg_hubspot__deal_pipeline_tmp", "checksum": {"name": "sha256", "checksum": "838b26b30545bb880c27dd72d4548bb90331303b71bdf595672cac2c832fc371"}, "config": {"enabled": true, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_hubspot", "enabled": true}, "created_at": 1696434196.701538, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal_pipeline_tmp`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled'])) }}\n\nselect *\nfrom {{ var('deal_pipeline') }}", "language": "sql", "refs": [], "sources": [["hubspot", "deal_pipeline"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.deal_pipeline"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__deal_pipeline_tmp.sql", "compiled": true, "compiled_code": "\n\nselect *\nfrom `singular-vector-135519`.`hubspot_v3_part2`.`deal_pipeline`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__contact_tmp": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__contact_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__contact_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__contact_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__contact_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__contact_tmp"], "alias": "stg_hubspot__contact_tmp", "checksum": {"name": "sha256", "checksum": "222e410fa8793f042bc1bc8b6166ec1549cfcab887c2cbeb515dc6c96e206c0a"}, "config": {"enabled": true, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_hubspot", "enabled": true}, "created_at": 1696434196.7511091, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__contact_tmp`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled', 'hubspot_contact_enabled'])) }}\n\nselect *\nfrom {{ var('contact') }}", "language": "sql", "refs": [], "sources": [["hubspot", "contact"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.contact"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__contact_tmp.sql", "compiled": true, "compiled_code": "\n\nselect *\nfrom `singular-vector-135519`.`hubspot_v3_part2`.`contact`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__deal_company_tmp": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__deal_company_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__deal_company_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__deal_company_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__deal_company_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__deal_company_tmp"], "alias": "stg_hubspot__deal_company_tmp", "checksum": {"name": "sha256", "checksum": "6e55fbb0aca8ee3cc2100cea9821e0ef2f83d412cf3910c34ce10be77771774c"}, "config": {"enabled": true, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_hubspot", "enabled": true}, "created_at": 1696434196.790834, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal_company_tmp`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled','hubspot_deal_company_enabled'])) }}\n\nselect *\nfrom {{ var('deal_company') }}", "language": "sql", "refs": [], "sources": [["hubspot", "deal_company"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.deal_company"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__deal_company_tmp.sql", "compiled": true, "compiled_code": "\n\nselect *\nfrom `singular-vector-135519`.`hubspot_v3_part2`.`deal_company`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__company_property_history_tmp": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__company_property_history_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__company_property_history_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__company_property_history_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__company_property_history_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__company_property_history_tmp"], "alias": "stg_hubspot__company_property_history_tmp", "checksum": {"name": "sha256", "checksum": "69f48bf4865ac39f33f37b148ff8ae8b68c6ab60c5f89026886438531619d70d"}, "config": {"enabled": true, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_hubspot", "enabled": true}, "created_at": 1696434196.82828, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__company_property_history_tmp`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_company_enabled'])) }}\n\nselect *\nfrom {{ var('company_property_history') }}", "language": "sql", "refs": [], "sources": [["hubspot", "company_property_history"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.company_property_history"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__company_property_history_tmp.sql", "compiled": true, "compiled_code": "\n\nselect *\nfrom `singular-vector-135519`.`hubspot_v3_part2`.`company_property_history`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__company_tmp": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__company_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__company_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__company_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__company_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__company_tmp"], "alias": "stg_hubspot__company_tmp", "checksum": {"name": "sha256", "checksum": "76b8214116187772b164ec76b119ce2b60269f3c130ab14d1b59f1f372a5c869"}, "config": {"enabled": true, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_hubspot", "enabled": true}, "created_at": 1696434196.84955, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__company_tmp`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_company_enabled'])) }}\n\nselect *\nfrom {{ var('company') }}", "language": "sql", "refs": [], "sources": [["hubspot", "company"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.company"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__company_tmp.sql", "compiled": true, "compiled_code": "\n\nselect *\nfrom `singular-vector-135519`.`hubspot_v3_part2`.`company`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__contact_list_tmp": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__contact_list_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__contact_list_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__contact_list_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__contact_list_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__contact_list_tmp"], "alias": "stg_hubspot__contact_list_tmp", "checksum": {"name": "sha256", "checksum": "7c1ffe72d8c464a8af2599c790a73835e4d6412a30a2f76b75b9ec9b87b61994"}, "config": {"enabled": true, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_hubspot", "enabled": true}, "created_at": 1696434196.879337, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__contact_list_tmp`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled', 'hubspot_contact_list_enabled'])) }}\n\nselect *\nfrom {{ var('contact_list') }}", "language": "sql", "refs": [], "sources": [["hubspot", "contact_list"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.contact_list"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__contact_list_tmp.sql", "compiled": true, "compiled_code": "\n\nselect *\nfrom `singular-vector-135519`.`hubspot_v3_part2`.`contact_list`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__deal_pipeline_stage_tmp": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__deal_pipeline_stage_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__deal_pipeline_stage_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__deal_pipeline_stage_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__deal_pipeline_stage_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__deal_pipeline_stage_tmp"], "alias": "stg_hubspot__deal_pipeline_stage_tmp", "checksum": {"name": "sha256", "checksum": "1be55e19b21922d3ad8b79381dff62d81b5628c2e805f68b96f3a6ddf96fbfc6"}, "config": {"enabled": true, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_hubspot", "enabled": true}, "created_at": 1696434196.987495, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal_pipeline_stage_tmp`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled'])) }}\n\nselect *\nfrom {{ var('deal_pipeline_stage') }}", "language": "sql", "refs": [], "sources": [["hubspot", "deal_pipeline_stage"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.deal_pipeline_stage"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__deal_pipeline_stage_tmp.sql", "compiled": true, "compiled_code": "\n\nselect *\nfrom `singular-vector-135519`.`hubspot_v3_part2`.`deal_pipeline_stage`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__deal_property_history_tmp": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__deal_property_history_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__deal_property_history_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__deal_property_history_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__deal_property_history_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__deal_property_history_tmp"], "alias": "stg_hubspot__deal_property_history_tmp", "checksum": {"name": "sha256", "checksum": "623e9074e3f340f0d56097380b5e57de1fc8b394451d7b230703dfb600ee836a"}, "config": {"enabled": true, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_hubspot", "enabled": true}, "created_at": 1696434197.014863, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal_property_history_tmp`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled'])) }}\n\nselect *\nfrom {{ var('deal_property_history') }}", "language": "sql", "refs": [], "sources": [["hubspot", "deal_property_history"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.deal_property_history"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__deal_property_history_tmp.sql", "compiled": true, "compiled_code": "\n\nselect *\nfrom `singular-vector-135519`.`hubspot_v3_part2`.`deal_property_history`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot.hubspot__companies": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_hubspot", "name": "hubspot__companies", "resource_type": "model", "package_name": "hubspot", "path": "sales/hubspot__companies.sql", "original_file_path": "models/sales/hubspot__companies.sql", "unique_id": "model.hubspot.hubspot__companies", "fqn": ["hubspot", "sales", "hubspot__companies"], "alias": "hubspot__companies", "checksum": {"name": "sha256", "checksum": "154ed1f5973a9bcbb7a137bb4c09d75a0daee546ddbcacea4b396e0ba8395bf2"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a company in Hubspot.", "columns": {"company_id": {"name": "company_id", "description": "The ID of the company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_company_deleted": {"name": "is_company_deleted", "description": "Boolean indicating whether a record has been deleted in Hubspot and/or inferred deleted in Hubspot by Fivetran; _fivetran_deleted and is_deleted fields are equivalent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "count_engagement_notes": {"name": "count_engagement_notes", "description": "The total number of related note engagements.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "count_engagement_tasks": {"name": "count_engagement_tasks", "description": "The total number of related task engagements.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "count_engagement_calls": {"name": "count_engagement_calls", "description": "The total number of related call engagements.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "count_engagement_meetings": {"name": "count_engagement_meetings", "description": "The total number of related meeting engagements.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "count_engagement_emails": {"name": "count_engagement_emails", "description": "The total number of related email engagements.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "count_engagement_incoming_emails": {"name": "count_engagement_incoming_emails", "description": "The total number of related incoming email engagements.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "count_engagement_forwarded_emails": {"name": "count_engagement_forwarded_emails", "description": "The total number of related forwarded email engagements.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot://models/sales/sales.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": true}, "created_at": 1696434198.24757, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_hubspot`.`hubspot__companies`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_company_enabled'])) }}\n\nwith companies as (\n\n    select *\n    from {{ var('company') }}\n\n{% if fivetran_utils.enabled_vars(['hubspot_engagement_enabled','hubspot_engagement_company_enabled']) %}\n\n), engagements as (\n\n    select *\n    from {{ ref('hubspot__engagements') }}\n\n), engagement_companies as (\n\n    select *\n    from {{ var('engagement_company') }}\n\n), engagement_companies_joined as (\n\n    select\n        engagements.engagement_type,\n        engagement_companies.company_id\n    from engagements\n    inner join engagement_companies\n        using (engagement_id)\n\n), engagement_companies_agg as (\n\n    {{ engagements_aggregated('engagement_companies_joined', 'company_id') }}\n\n), joined as (\n\n    select \n        companies.*,\n        {% for metric in engagement_metrics() %}\n        coalesce(engagement_companies_agg.{{ metric }},0) as {{ metric }} {% if not loop.last %},{% endif %}\n        {% endfor %}\n    from companies\n    left join engagement_companies_agg\n        using (company_id)\n\n)\n\nselect *\nfrom joined\n\n{% else %}\n\n)\n\nselect *\nfrom companies\n\n{% endif %}", "language": "sql", "refs": [{"name": "stg_hubspot__company", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["model.hubspot_source.stg_hubspot__company"]}, "compiled_path": "target/compiled/hubspot/models/sales/hubspot__companies.sql", "compiled": true, "compiled_code": "\n\nwith companies as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__company`\n\n\n\n)\n\nselect *\nfrom companies\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot.hubspot__deals": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_hubspot", "name": "hubspot__deals", "resource_type": "model", "package_name": "hubspot", "path": "sales/hubspot__deals.sql", "original_file_path": "models/sales/hubspot__deals.sql", "unique_id": "model.hubspot.hubspot__deals", "fqn": ["hubspot", "sales", "hubspot__deals"], "alias": "hubspot__deals", "checksum": {"name": "sha256", "checksum": "97326b5bb249be59626548dab7deb1ac2bac38624543678437fa8a296a1dc1d2"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a deal in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "A brief description of the deal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The total value of the deal in the deal's currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "closed_at": {"name": "closed_at", "description": "The day the deal is expected to close, or was closed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The date the deal was created. This property is set automatically by HubSpot.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_id": {"name": "deal_id", "description": "The ID of the deal", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_name": {"name": "deal_name", "description": "The name you have given this deal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_deal_deleted": {"name": "is_deal_deleted", "description": "Boolean indicating whether a record has been deleted in Hubspot and/or inferred deleted in Hubspot by Fivetran; _fivetran_deleted and is_deleted fields are equivalent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_deal_pipeline_deleted": {"name": "is_deal_pipeline_deleted", "description": "Boolean indicating whether a record has been deleted in Hubspot and/or inferred deleted in Hubspot by Fivetran; _fivetran_deleted and is_deleted fields are equivalent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_deal_pipeline_stage_deleted": {"name": "is_deal_pipeline_stage_deleted", "description": "Boolean indicating whether a record has been deleted in Hubspot and/or inferred deleted in Hubspot by Fivetran; _fivetran_deleted and is_deleted fields are equivalent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_pipeline_id": {"name": "deal_pipeline_id", "description": "The ID of the deal's pipeline.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_pipeline_stage_id": {"name": "deal_pipeline_stage_id", "description": "The ID of the deal's pipeline stage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "The ID of the deal's owner.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "count_engagement_notes": {"name": "count_engagement_notes", "description": "The total number of related note engagements.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "count_engagement_tasks": {"name": "count_engagement_tasks", "description": "The total number of related task engagements.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "count_engagement_calls": {"name": "count_engagement_calls", "description": "The total number of related call engagements.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "count_engagement_meetings": {"name": "count_engagement_meetings", "description": "The total number of related meeting engagements.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "count_engagement_emails": {"name": "count_engagement_emails", "description": "The total number of related email engagements.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "count_engagement_incoming_emails": {"name": "count_engagement_incoming_emails", "description": "The total number of related incoming email engagements.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "count_engagement_forwarded_emails": {"name": "count_engagement_forwarded_emails", "description": "The total number of related forwarded email engagements.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_pipeline_active": {"name": "is_pipeline_active", "description": "Boolean indicating if the pipeline is active.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pipeline_label": {"name": "pipeline_label", "description": "The label of the deal's pipeline.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pipeline_stage_label": {"name": "pipeline_stage_label", "description": "The label of the deal's pipeline stage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owner_email_address": {"name": "owner_email_address", "description": "The email address of the deal's owner.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owner_full_name": {"name": "owner_full_name", "description": "The full name of the deal's owner.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_pipeline_created_at": {"name": "deal_pipeline_created_at", "description": "A timestamp representing when the deal_pipeline was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_pipeline_updated_at": {"name": "deal_pipeline_updated_at", "description": "A timestamp representing when the deal_pipeline was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot://models/sales/sales.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": true}, "created_at": 1696434198.2401311, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_hubspot`.`hubspot__deals`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled'])) }}\n\nwith deals_enhanced as (\n\n    select *\n    from {{ ref('int_hubspot__deals_enhanced') }}\n\n{% if fivetran_utils.enabled_vars(['hubspot_engagement_enabled','hubspot_engagement_deal_enabled']) %}\n\n), engagements as (\n\n    select *\n    from {{ ref('hubspot__engagements') }}\n\n), engagement_deals as (\n\n    select *\n    from {{ var('engagement_deal') }}\n\n), engagement_deal_joined as (\n\n    select\n        engagements.engagement_type,\n        engagement_deals.deal_id\n    from engagements\n    inner join engagement_deals\n        on cast(engagements.engagement_id as {{ dbt.type_bigint() }}) = cast(engagement_deals.engagement_id as {{ dbt.type_bigint() }} )\n\n), engagement_deal_agg as (\n\n    {{ engagements_aggregated('engagement_deal_joined', 'deal_id') }}\n\n), engagements_joined as (\n\n    select \n        deals_enhanced.*,\n        {% for metric in engagement_metrics() %}\n        coalesce(engagement_deal_agg.{{ metric }},0) as {{ metric }} {% if not loop.last %},{% endif %}\n        {% endfor %}\n    from deals_enhanced\n    left join engagement_deal_agg\n        on cast(deals_enhanced.deal_id as {{ dbt.type_bigint() }}) = cast(engagement_deal_agg.deal_id as {{ dbt.type_bigint() }} )\n\n)\n\nselect *\nfrom engagements_joined\n\n{% else %}\n\n)\n\nselect *\nfrom deals_enhanced\n\n{% endif %}", "language": "sql", "refs": [{"name": "int_hubspot__deals_enhanced", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["model.hubspot.int_hubspot__deals_enhanced"]}, "compiled_path": "target/compiled/hubspot/models/sales/hubspot__deals.sql", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_hubspot__deals_enhanced as (\n\n\nwith deals as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal`\n\n), pipelines as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal_pipeline`\n\n), pipeline_stages as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal_pipeline_stage`\n\n), owners as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__owner`\n\n), deal_fields_joined as (\n\n    select \n        deals.*,\n        coalesce(pipelines.is_deal_pipeline_deleted, false) as is_deal_pipeline_deleted,\n        pipelines.pipeline_label,\n        pipelines.is_active as is_pipeline_active,\n        coalesce(pipeline_stages.is_deal_pipeline_stage_deleted, false) as is_deal_pipeline_stage_deleted,\n        pipelines.deal_pipeline_created_at,\n        pipelines.deal_pipeline_updated_at,\n        pipeline_stages.pipeline_stage_label,\n        owners.email_address as owner_email_address,\n        owners.full_name as owner_full_name\n    from deals    \n    left join pipelines \n        on deals.deal_pipeline_id = pipelines.deal_pipeline_id\n    left join pipeline_stages \n        on deals.deal_pipeline_stage_id = pipeline_stages.deal_pipeline_stage_id\n    left join owners \n        on deals.owner_id = owners.owner_id\n)\n\nselect *\nfrom deal_fields_joined\n), deals_enhanced as (\n\n    select *\n    from __dbt__cte__int_hubspot__deals_enhanced\n\n\n\n)\n\nselect *\nfrom deals_enhanced\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.hubspot.int_hubspot__deals_enhanced", "sql": " __dbt__cte__int_hubspot__deals_enhanced as (\n\n\nwith deals as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal`\n\n), pipelines as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal_pipeline`\n\n), pipeline_stages as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal_pipeline_stage`\n\n), owners as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__owner`\n\n), deal_fields_joined as (\n\n    select \n        deals.*,\n        coalesce(pipelines.is_deal_pipeline_deleted, false) as is_deal_pipeline_deleted,\n        pipelines.pipeline_label,\n        pipelines.is_active as is_pipeline_active,\n        coalesce(pipeline_stages.is_deal_pipeline_stage_deleted, false) as is_deal_pipeline_stage_deleted,\n        pipelines.deal_pipeline_created_at,\n        pipelines.deal_pipeline_updated_at,\n        pipeline_stages.pipeline_stage_label,\n        owners.email_address as owner_email_address,\n        owners.full_name as owner_full_name\n    from deals    \n    left join pipelines \n        on deals.deal_pipeline_id = pipelines.deal_pipeline_id\n    left join pipeline_stages \n        on deals.deal_pipeline_stage_id = pipeline_stages.deal_pipeline_stage_id\n    left join owners \n        on deals.owner_id = owners.owner_id\n)\n\nselect *\nfrom deal_fields_joined\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot.hubspot__deal_stages": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_hubspot", "name": "hubspot__deal_stages", "resource_type": "model", "package_name": "hubspot", "path": "sales/hubspot__deal_stages.sql", "original_file_path": "models/sales/hubspot__deal_stages.sql", "unique_id": "model.hubspot.hubspot__deal_stages", "fqn": ["hubspot", "sales", "hubspot__deal_stages"], "alias": "hubspot__deal_stages", "checksum": {"name": "sha256", "checksum": "bff63d019c29c0878f39cd17cf1967a9a2a1d0c4fbdf55241a55de4122c4388d"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a stage within a deal in Hubspot", "columns": {"deal_stage_id": {"name": "deal_stage_id", "description": "The unique deal stage identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_deal_pipeline_deleted": {"name": "is_deal_pipeline_deleted", "description": "Boolean indicating whether a record has been deleted in Hubspot and/or inferred deleted in Hubspot by Fivetran; _fivetran_deleted and is_deleted fields are equivalent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_deal_pipeline_stage_deleted": {"name": "is_deal_pipeline_stage_deleted", "description": "Boolean indicating whether a record has been deleted in Hubspot and/or inferred deleted in Hubspot by Fivetran; _fivetran_deleted and is_deleted fields are equivalent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_deal_deleted": {"name": "is_deal_deleted", "description": "Boolean indicating whether a record has been deleted in Hubspot and/or inferred deleted in Hubspot by Fivetran; _fivetran_deleted and is_deleted fields are equivalent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pipeline_stage_id": {"name": "pipeline_stage_id", "description": "The ID of the deal's pipeline stage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_stage_entered": {"name": "date_stage_entered", "description": "The timestamp the deal stage was entered.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_stage_exited": {"name": "date_stage_exited", "description": "The Fivetran calculated exit time of the deal stage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_stage_active": {"name": "is_stage_active", "description": "Boolean indicating whether the deal stage active.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_id": {"name": "deal_id", "description": "The ID of the deal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pipeline_id": {"name": "pipeline_id", "description": "The ID of the deal's pipeline.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pipeline_label": {"name": "pipeline_label", "description": "The label of the deal's pipeline.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_pipeline_active": {"name": "is_pipeline_active", "description": "Boolean indicating if the pipeline is active.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_pipeline_stage_active": {"name": "is_pipeline_stage_active", "description": "Boolean indicating if the pipeline stage is active.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pipeline_stage_label": {"name": "pipeline_stage_label", "description": "The label of the deal's pipeline stage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source": {"name": "source", "description": "The relevant source of the deal stage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_id": {"name": "source_id", "description": "Reference to the source.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_pipeline_stage_closed_won": {"name": "is_pipeline_stage_closed_won", "description": "Whether the stage represents a Closed Won deal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pipeline_stage_display_order": {"name": "pipeline_stage_display_order", "description": "Used to determine the order in which the stages appear when viewed in HubSpot.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pipeline_display_order": {"name": "pipeline_display_order", "description": "Used to determine the order in which the pipelines appear when viewed in HubSpot.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pipeline_stage_probability": {"name": "pipeline_stage_probability", "description": "The probability that the deal will close. Used for the deal forecast.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_name": {"name": "deal_name", "description": "The name you have given this deal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_pipeline_stage_created_at": {"name": "deal_pipeline_stage_created_at", "description": "A timestamp representing when the deal_pipeline_stage was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_pipeline_stage_updated_at": {"name": "deal_pipeline_stage_updated_at", "description": "A timestamp representing when the deal_pipeline_stage was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot://models/sales/sales.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": true}, "created_at": 1696434198.246467, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_hubspot`.`hubspot__deal_stages`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled'])) }}\n\nwith deals_enhanced as (\n\n    select *\n    from {{ ref('int_hubspot__deals_enhanced') }}\n\n), deal_stage as (\n\n    select *\n    from {{ var('deal_stage') }}\n\n), pipeline_stage as (\n\n    select *\n    from {{ var('deal_pipeline_stage') }}\n\n), pipeline as (\n\n    select *\n    from {{ var('deal_pipeline') }}\n\n), final as (\n\n    select\n        deal_stage.deal_id || '-' || row_number() over(partition by deal_stage.deal_id order by deal_stage.date_entered asc) as deal_stage_id,\n        deals_enhanced.deal_id,\n        deals_enhanced.deal_name,\n        deal_stage._fivetran_start as date_stage_entered,\n        deal_stage._fivetran_end as date_stage_exited,\n        deal_stage._fivetran_active as is_stage_active,\n        deal_stage.deal_stage_name as pipeline_stage_id,\n        pipeline_stage.pipeline_stage_label,\n        pipeline_stage.deal_pipeline_id as pipeline_id,\n        pipeline.pipeline_label,\n        deal_stage.source,\n        deal_stage.source_id,\n        pipeline_stage.is_active as is_pipeline_stage_active,\n        pipeline.is_active as is_pipeline_active,\n        pipeline_stage.is_closed_won as is_pipeline_stage_closed_won,\n        pipeline_stage.display_order as pipeline_stage_display_order,\n        pipeline.display_order as pipeline_display_order,\n        pipeline_stage.probability as pipeline_stage_probability,\n        coalesce(pipeline.is_deal_pipeline_deleted, false) as is_deal_pipeline_deleted,\n        coalesce(pipeline_stage.is_deal_pipeline_stage_deleted, false) as is_deal_pipeline_stage_deleted,\n        coalesce(deals_enhanced.is_deal_deleted, false) as is_deal_deleted,\n        pipeline_stage.deal_pipeline_stage_created_at,\n        pipeline_stage.deal_pipeline_stage_updated_at\n\n    from deal_stage\n\n    left join pipeline_stage\n        on deal_stage.deal_stage_name = pipeline_stage.deal_pipeline_stage_id\n    \n    left join pipeline\n        on pipeline_stage.deal_pipeline_id = pipeline.deal_pipeline_id\n\n    left join deals_enhanced\n        on deal_stage.deal_id = deals_enhanced.deal_id\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "int_hubspot__deals_enhanced", "package": null, "version": null}, {"name": "stg_hubspot__deal_stage", "package": null, "version": null}, {"name": "stg_hubspot__deal_pipeline_stage", "package": null, "version": null}, {"name": "stg_hubspot__deal_pipeline", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["model.hubspot.int_hubspot__deals_enhanced", "model.hubspot_source.stg_hubspot__deal_stage", "model.hubspot_source.stg_hubspot__deal_pipeline_stage", "model.hubspot_source.stg_hubspot__deal_pipeline"]}, "compiled_path": "target/compiled/hubspot/models/sales/hubspot__deal_stages.sql", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_hubspot__deals_enhanced as (\n\n\nwith deals as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal`\n\n), pipelines as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal_pipeline`\n\n), pipeline_stages as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal_pipeline_stage`\n\n), owners as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__owner`\n\n), deal_fields_joined as (\n\n    select \n        deals.*,\n        coalesce(pipelines.is_deal_pipeline_deleted, false) as is_deal_pipeline_deleted,\n        pipelines.pipeline_label,\n        pipelines.is_active as is_pipeline_active,\n        coalesce(pipeline_stages.is_deal_pipeline_stage_deleted, false) as is_deal_pipeline_stage_deleted,\n        pipelines.deal_pipeline_created_at,\n        pipelines.deal_pipeline_updated_at,\n        pipeline_stages.pipeline_stage_label,\n        owners.email_address as owner_email_address,\n        owners.full_name as owner_full_name\n    from deals    \n    left join pipelines \n        on deals.deal_pipeline_id = pipelines.deal_pipeline_id\n    left join pipeline_stages \n        on deals.deal_pipeline_stage_id = pipeline_stages.deal_pipeline_stage_id\n    left join owners \n        on deals.owner_id = owners.owner_id\n)\n\nselect *\nfrom deal_fields_joined\n), deals_enhanced as (\n\n    select *\n    from __dbt__cte__int_hubspot__deals_enhanced\n\n), deal_stage as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal_stage`\n\n), pipeline_stage as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal_pipeline_stage`\n\n), pipeline as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal_pipeline`\n\n), final as (\n\n    select\n        deal_stage.deal_id || '-' || row_number() over(partition by deal_stage.deal_id order by deal_stage.date_entered asc) as deal_stage_id,\n        deals_enhanced.deal_id,\n        deals_enhanced.deal_name,\n        deal_stage._fivetran_start as date_stage_entered,\n        deal_stage._fivetran_end as date_stage_exited,\n        deal_stage._fivetran_active as is_stage_active,\n        deal_stage.deal_stage_name as pipeline_stage_id,\n        pipeline_stage.pipeline_stage_label,\n        pipeline_stage.deal_pipeline_id as pipeline_id,\n        pipeline.pipeline_label,\n        deal_stage.source,\n        deal_stage.source_id,\n        pipeline_stage.is_active as is_pipeline_stage_active,\n        pipeline.is_active as is_pipeline_active,\n        pipeline_stage.is_closed_won as is_pipeline_stage_closed_won,\n        pipeline_stage.display_order as pipeline_stage_display_order,\n        pipeline.display_order as pipeline_display_order,\n        pipeline_stage.probability as pipeline_stage_probability,\n        coalesce(pipeline.is_deal_pipeline_deleted, false) as is_deal_pipeline_deleted,\n        coalesce(pipeline_stage.is_deal_pipeline_stage_deleted, false) as is_deal_pipeline_stage_deleted,\n        coalesce(deals_enhanced.is_deal_deleted, false) as is_deal_deleted,\n        pipeline_stage.deal_pipeline_stage_created_at,\n        pipeline_stage.deal_pipeline_stage_updated_at\n\n    from deal_stage\n\n    left join pipeline_stage\n        on deal_stage.deal_stage_name = pipeline_stage.deal_pipeline_stage_id\n    \n    left join pipeline\n        on pipeline_stage.deal_pipeline_id = pipeline.deal_pipeline_id\n\n    left join deals_enhanced\n        on deal_stage.deal_id = deals_enhanced.deal_id\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.hubspot.int_hubspot__deals_enhanced", "sql": " __dbt__cte__int_hubspot__deals_enhanced as (\n\n\nwith deals as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal`\n\n), pipelines as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal_pipeline`\n\n), pipeline_stages as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal_pipeline_stage`\n\n), owners as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__owner`\n\n), deal_fields_joined as (\n\n    select \n        deals.*,\n        coalesce(pipelines.is_deal_pipeline_deleted, false) as is_deal_pipeline_deleted,\n        pipelines.pipeline_label,\n        pipelines.is_active as is_pipeline_active,\n        coalesce(pipeline_stages.is_deal_pipeline_stage_deleted, false) as is_deal_pipeline_stage_deleted,\n        pipelines.deal_pipeline_created_at,\n        pipelines.deal_pipeline_updated_at,\n        pipeline_stages.pipeline_stage_label,\n        owners.email_address as owner_email_address,\n        owners.full_name as owner_full_name\n    from deals    \n    left join pipelines \n        on deals.deal_pipeline_id = pipelines.deal_pipeline_id\n    left join pipeline_stages \n        on deals.deal_pipeline_stage_id = pipeline_stages.deal_pipeline_stage_id\n    left join owners \n        on deals.owner_id = owners.owner_id\n)\n\nselect *\nfrom deal_fields_joined\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot.hubspot__deal_history": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_hubspot", "name": "hubspot__deal_history", "resource_type": "model", "package_name": "hubspot", "path": "sales/history/hubspot__deal_history.sql", "original_file_path": "models/sales/history/hubspot__deal_history.sql", "unique_id": "model.hubspot.hubspot__deal_history", "fqn": ["hubspot", "sales", "history", "hubspot__deal_history"], "alias": "hubspot__deal_history", "checksum": {"name": "sha256", "checksum": "cdb3cccb4941f4563cb626b5080ed5c878947fd4d0dbd3518e4480415b10094e"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a change to deal record in Hubspot; the grain of this model is deal_id -> field_name -> valid_to.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_source": {"name": "change_source", "description": "The source (reason) of the change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_source_id": {"name": "change_source_id", "description": "The ID of the object that caused the change, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "valid_from": {"name": "valid_from", "description": "The timestamp the change was valid from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "valid_to": {"name": "valid_to", "description": "The timestamp the change was valid to. Null if still valid.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_id": {"name": "deal_id", "description": "The ID of the related deal record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "field_name": {"name": "field_name", "description": "The name of the field being changed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "new_value": {"name": "new_value", "description": "The new value of the field.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot://models/sales/history/history.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": true}, "created_at": 1696434198.2703319, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_hubspot`.`hubspot__deal_history`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled'])) }}\n\nwith history as (\n\n    select *\n    from {{ var('deal_property_history') }}\n\n), windows as (\n\n    select\n        deal_id,\n        field_name,\n        change_source,\n        change_source_id,\n        change_timestamp as valid_from,\n        new_value,\n        lead(change_timestamp) over (partition by deal_id, field_name order by change_timestamp) as valid_to\n    from history\n\n), surrogate as (\n\n    select \n        windows.*,\n        {{ dbt_utils.generate_surrogate_key(['field_name','deal_id','valid_from']) }} as id\n    from windows\n\n)\n\nselect *\nfrom surrogate", "language": "sql", "refs": [{"name": "stg_hubspot__deal_property_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.hubspot_source.stg_hubspot__deal_property_history"]}, "compiled_path": "target/compiled/hubspot/models/sales/history/hubspot__deal_history.sql", "compiled": true, "compiled_code": "\n\nwith history as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal_property_history`\n\n), windows as (\n\n    select\n        deal_id,\n        field_name,\n        change_source,\n        change_source_id,\n        change_timestamp as valid_from,\n        new_value,\n        lead(change_timestamp) over (partition by deal_id, field_name order by change_timestamp) as valid_to\n    from history\n\n), surrogate as (\n\n    select \n        windows.*,\n        to_hex(md5(cast(coalesce(cast(field_name as STRING), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(deal_id as STRING), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(valid_from as STRING), '_dbt_utils_surrogate_key_null_') as STRING))) as id\n    from windows\n\n)\n\nselect *\nfrom surrogate", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot.hubspot__company_history": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_hubspot", "name": "hubspot__company_history", "resource_type": "model", "package_name": "hubspot", "path": "sales/history/hubspot__company_history.sql", "original_file_path": "models/sales/history/hubspot__company_history.sql", "unique_id": "model.hubspot.hubspot__company_history", "fqn": ["hubspot", "sales", "history", "hubspot__company_history"], "alias": "hubspot__company_history", "checksum": {"name": "sha256", "checksum": "c60335081ab89cd9d93e6cbe4857c8b9e72251e26551dae294def63b594cef66"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a change to company record in Hubspot; the grain of this model is company_id -> field_name -> valid_to.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_source": {"name": "change_source", "description": "The source (reason) of the change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_source_id": {"name": "change_source_id", "description": "The ID of the object that caused the change, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "valid_from": {"name": "valid_from", "description": "The timestamp the change was valid from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "valid_to": {"name": "valid_to", "description": "The timestamp the change was valid to. Null if still valid.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_id": {"name": "company_id", "description": "The ID of the related company record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "field_name": {"name": "field_name", "description": "The name of the field being changed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "new_value": {"name": "new_value", "description": "The new value of the field.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot://models/sales/history/history.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": true}, "created_at": 1696434198.2692218, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_hubspot`.`hubspot__company_history`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_company_enabled'])) }}\n\nwith history as (\n\n    select *\n    from {{ var('company_property_history') }}\n\n), windows as (\n\n    select\n        company_id,\n        field_name,\n        change_source,\n        change_source_id,\n        change_timestamp as valid_from,\n        new_value,\n        lead(change_timestamp) over (partition by company_id, field_name order by change_timestamp) as valid_to\n    from history\n\n), surrogate as (\n\n    select \n        windows.*,\n        {{ dbt_utils.generate_surrogate_key(['field_name','company_id','valid_from']) }} as id\n    from windows\n\n)\n\nselect *\nfrom surrogate", "language": "sql", "refs": [{"name": "stg_hubspot__company_property_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.hubspot_source.stg_hubspot__company_property_history"]}, "compiled_path": "target/compiled/hubspot/models/sales/history/hubspot__company_history.sql", "compiled": true, "compiled_code": "\n\nwith history as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__company_property_history`\n\n), windows as (\n\n    select\n        company_id,\n        field_name,\n        change_source,\n        change_source_id,\n        change_timestamp as valid_from,\n        new_value,\n        lead(change_timestamp) over (partition by company_id, field_name order by change_timestamp) as valid_to\n    from history\n\n), surrogate as (\n\n    select \n        windows.*,\n        to_hex(md5(cast(coalesce(cast(field_name as STRING), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(company_id as STRING), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(valid_from as STRING), '_dbt_utils_surrogate_key_null_') as STRING))) as id\n    from windows\n\n)\n\nselect *\nfrom surrogate", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot.int_hubspot__deals_enhanced": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_hubspot", "name": "int_hubspot__deals_enhanced", "resource_type": "model", "package_name": "hubspot", "path": "sales/intermediate/int_hubspot__deals_enhanced.sql", "original_file_path": "models/sales/intermediate/int_hubspot__deals_enhanced.sql", "unique_id": "model.hubspot.int_hubspot__deals_enhanced", "fqn": ["hubspot", "sales", "intermediate", "int_hubspot__deals_enhanced"], "alias": "int_hubspot__deals_enhanced", "checksum": {"name": "sha256", "checksum": "cc1476973c73c19d90b892f9d527d0202770c995a9058f25df70be3b6fb61327"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "schema": "hubspot", "enabled": true}, "created_at": 1696434197.2608168, "relation_name": null, "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled'])) }}\n\nwith deals as (\n\n    select *\n    from {{ var('deal') }}\n\n), pipelines as (\n\n    select *\n    from {{ var('deal_pipeline') }}\n\n), pipeline_stages as (\n\n    select *\n    from {{ var('deal_pipeline_stage') }}\n\n), owners as (\n\n    select *\n    from {{ var('owner') }}\n\n), deal_fields_joined as (\n\n    select \n        deals.*,\n        coalesce(pipelines.is_deal_pipeline_deleted, false) as is_deal_pipeline_deleted,\n        pipelines.pipeline_label,\n        pipelines.is_active as is_pipeline_active,\n        coalesce(pipeline_stages.is_deal_pipeline_stage_deleted, false) as is_deal_pipeline_stage_deleted,\n        pipelines.deal_pipeline_created_at,\n        pipelines.deal_pipeline_updated_at,\n        pipeline_stages.pipeline_stage_label,\n        owners.email_address as owner_email_address,\n        owners.full_name as owner_full_name\n    from deals    \n    left join pipelines \n        on deals.deal_pipeline_id = pipelines.deal_pipeline_id\n    left join pipeline_stages \n        on deals.deal_pipeline_stage_id = pipeline_stages.deal_pipeline_stage_id\n    left join owners \n        on deals.owner_id = owners.owner_id\n)\n\nselect *\nfrom deal_fields_joined", "language": "sql", "refs": [{"name": "stg_hubspot__deal", "package": null, "version": null}, {"name": "stg_hubspot__deal_pipeline", "package": null, "version": null}, {"name": "stg_hubspot__deal_pipeline_stage", "package": null, "version": null}, {"name": "stg_hubspot__owner", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["model.hubspot_source.stg_hubspot__deal", "model.hubspot_source.stg_hubspot__deal_pipeline", "model.hubspot_source.stg_hubspot__deal_pipeline_stage", "model.hubspot_source.stg_hubspot__owner"]}, "compiled_path": "target/compiled/hubspot/models/sales/intermediate/int_hubspot__deals_enhanced.sql", "compiled": true, "compiled_code": "\n\nwith deals as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal`\n\n), pipelines as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal_pipeline`\n\n), pipeline_stages as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal_pipeline_stage`\n\n), owners as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__owner`\n\n), deal_fields_joined as (\n\n    select \n        deals.*,\n        coalesce(pipelines.is_deal_pipeline_deleted, false) as is_deal_pipeline_deleted,\n        pipelines.pipeline_label,\n        pipelines.is_active as is_pipeline_active,\n        coalesce(pipeline_stages.is_deal_pipeline_stage_deleted, false) as is_deal_pipeline_stage_deleted,\n        pipelines.deal_pipeline_created_at,\n        pipelines.deal_pipeline_updated_at,\n        pipeline_stages.pipeline_stage_label,\n        owners.email_address as owner_email_address,\n        owners.full_name as owner_full_name\n    from deals    \n    left join pipelines \n        on deals.deal_pipeline_id = pipelines.deal_pipeline_id\n    left join pipeline_stages \n        on deals.deal_pipeline_stage_id = pipeline_stages.deal_pipeline_stage_id\n    left join owners \n        on deals.owner_id = owners.owner_id\n)\n\nselect *\nfrom deal_fields_joined", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot.hubspot__contact_lists": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_hubspot", "name": "hubspot__contact_lists", "resource_type": "model", "package_name": "hubspot", "path": "marketing/hubspot__contact_lists.sql", "original_file_path": "models/marketing/hubspot__contact_lists.sql", "unique_id": "model.hubspot.hubspot__contact_lists", "fqn": ["hubspot", "marketing", "hubspot__contact_lists"], "alias": "hubspot__contact_lists", "checksum": {"name": "sha256", "checksum": "d64e857bddb0f41ad95d17b2f79ea38792cc6e2a3d019e9a660cb86bca62e337"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a contact list in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_list_id": {"name": "contact_list_id", "description": "The ID of the contact list.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_list_name": {"name": "contact_list_name", "description": "The name of the contact list.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_contact_list_deleted": {"name": "is_contact_list_deleted", "description": "Boolean indicating whether a record has been deleted in Hubspot and/or inferred deleted in Hubspot by Fivetran; _fivetran_deleted and is_deleted fields are equivalent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "A timestamp of the time the list was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_deletable": {"name": "is_deletable", "description": "If this is false, this is a system list and cannot be deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_dynamic": {"name": "is_dynamic", "description": "Whether the contact list is dynamic.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata_error": {"name": "metadata_error", "description": "Any errors that happened the last time the list was processed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata_last_processing_state_change_at": {"name": "metadata_last_processing_state_change_at", "description": "A timestamp of the last time that the processing state changed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata_last_size_change_at": {"name": "metadata_last_size_change_at", "description": "A timestamp of the last time that the size of the list changed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata_processing": {"name": "metadata_processing", "description": "One of DONE, REFRESHING, INITIALIZING, or PROCESSING. \nDONE indicates the list has finished processing, any other value indicates that list membership is being evaluated.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata_size": {"name": "metadata_size", "description": "The approximate number of contacts in the list.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "A timestamp of the time that the list was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_bounces": {"name": "total_bounces", "description": "The total number of bounce email events.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_clicks": {"name": "total_clicks", "description": "The total number of click email events.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_deferrals": {"name": "total_deferrals", "description": "The total number of deferral email events.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_deliveries": {"name": "total_deliveries", "description": "The total number of delivery email events.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_drops": {"name": "total_drops", "description": "The total number of drop email events.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_forwards": {"name": "total_forwards", "description": "The total number of forward email events.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_opens": {"name": "total_opens", "description": "The total number of open email events.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_prints": {"name": "total_prints", "description": "The total number of print email events.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_spam_reports": {"name": "total_spam_reports", "description": "The total number of spam report email events.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_unsubscribes": {"name": "total_unsubscribes", "description": "The total number of unsubscribe email events.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_unique_bounces": {"name": "total_unique_bounces", "description": "The total number of unique email sends with a bounce email event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_unique_clicks": {"name": "total_unique_clicks", "description": "The total number of unique email sends with a click email event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_unique_deferrals": {"name": "total_unique_deferrals", "description": "The total number of unique email sends with a deferral email event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_unique_deliveries": {"name": "total_unique_deliveries", "description": "The total number of unique email sends with a delivery email event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_unique_drops": {"name": "total_unique_drops", "description": "The total number of unique email sends with a drop email event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_unique_forwards": {"name": "total_unique_forwards", "description": "The total number of unique email sends with a forward email event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_unique_opens": {"name": "total_unique_opens", "description": "The total number of unique email sends with a opens email event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_unique_prints": {"name": "total_unique_prints", "description": "The total number of unique email sends with a print email event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_unique_spam_reports": {"name": "total_unique_spam_reports", "description": "The total number of unique email sends with a spam report email event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_unique_unsubscribes": {"name": "total_unique_unsubscribes", "description": "The total number of unique email sends with a unsubscribe email event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot://models/marketing/marketing.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": true}, "created_at": 1696434198.35753, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_hubspot`.`hubspot__contact_lists`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled', 'hubspot_contact_list_enabled'])) }}\n\nwith contact_lists as (\n\n    select *\n    from {{ var('contact_list') }}\n\n{% if fivetran_utils.enabled_vars(['hubspot_marketing_enabled', 'hubspot_email_event_enabled']) %}\n\n), email_metrics as (\n\n    select *\n    from {{ ref('int_hubspot__email_metrics__by_contact_list') }}\n\n), joined as (\n    {% set email_metrics = adjust_email_metrics('hubspot__email_sends', 'email_metrics') %}\n    select \n        contact_lists.*,\n        {% for metric in email_metrics %}\n        coalesce(email_metrics.total_{{ metric }}, 0) as total_{{ metric }},\n        coalesce(email_metrics.total_unique_{{ metric }}, 0) as total_unique_{{ metric }}\n        {% if not loop.last %},{% endif %}\n        {% endfor %}\n    from contact_lists\n    left join email_metrics\n        using (contact_list_id)\n\n)\n\nselect *\nfrom joined\n\n{% else %}\n\n)\n\nselect *\nfrom contact_lists\n\n{% endif %}", "language": "sql", "refs": [{"name": "stg_hubspot__contact_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["model.hubspot_source.stg_hubspot__contact_list"]}, "compiled_path": "target/compiled/hubspot/models/marketing/hubspot__contact_lists.sql", "compiled": true, "compiled_code": "\n\nwith contact_lists as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__contact_list`\n\n\n\n)\n\nselect *\nfrom contact_lists\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot.hubspot__contacts": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_hubspot", "name": "hubspot__contacts", "resource_type": "model", "package_name": "hubspot", "path": "marketing/hubspot__contacts.sql", "original_file_path": "models/marketing/hubspot__contacts.sql", "unique_id": "model.hubspot.hubspot__contacts", "fqn": ["hubspot", "marketing", "hubspot__contacts"], "alias": "hubspot__contacts", "checksum": {"name": "sha256", "checksum": "d261b28173eb6da22fbe3e80061f6128ea68c679567eb986bae6c8923f4d510c"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a contact in Hubspot.", "columns": {"is_contact_deleted": {"name": "is_contact_deleted", "description": "Boolean indicating whether a record has been deleted in Hubspot and/or inferred deleted in Hubspot by Fivetran; _fivetran_deleted and is_deleted fields are equivalent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_company": {"name": "contact_company", "description": "The name of the contact's company", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "The contact's first name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "The contact's last name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "The email address of the contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The date that the contact was created in your HubSpot account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_title": {"name": "job_title", "description": "The contact's job title.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_annual_revenue": {"name": "company_annual_revenue", "description": "The contact's annual company revenue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_bounces": {"name": "total_bounces", "description": "The total number of bounce email events.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_clicks": {"name": "total_clicks", "description": "The total number of click email events.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_deferrals": {"name": "total_deferrals", "description": "The total number of deferral email events.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_deliveries": {"name": "total_deliveries", "description": "The total number of delivery email events.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_drops": {"name": "total_drops", "description": "The total number of drop email events.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_forwards": {"name": "total_forwards", "description": "The total number of forward email events.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_opens": {"name": "total_opens", "description": "The total number of open email events.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_prints": {"name": "total_prints", "description": "The total number of print email events.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_spam_reports": {"name": "total_spam_reports", "description": "The total number of spam report email events.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_unsubscribes": {"name": "total_unsubscribes", "description": "The total number of unsubscribe email events.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_unique_bounces": {"name": "total_unique_bounces", "description": "The total number of unique email sends with a bounce email event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_unique_clicks": {"name": "total_unique_clicks", "description": "The total number of unique email sends with a click email event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_unique_deferrals": {"name": "total_unique_deferrals", "description": "The total number of unique email sends with a deferral email event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_unique_deliveries": {"name": "total_unique_deliveries", "description": "The total number of unique email sends with a delivery email event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_unique_drops": {"name": "total_unique_drops", "description": "The total number of unique email sends with a drop email event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_unique_forwards": {"name": "total_unique_forwards", "description": "The total number of unique email sends with a forward email event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_unique_opens": {"name": "total_unique_opens", "description": "The total number of unique email sends with a opens email event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_unique_prints": {"name": "total_unique_prints", "description": "The total number of unique email sends with a print email event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_unique_spam_reports": {"name": "total_unique_spam_reports", "description": "The total number of unique email sends with a spam report email event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_unique_unsubscribes": {"name": "total_unique_unsubscribes", "description": "The total number of unique email sends with a unsubscribe email event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "count_engagement_notes": {"name": "count_engagement_notes", "description": "The total number of related note engagements.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "count_engagement_tasks": {"name": "count_engagement_tasks", "description": "The total number of related task engagements.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "count_engagement_calls": {"name": "count_engagement_calls", "description": "The total number of related call engagements.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "count_engagement_meetings": {"name": "count_engagement_meetings", "description": "The total number of related meeting engagements.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "count_engagement_emails": {"name": "count_engagement_emails", "description": "The total number of related email engagements.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "count_engagement_incoming_emails": {"name": "count_engagement_incoming_emails", "description": "The total number of related incoming email engagements.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "count_engagement_forwarded_emails": {"name": "count_engagement_forwarded_emails", "description": "The total number of related forwarded email engagements.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "calculated_merged_vids": {"name": "calculated_merged_vids", "description": "List of mappings representing contact IDs that have been merged into the contact at hand. Format: <merged_contact_id>:<merged_at_in_epoch_time>;<second_merged_contact_id>:<merged_at_in_epoch_time> This field has replaced the `CONTACT_MERGE_AUDIT` table, which was deprecated by the Hubspot v3 CRM API.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot://models/marketing/marketing.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": true}, "created_at": 1696434198.355215, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_hubspot`.`hubspot__contacts`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled', 'hubspot_contact_enabled'])) }}\n{% set emails_enabled = fivetran_utils.enabled_vars(['hubspot_marketing_enabled', 'hubspot_email_event_enabled']) %}\n{% set engagements_enabled = fivetran_utils.enabled_vars(['hubspot_sales_enabled', 'hubspot_engagement_enabled']) %}\n\nwith contacts as (\n\n    select *\n    from {{ ref('int_hubspot__contact_merge_adjust') }} \n{% if emails_enabled %}\n\n), email_sends as (\n\n    select *\n    from {{ ref('hubspot__email_sends') }}\n\n), email_metrics as (\n    {% set email_metrics = adjust_email_metrics('hubspot__email_sends', 'email_metrics') %}\n    select \n        recipient_email_address,\n        {% for metric in email_metrics %}\n        sum({{ metric }}) as total_{{ metric }},\n        count(distinct case when {{ metric }} > 0 then email_send_id end) as total_unique_{{ metric }}\n        {% if not loop.last %},{% endif %}\n        {% endfor %}\n    from email_sends\n    group by 1\n\n), email_joined as (\n\n    select \n        contacts.*,\n        {% for metric in email_metrics %}\n        coalesce(email_metrics.total_{{ metric }}, 0) as total_{{ metric }},\n        coalesce(email_metrics.total_unique_{{ metric }}, 0) as total_unique_{{ metric }}\n        {% if not loop.last %},{% endif %}\n        {% endfor %}\n    from contacts\n    left join email_metrics\n        on contacts.email = email_metrics.recipient_email_address\n\n{% endif %}\n\n{% if engagements_enabled %}\n\n{% set cte_ref = 'email_joined' if emails_enabled else 'contacts' %}\n\n), engagements as (\n\n    select *\n    from {{ ref('int_hubspot__engagement_metrics__by_contact') }}\n\n), engagements_joined as (\n\n    select \n        {{ cte_ref }}.*,\n        {% for metric in engagement_metrics() %}\n        coalesce(engagements.{{ metric }},0) as {{ metric }} {% if not loop.last %},{% endif %}\n        {% endfor %}\n    from {{ cte_ref }}\n    left join engagements\n        using (contact_id)\n\n)\n\nselect *\nfrom engagements_joined\n\n{% elif emails_enabled %}\n\n)\n\nselect *\nfrom email_joined\n\n{% else %}\n\n)\n\nselect *\nfrom contacts\n\n{% endif %}", "language": "sql", "refs": [{"name": "int_hubspot__contact_merge_adjust", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["model.hubspot.int_hubspot__contact_merge_adjust"]}, "compiled_path": "target/compiled/hubspot/models/marketing/hubspot__contacts.sql", "compiled": true, "compiled_code": "\n\n\n\nwith contacts as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_hubspot`.`int_hubspot__contact_merge_adjust` \n\n\n\n\n)\n\nselect *\nfrom contacts\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot.hubspot__contact_history": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_hubspot", "name": "hubspot__contact_history", "resource_type": "model", "package_name": "hubspot", "path": "marketing/history/hubspot__contact_history.sql", "original_file_path": "models/marketing/history/hubspot__contact_history.sql", "unique_id": "model.hubspot.hubspot__contact_history", "fqn": ["hubspot", "marketing", "history", "hubspot__contact_history"], "alias": "hubspot__contact_history", "checksum": {"name": "sha256", "checksum": "a756ae88c28d03aec6cb6562fa0756eaaf46f52bede229a4488ab95e64f20267"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a change to contact record in Hubspot; the grain of this model is contact_id -> field_name -> valid_to.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_source": {"name": "change_source", "description": "The source (reason) of the change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_source_id": {"name": "change_source_id", "description": "The ID of the object that caused the change, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "valid_from": {"name": "valid_from", "description": "The timestamp the change was valid from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "valid_to": {"name": "valid_to", "description": "The timestamp the change was valid to. Null if still valid.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "field_name": {"name": "field_name", "description": "The name of the field being changed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "new_value": {"name": "new_value", "description": "The new value of the field.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot://models/marketing/history/history.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": true}, "created_at": 1696434198.42314, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_hubspot`.`hubspot__contact_history`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled', 'hubspot_contact_property_enabled'])) }}\n\nwith history as (\n\n    select *\n    from {{ var('contact_property_history') }}\n\n), windows as (\n\n    select\n        contact_id,\n        field_name,\n        change_source,\n        change_source_id,\n        change_timestamp as valid_from,\n        new_value,\n        lead(change_timestamp) over (partition by contact_id, field_name order by change_timestamp) as valid_to\n    from history\n\n), surrogate as (\n\n    select \n        windows.*,\n        {{ dbt_utils.generate_surrogate_key(['field_name','contact_id','valid_from']) }} as id\n    from windows\n\n)\n\nselect *\nfrom surrogate", "language": "sql", "refs": [{"name": "stg_hubspot__contact_property_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.hubspot_source.stg_hubspot__contact_property_history"]}, "compiled_path": "target/compiled/hubspot/models/marketing/history/hubspot__contact_history.sql", "compiled": true, "compiled_code": "\n\nwith history as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__contact_property_history`\n\n), windows as (\n\n    select\n        contact_id,\n        field_name,\n        change_source,\n        change_source_id,\n        change_timestamp as valid_from,\n        new_value,\n        lead(change_timestamp) over (partition by contact_id, field_name order by change_timestamp) as valid_to\n    from history\n\n), surrogate as (\n\n    select \n        windows.*,\n        to_hex(md5(cast(coalesce(cast(field_name as STRING), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(contact_id as STRING), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(valid_from as STRING), '_dbt_utils_surrogate_key_null_') as STRING))) as id\n    from windows\n\n)\n\nselect *\nfrom surrogate", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot.int_hubspot__contact_merge_adjust": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_hubspot", "name": "int_hubspot__contact_merge_adjust", "resource_type": "model", "package_name": "hubspot", "path": "marketing/intermediate/int_hubspot__contact_merge_adjust.sql", "original_file_path": "models/marketing/intermediate/int_hubspot__contact_merge_adjust.sql", "unique_id": "model.hubspot.int_hubspot__contact_merge_adjust", "fqn": ["hubspot", "marketing", "intermediate", "int_hubspot__contact_merge_adjust"], "alias": "int_hubspot__contact_merge_adjust", "checksum": {"name": "sha256", "checksum": "b2c2b4329f112687864243584b111d2a647da6a0ba5b63c3e8845bf292b4ca1e"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": true}, "created_at": 1696434197.471605, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_hubspot`.`int_hubspot__contact_merge_adjust`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled', 'hubspot_contact_enabled'])) }}\n\nwith contacts as (\n\n    select *\n    from {{ var('contact') }}\n), contact_merge_audit as (\n{% if var('hubspot_contact_merge_audit_enabled', false) %}\n    select *\n    from {{ var('contact_merge_audit') }}\n\n{% else %}\n    {{ merge_contacts() }}\n\n{% endif %}\n), contact_merge_removal as (\n    select \n        contacts.*\n    from contacts\n    \n    left join contact_merge_audit\n        on contacts.contact_id = cast(contact_merge_audit.vid_to_merge as {{ dbt.type_int() }})\n    \n    where contact_merge_audit.vid_to_merge is null\n)\n\nselect *\nfrom contact_merge_removal", "language": "sql", "refs": [{"name": "stg_hubspot__contact", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot.merge_contacts", "macro.dbt.type_int"], "nodes": ["model.hubspot_source.stg_hubspot__contact"]}, "compiled_path": "target/compiled/hubspot/models/marketing/intermediate/int_hubspot__contact_merge_adjust.sql", "compiled": true, "compiled_code": "\n\nwith contacts as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__contact`\n), contact_merge_audit as (\n\n    \n\n    select\n        contacts.contact_id,\n        split(merges, ':')[offset(0)] as vid_to_merge\n\n    from contacts\n    cross join \n        unnest(cast(split(calculated_merged_vids, \";\") as array<string>)) as merges\n\n\n\n\n\n\n), contact_merge_removal as (\n    select \n        contacts.*\n    from contacts\n    \n    left join contact_merge_audit\n        on contacts.contact_id = cast(contact_merge_audit.vid_to_merge as INT64)\n    \n    where contact_merge_audit.vid_to_merge is null\n)\n\nselect *\nfrom contact_merge_removal", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "test.hubspot_source.unique_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id.ba90fa6113": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "deal_pipeline_stage_id", "model": "{{ get_where_subquery(ref('stg_hubspot__deal_pipeline_stage')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "unique_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id.sql", "original_file_path": "models/stg_hubspot__deal.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id.ba90fa6113", "fqn": ["hubspot_source", "unique_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id"], "alias": "unique_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.721128, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__deal_pipeline_stage", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__deal_pipeline_stage"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__deal.yml/unique_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select deal_pipeline_stage_id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal_pipeline_stage`\n  where deal_pipeline_stage_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "deal_pipeline_stage_id", "file_key_name": "models.stg_hubspot__deal_pipeline_stage", "attached_node": "model.hubspot_source.stg_hubspot__deal_pipeline_stage"}, "test.hubspot_source.not_null_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id.d53656553e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "deal_pipeline_stage_id", "model": "{{ get_where_subquery(ref('stg_hubspot__deal_pipeline_stage')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__deal_pip_5a707b4fbec8bec07f54d0383d90ea2b.sql", "original_file_path": "models/stg_hubspot__deal.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id.d53656553e", "fqn": ["hubspot_source", "not_null_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id"], "alias": "not_null_stg_hubspot__deal_pip_5a707b4fbec8bec07f54d0383d90ea2b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_hubspot__deal_pip_5a707b4fbec8bec07f54d0383d90ea2b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_hubspot__deal_pip_5a707b4fbec8bec07f54d0383d90ea2b"}, "created_at": 1696434197.724257, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_hubspot__deal_pip_5a707b4fbec8bec07f54d0383d90ea2b\") }}", "language": "sql", "refs": [{"name": "stg_hubspot__deal_pipeline_stage", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__deal_pipeline_stage"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__deal.yml/not_null_stg_hubspot__deal_pip_5a707b4fbec8bec07f54d0383d90ea2b.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect deal_pipeline_stage_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal_pipeline_stage`\nwhere deal_pipeline_stage_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "deal_pipeline_stage_id", "file_key_name": "models.stg_hubspot__deal_pipeline_stage", "attached_node": "model.hubspot_source.stg_hubspot__deal_pipeline_stage"}, "test.hubspot_source.unique_stg_hubspot__deal_pipeline_deal_pipeline_id.dff6c45403": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "deal_pipeline_id", "model": "{{ get_where_subquery(ref('stg_hubspot__deal_pipeline')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "unique_stg_hubspot__deal_pipeline_deal_pipeline_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__deal_pipeline_deal_pipeline_id.sql", "original_file_path": "models/stg_hubspot__deal.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__deal_pipeline_deal_pipeline_id.dff6c45403", "fqn": ["hubspot_source", "unique_stg_hubspot__deal_pipeline_deal_pipeline_id"], "alias": "unique_stg_hubspot__deal_pipeline_deal_pipeline_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.7270029, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__deal_pipeline", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__deal_pipeline"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__deal.yml/unique_stg_hubspot__deal_pipeline_deal_pipeline_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select deal_pipeline_id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal_pipeline`\n  where deal_pipeline_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "deal_pipeline_id", "file_key_name": "models.stg_hubspot__deal_pipeline", "attached_node": "model.hubspot_source.stg_hubspot__deal_pipeline"}, "test.hubspot_source.not_null_stg_hubspot__deal_pipeline_deal_pipeline_id.8a0e3cd7a3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "deal_pipeline_id", "model": "{{ get_where_subquery(ref('stg_hubspot__deal_pipeline')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_hubspot__deal_pipeline_deal_pipeline_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__deal_pipeline_deal_pipeline_id.sql", "original_file_path": "models/stg_hubspot__deal.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__deal_pipeline_deal_pipeline_id.8a0e3cd7a3", "fqn": ["hubspot_source", "not_null_stg_hubspot__deal_pipeline_deal_pipeline_id"], "alias": "not_null_stg_hubspot__deal_pipeline_deal_pipeline_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.729624, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__deal_pipeline", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__deal_pipeline"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__deal.yml/not_null_stg_hubspot__deal_pipeline_deal_pipeline_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect deal_pipeline_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal_pipeline`\nwhere deal_pipeline_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "deal_pipeline_id", "file_key_name": "models.stg_hubspot__deal_pipeline", "attached_node": "model.hubspot_source.stg_hubspot__deal_pipeline"}, "test.hubspot_source.not_null_stg_hubspot__deal_deal_id.ff48693e20": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "deal_id", "model": "{{ get_where_subquery(ref('stg_hubspot__deal')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_hubspot__deal_deal_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__deal_deal_id.sql", "original_file_path": "models/stg_hubspot__deal.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__deal_deal_id.ff48693e20", "fqn": ["hubspot_source", "not_null_stg_hubspot__deal_deal_id"], "alias": "not_null_stg_hubspot__deal_deal_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.733991, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__deal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__deal"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__deal.yml/not_null_stg_hubspot__deal_deal_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect deal_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal`\nwhere deal_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "deal_id", "file_key_name": "models.stg_hubspot__deal", "attached_node": "model.hubspot_source.stg_hubspot__deal"}, "test.hubspot_source.unique_stg_hubspot__deal_deal_id.ac1628ac69": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "deal_id", "model": "{{ get_where_subquery(ref('stg_hubspot__deal')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "unique_stg_hubspot__deal_deal_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__deal_deal_id.sql", "original_file_path": "models/stg_hubspot__deal.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__deal_deal_id.ac1628ac69", "fqn": ["hubspot_source", "unique_stg_hubspot__deal_deal_id"], "alias": "unique_stg_hubspot__deal_deal_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.7364469, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__deal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__deal"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__deal.yml/unique_stg_hubspot__deal_deal_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select deal_id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal`\n  where deal_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "deal_id", "file_key_name": "models.stg_hubspot__deal", "attached_node": "model.hubspot_source.stg_hubspot__deal"}, "test.hubspot_source.dbt_utils_unique_combination_of_columns_stg_hubspot__deal_company_company_id__deal_id__type_id.59d48f3923": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["company_id", "deal_id", "type_id"], "model": "{{ get_where_subquery(ref('stg_hubspot__deal_company')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_hubspot__deal_company_company_id__deal_id__type_id", "resource_type": "test", "package_name": "hubspot_source", "path": "dbt_utils_unique_combination_o_74077ae84d669f55130c2609a5e4c4aa.sql", "original_file_path": "models/stg_hubspot__deal.yml", "unique_id": "test.hubspot_source.dbt_utils_unique_combination_of_columns_stg_hubspot__deal_company_company_id__deal_id__type_id.59d48f3923", "fqn": ["hubspot_source", "dbt_utils_unique_combination_of_columns_stg_hubspot__deal_company_company_id__deal_id__type_id"], "alias": "dbt_utils_unique_combination_o_74077ae84d669f55130c2609a5e4c4aa", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_74077ae84d669f55130c2609a5e4c4aa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_74077ae84d669f55130c2609a5e4c4aa"}, "created_at": 1696434197.7389069, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_74077ae84d669f55130c2609a5e4c4aa\") }}", "language": "sql", "refs": [{"name": "stg_hubspot__deal_company", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__deal_company"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__deal.yml/dbt_utils_unique_combination_o_74077ae84d669f55130c2609a5e4c4aa.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        company_id, deal_id, type_id\n    from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal_company`\n    group by company_id, deal_id, type_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_hubspot__deal_company", "attached_node": "model.hubspot_source.stg_hubspot__deal_company"}, "test.hubspot_source.dbt_utils_unique_combination_of_columns_stg_hubspot__deal_contact_contact_id__deal_id__type_id.37de71798b": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["contact_id", "deal_id", "type_id"], "model": "{{ get_where_subquery(ref('stg_hubspot__deal_contact')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_hubspot__deal_contact_contact_id__deal_id__type_id", "resource_type": "test", "package_name": "hubspot_source", "path": "dbt_utils_unique_combination_o_3e825e23a917e54cdbdc5f8843e1e54b.sql", "original_file_path": "models/stg_hubspot__deal.yml", "unique_id": "test.hubspot_source.dbt_utils_unique_combination_of_columns_stg_hubspot__deal_contact_contact_id__deal_id__type_id.37de71798b", "fqn": ["hubspot_source", "dbt_utils_unique_combination_of_columns_stg_hubspot__deal_contact_contact_id__deal_id__type_id"], "alias": "dbt_utils_unique_combination_o_3e825e23a917e54cdbdc5f8843e1e54b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_3e825e23a917e54cdbdc5f8843e1e54b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_3e825e23a917e54cdbdc5f8843e1e54b"}, "created_at": 1696434197.755289, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_3e825e23a917e54cdbdc5f8843e1e54b\") }}", "language": "sql", "refs": [{"name": "stg_hubspot__deal_contact", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__deal_contact"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__deal.yml/dbt_utils_unique_combination_o_3e825e23a917e54cdbdc5f8843e1e54b.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        contact_id, deal_id, type_id\n    from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__deal_contact`\n    group by contact_id, deal_id, type_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_hubspot__deal_contact", "attached_node": "model.hubspot_source.stg_hubspot__deal_contact"}, "test.hubspot_source.unique_stg_hubspot__contact_list_contact_list_id.036739c1b0": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "contact_list_id", "model": "{{ get_where_subquery(ref('stg_hubspot__contact_list')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "unique_stg_hubspot__contact_list_contact_list_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__contact_list_contact_list_id.sql", "original_file_path": "models/stg_hubspot__contact.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__contact_list_contact_list_id.036739c1b0", "fqn": ["hubspot_source", "unique_stg_hubspot__contact_list_contact_list_id"], "alias": "unique_stg_hubspot__contact_list_contact_list_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.779215, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__contact_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__contact_list"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__contact.yml/unique_stg_hubspot__contact_list_contact_list_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select contact_list_id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__contact_list`\n  where contact_list_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "contact_list_id", "file_key_name": "models.stg_hubspot__contact_list", "attached_node": "model.hubspot_source.stg_hubspot__contact_list"}, "test.hubspot_source.not_null_stg_hubspot__contact_list_contact_list_id.ff8e4cc29a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "contact_list_id", "model": "{{ get_where_subquery(ref('stg_hubspot__contact_list')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_hubspot__contact_list_contact_list_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__contact_list_contact_list_id.sql", "original_file_path": "models/stg_hubspot__contact.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__contact_list_contact_list_id.ff8e4cc29a", "fqn": ["hubspot_source", "not_null_stg_hubspot__contact_list_contact_list_id"], "alias": "not_null_stg_hubspot__contact_list_contact_list_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.7817678, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__contact_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__contact_list"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__contact.yml/not_null_stg_hubspot__contact_list_contact_list_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contact_list_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__contact_list`\nwhere contact_list_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "contact_list_id", "file_key_name": "models.stg_hubspot__contact_list", "attached_node": "model.hubspot_source.stg_hubspot__contact_list"}, "test.hubspot_source.unique_stg_hubspot__contact_contact_id.b9135eb03a": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "contact_id", "model": "{{ get_where_subquery(ref('stg_hubspot__contact')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "unique_stg_hubspot__contact_contact_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__contact_contact_id.sql", "original_file_path": "models/stg_hubspot__contact.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__contact_contact_id.b9135eb03a", "fqn": ["hubspot_source", "unique_stg_hubspot__contact_contact_id"], "alias": "unique_stg_hubspot__contact_contact_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.784469, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__contact", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__contact"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__contact.yml/unique_stg_hubspot__contact_contact_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select contact_id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__contact`\n  where contact_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "contact_id", "file_key_name": "models.stg_hubspot__contact", "attached_node": "model.hubspot_source.stg_hubspot__contact"}, "test.hubspot_source.not_null_stg_hubspot__contact_contact_id.9f112f8944": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "contact_id", "model": "{{ get_where_subquery(ref('stg_hubspot__contact')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_hubspot__contact_contact_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__contact_contact_id.sql", "original_file_path": "models/stg_hubspot__contact.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__contact_contact_id.9f112f8944", "fqn": ["hubspot_source", "not_null_stg_hubspot__contact_contact_id"], "alias": "not_null_stg_hubspot__contact_contact_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.78712, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__contact", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__contact"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__contact.yml/not_null_stg_hubspot__contact_contact_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contact_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__contact`\nwhere contact_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "contact_id", "file_key_name": "models.stg_hubspot__contact", "attached_node": "model.hubspot_source.stg_hubspot__contact"}, "test.hubspot_source.unique_stg_hubspot__email_event_bounce_event_id.0341ffa8e9": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_bounce')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "unique_stg_hubspot__email_event_bounce_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__email_event_bounce_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__email_event_bounce_event_id.0341ffa8e9", "fqn": ["hubspot_source", "unique_stg_hubspot__email_event_bounce_event_id"], "alias": "unique_stg_hubspot__email_event_bounce_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.825682, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_bounce", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_bounce", "attached_node": "model.hubspot_source.stg_hubspot__email_event_bounce"}, "test.hubspot_source.not_null_stg_hubspot__email_event_bounce_event_id.71b13d26d3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_bounce')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_hubspot__email_event_bounce_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__email_event_bounce_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__email_event_bounce_event_id.71b13d26d3", "fqn": ["hubspot_source", "not_null_stg_hubspot__email_event_bounce_event_id"], "alias": "not_null_stg_hubspot__email_event_bounce_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.828706, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_bounce", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_bounce", "attached_node": "model.hubspot_source.stg_hubspot__email_event_bounce"}, "test.hubspot_source.unique_stg_hubspot__email_event_click_event_id.da8d8487a1": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_click')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "unique_stg_hubspot__email_event_click_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__email_event_click_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__email_event_click_event_id.da8d8487a1", "fqn": ["hubspot_source", "unique_stg_hubspot__email_event_click_event_id"], "alias": "unique_stg_hubspot__email_event_click_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.831983, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_click", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_click", "attached_node": "model.hubspot_source.stg_hubspot__email_event_click"}, "test.hubspot_source.not_null_stg_hubspot__email_event_click_event_id.8a1be931c5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_click')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_hubspot__email_event_click_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__email_event_click_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__email_event_click_event_id.8a1be931c5", "fqn": ["hubspot_source", "not_null_stg_hubspot__email_event_click_event_id"], "alias": "not_null_stg_hubspot__email_event_click_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.834597, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_click", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_click", "attached_node": "model.hubspot_source.stg_hubspot__email_event_click"}, "test.hubspot_source.unique_stg_hubspot__email_event_deferred_event_id.2f779e2912": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_deferred')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "unique_stg_hubspot__email_event_deferred_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__email_event_deferred_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__email_event_deferred_event_id.2f779e2912", "fqn": ["hubspot_source", "unique_stg_hubspot__email_event_deferred_event_id"], "alias": "unique_stg_hubspot__email_event_deferred_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.837209, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_deferred", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_deferred", "attached_node": "model.hubspot_source.stg_hubspot__email_event_deferred"}, "test.hubspot_source.not_null_stg_hubspot__email_event_deferred_event_id.80293078e0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_deferred')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_hubspot__email_event_deferred_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__email_event_deferred_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__email_event_deferred_event_id.80293078e0", "fqn": ["hubspot_source", "not_null_stg_hubspot__email_event_deferred_event_id"], "alias": "not_null_stg_hubspot__email_event_deferred_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.83973, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_deferred", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_deferred", "attached_node": "model.hubspot_source.stg_hubspot__email_event_deferred"}, "test.hubspot_source.unique_stg_hubspot__email_event_delivered_event_id.f818bf03fc": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_delivered')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "unique_stg_hubspot__email_event_delivered_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__email_event_delivered_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__email_event_delivered_event_id.f818bf03fc", "fqn": ["hubspot_source", "unique_stg_hubspot__email_event_delivered_event_id"], "alias": "unique_stg_hubspot__email_event_delivered_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.842544, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_delivered", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_delivered", "attached_node": "model.hubspot_source.stg_hubspot__email_event_delivered"}, "test.hubspot_source.not_null_stg_hubspot__email_event_delivered_event_id.87c8eb3f20": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_delivered')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_hubspot__email_event_delivered_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__email_event_delivered_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__email_event_delivered_event_id.87c8eb3f20", "fqn": ["hubspot_source", "not_null_stg_hubspot__email_event_delivered_event_id"], "alias": "not_null_stg_hubspot__email_event_delivered_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.845247, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_delivered", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_delivered", "attached_node": "model.hubspot_source.stg_hubspot__email_event_delivered"}, "test.hubspot_source.unique_stg_hubspot__email_event_dropped_event_id.40706bbf71": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_dropped')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "unique_stg_hubspot__email_event_dropped_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__email_event_dropped_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__email_event_dropped_event_id.40706bbf71", "fqn": ["hubspot_source", "unique_stg_hubspot__email_event_dropped_event_id"], "alias": "unique_stg_hubspot__email_event_dropped_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.8481972, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_dropped", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_dropped", "attached_node": "model.hubspot_source.stg_hubspot__email_event_dropped"}, "test.hubspot_source.not_null_stg_hubspot__email_event_dropped_event_id.c92d449f52": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_dropped')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_hubspot__email_event_dropped_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__email_event_dropped_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__email_event_dropped_event_id.c92d449f52", "fqn": ["hubspot_source", "not_null_stg_hubspot__email_event_dropped_event_id"], "alias": "not_null_stg_hubspot__email_event_dropped_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.850844, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_dropped", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_dropped", "attached_node": "model.hubspot_source.stg_hubspot__email_event_dropped"}, "test.hubspot_source.unique_stg_hubspot__email_event_forward_event_id.7f133d2dd1": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_forward')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "unique_stg_hubspot__email_event_forward_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__email_event_forward_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__email_event_forward_event_id.7f133d2dd1", "fqn": ["hubspot_source", "unique_stg_hubspot__email_event_forward_event_id"], "alias": "unique_stg_hubspot__email_event_forward_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.8538508, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_forward", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_forward", "attached_node": "model.hubspot_source.stg_hubspot__email_event_forward"}, "test.hubspot_source.not_null_stg_hubspot__email_event_forward_event_id.b9a8bf63b3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_forward')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_hubspot__email_event_forward_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__email_event_forward_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__email_event_forward_event_id.b9a8bf63b3", "fqn": ["hubspot_source", "not_null_stg_hubspot__email_event_forward_event_id"], "alias": "not_null_stg_hubspot__email_event_forward_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.856409, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_forward", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_forward", "attached_node": "model.hubspot_source.stg_hubspot__email_event_forward"}, "test.hubspot_source.unique_stg_hubspot__email_event_open_event_id.3a369549b1": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_open')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "unique_stg_hubspot__email_event_open_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__email_event_open_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__email_event_open_event_id.3a369549b1", "fqn": ["hubspot_source", "unique_stg_hubspot__email_event_open_event_id"], "alias": "unique_stg_hubspot__email_event_open_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.8588889, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_open", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_open", "attached_node": "model.hubspot_source.stg_hubspot__email_event_open"}, "test.hubspot_source.not_null_stg_hubspot__email_event_open_event_id.a2e658fe16": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_open')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_hubspot__email_event_open_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__email_event_open_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__email_event_open_event_id.a2e658fe16", "fqn": ["hubspot_source", "not_null_stg_hubspot__email_event_open_event_id"], "alias": "not_null_stg_hubspot__email_event_open_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.861578, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_open", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_open", "attached_node": "model.hubspot_source.stg_hubspot__email_event_open"}, "test.hubspot_source.unique_stg_hubspot__email_event_print_event_id.40a8ccd3f3": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_print')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "unique_stg_hubspot__email_event_print_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__email_event_print_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__email_event_print_event_id.40a8ccd3f3", "fqn": ["hubspot_source", "unique_stg_hubspot__email_event_print_event_id"], "alias": "unique_stg_hubspot__email_event_print_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.865123, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_print", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_print", "attached_node": "model.hubspot_source.stg_hubspot__email_event_print"}, "test.hubspot_source.not_null_stg_hubspot__email_event_print_event_id.94d4e09b3b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_print')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_hubspot__email_event_print_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__email_event_print_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__email_event_print_event_id.94d4e09b3b", "fqn": ["hubspot_source", "not_null_stg_hubspot__email_event_print_event_id"], "alias": "not_null_stg_hubspot__email_event_print_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.867827, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_print", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_print", "attached_node": "model.hubspot_source.stg_hubspot__email_event_print"}, "test.hubspot_source.unique_stg_hubspot__email_event_sent_event_id.122cb22272": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_sent')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "unique_stg_hubspot__email_event_sent_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__email_event_sent_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__email_event_sent_event_id.122cb22272", "fqn": ["hubspot_source", "unique_stg_hubspot__email_event_sent_event_id"], "alias": "unique_stg_hubspot__email_event_sent_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.870361, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_sent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_sent", "attached_node": "model.hubspot_source.stg_hubspot__email_event_sent"}, "test.hubspot_source.not_null_stg_hubspot__email_event_sent_event_id.cf77d9f15d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_sent')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_hubspot__email_event_sent_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__email_event_sent_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__email_event_sent_event_id.cf77d9f15d", "fqn": ["hubspot_source", "not_null_stg_hubspot__email_event_sent_event_id"], "alias": "not_null_stg_hubspot__email_event_sent_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.8728619, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_sent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_sent", "attached_node": "model.hubspot_source.stg_hubspot__email_event_sent"}, "test.hubspot_source.unique_stg_hubspot__email_event_spam_report_event_id.448320447a": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_spam_report')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "unique_stg_hubspot__email_event_spam_report_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__email_event_spam_report_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__email_event_spam_report_event_id.448320447a", "fqn": ["hubspot_source", "unique_stg_hubspot__email_event_spam_report_event_id"], "alias": "unique_stg_hubspot__email_event_spam_report_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.875618, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_spam_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_spam_report", "attached_node": "model.hubspot_source.stg_hubspot__email_event_spam_report"}, "test.hubspot_source.not_null_stg_hubspot__email_event_spam_report_event_id.2a56aced8f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_spam_report')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_hubspot__email_event_spam_report_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__email_event_spam_report_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__email_event_spam_report_event_id.2a56aced8f", "fqn": ["hubspot_source", "not_null_stg_hubspot__email_event_spam_report_event_id"], "alias": "not_null_stg_hubspot__email_event_spam_report_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.878012, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_spam_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_spam_report", "attached_node": "model.hubspot_source.stg_hubspot__email_event_spam_report"}, "test.hubspot_source.unique_stg_hubspot__email_event_status_change_event_id.13105203e0": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_status_change')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "unique_stg_hubspot__email_event_status_change_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__email_event_status_change_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__email_event_status_change_event_id.13105203e0", "fqn": ["hubspot_source", "unique_stg_hubspot__email_event_status_change_event_id"], "alias": "unique_stg_hubspot__email_event_status_change_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.8805408, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_status_change", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_status_change", "attached_node": "model.hubspot_source.stg_hubspot__email_event_status_change"}, "test.hubspot_source.not_null_stg_hubspot__email_event_status_change_event_id.c5e80297b1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_status_change')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_hubspot__email_event_status_change_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__email_event_status_change_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__email_event_status_change_event_id.c5e80297b1", "fqn": ["hubspot_source", "not_null_stg_hubspot__email_event_status_change_event_id"], "alias": "not_null_stg_hubspot__email_event_status_change_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.883113, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_status_change", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_status_change", "attached_node": "model.hubspot_source.stg_hubspot__email_event_status_change"}, "test.hubspot_source.unique_stg_hubspot__email_event_event_id.734683460d": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "unique_stg_hubspot__email_event_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__email_event_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__email_event_event_id.734683460d", "fqn": ["hubspot_source", "unique_stg_hubspot__email_event_event_id"], "alias": "unique_stg_hubspot__email_event_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.886026, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event", "attached_node": "model.hubspot_source.stg_hubspot__email_event"}, "test.hubspot_source.not_null_stg_hubspot__email_event_event_id.4f287f3531": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_hubspot__email_event_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__email_event_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__email_event_event_id.4f287f3531", "fqn": ["hubspot_source", "not_null_stg_hubspot__email_event_event_id"], "alias": "not_null_stg_hubspot__email_event_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.8886359, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event", "attached_node": "model.hubspot_source.stg_hubspot__email_event"}, "test.hubspot_source.unique_stg_hubspot__email_campaign_email_campaign_id.9820d33f2e": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "email_campaign_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_campaign')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "unique_stg_hubspot__email_campaign_email_campaign_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__email_campaign_email_campaign_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__email_campaign_email_campaign_id.9820d33f2e", "fqn": ["hubspot_source", "unique_stg_hubspot__email_campaign_email_campaign_id"], "alias": "unique_stg_hubspot__email_campaign_email_campaign_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.891217, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_campaign", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "email_campaign_id", "file_key_name": "models.stg_hubspot__email_campaign", "attached_node": "model.hubspot_source.stg_hubspot__email_campaign"}, "test.hubspot_source.not_null_stg_hubspot__email_campaign_email_campaign_id.79921899a6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "email_campaign_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_campaign')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_hubspot__email_campaign_email_campaign_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__email_campaign_email_campaign_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__email_campaign_email_campaign_id.79921899a6", "fqn": ["hubspot_source", "not_null_stg_hubspot__email_campaign_email_campaign_id"], "alias": "not_null_stg_hubspot__email_campaign_email_campaign_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.893875, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_campaign", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "email_campaign_id", "file_key_name": "models.stg_hubspot__email_campaign", "attached_node": "model.hubspot_source.stg_hubspot__email_campaign"}, "test.hubspot_source.not_null_stg_hubspot__engagement_call_engagement_id.5ceb3917bf": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('stg_hubspot__engagement_call')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_hubspot__engagement_call_engagement_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__engagement_call_engagement_id.sql", "original_file_path": "models/stg_hubspot__engagement.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__engagement_call_engagement_id.5ceb3917bf", "fqn": ["hubspot_source", "not_null_stg_hubspot__engagement_call_engagement_id"], "alias": "not_null_stg_hubspot__engagement_call_engagement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.908976, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__engagement_call", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "engagement_id", "file_key_name": "models.stg_hubspot__engagement_call", "attached_node": "model.hubspot_source.stg_hubspot__engagement_call"}, "test.hubspot_source.unique_stg_hubspot__engagement_call_engagement_id.43b4413603": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('stg_hubspot__engagement_call')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "unique_stg_hubspot__engagement_call_engagement_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__engagement_call_engagement_id.sql", "original_file_path": "models/stg_hubspot__engagement.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__engagement_call_engagement_id.43b4413603", "fqn": ["hubspot_source", "unique_stg_hubspot__engagement_call_engagement_id"], "alias": "unique_stg_hubspot__engagement_call_engagement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.9118578, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__engagement_call", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "engagement_id", "file_key_name": "models.stg_hubspot__engagement_call", "attached_node": "model.hubspot_source.stg_hubspot__engagement_call"}, "test.hubspot_source.not_null_stg_hubspot__engagement_email_engagement_id.175561ecca": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('stg_hubspot__engagement_email')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_hubspot__engagement_email_engagement_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__engagement_email_engagement_id.sql", "original_file_path": "models/stg_hubspot__engagement.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__engagement_email_engagement_id.175561ecca", "fqn": ["hubspot_source", "not_null_stg_hubspot__engagement_email_engagement_id"], "alias": "not_null_stg_hubspot__engagement_email_engagement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.914339, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__engagement_email", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "engagement_id", "file_key_name": "models.stg_hubspot__engagement_email", "attached_node": "model.hubspot_source.stg_hubspot__engagement_email"}, "test.hubspot_source.unique_stg_hubspot__engagement_email_engagement_id.5eeb06dcfc": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('stg_hubspot__engagement_email')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "unique_stg_hubspot__engagement_email_engagement_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__engagement_email_engagement_id.sql", "original_file_path": "models/stg_hubspot__engagement.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__engagement_email_engagement_id.5eeb06dcfc", "fqn": ["hubspot_source", "unique_stg_hubspot__engagement_email_engagement_id"], "alias": "unique_stg_hubspot__engagement_email_engagement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.9170449, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__engagement_email", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "engagement_id", "file_key_name": "models.stg_hubspot__engagement_email", "attached_node": "model.hubspot_source.stg_hubspot__engagement_email"}, "test.hubspot_source.not_null_stg_hubspot__engagement_meeting_engagement_id.18dd11dc28": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('stg_hubspot__engagement_meeting')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_hubspot__engagement_meeting_engagement_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__engagement_meeting_engagement_id.sql", "original_file_path": "models/stg_hubspot__engagement.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__engagement_meeting_engagement_id.18dd11dc28", "fqn": ["hubspot_source", "not_null_stg_hubspot__engagement_meeting_engagement_id"], "alias": "not_null_stg_hubspot__engagement_meeting_engagement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.91958, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__engagement_meeting", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "engagement_id", "file_key_name": "models.stg_hubspot__engagement_meeting", "attached_node": "model.hubspot_source.stg_hubspot__engagement_meeting"}, "test.hubspot_source.unique_stg_hubspot__engagement_meeting_engagement_id.70721fb830": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('stg_hubspot__engagement_meeting')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "unique_stg_hubspot__engagement_meeting_engagement_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__engagement_meeting_engagement_id.sql", "original_file_path": "models/stg_hubspot__engagement.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__engagement_meeting_engagement_id.70721fb830", "fqn": ["hubspot_source", "unique_stg_hubspot__engagement_meeting_engagement_id"], "alias": "unique_stg_hubspot__engagement_meeting_engagement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.922527, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__engagement_meeting", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "engagement_id", "file_key_name": "models.stg_hubspot__engagement_meeting", "attached_node": "model.hubspot_source.stg_hubspot__engagement_meeting"}, "test.hubspot_source.not_null_stg_hubspot__engagement_note_engagement_id.244059891e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('stg_hubspot__engagement_note')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_hubspot__engagement_note_engagement_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__engagement_note_engagement_id.sql", "original_file_path": "models/stg_hubspot__engagement.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__engagement_note_engagement_id.244059891e", "fqn": ["hubspot_source", "not_null_stg_hubspot__engagement_note_engagement_id"], "alias": "not_null_stg_hubspot__engagement_note_engagement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.924993, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__engagement_note", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "engagement_id", "file_key_name": "models.stg_hubspot__engagement_note", "attached_node": "model.hubspot_source.stg_hubspot__engagement_note"}, "test.hubspot_source.unique_stg_hubspot__engagement_note_engagement_id.e2eaf5256e": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('stg_hubspot__engagement_note')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "unique_stg_hubspot__engagement_note_engagement_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__engagement_note_engagement_id.sql", "original_file_path": "models/stg_hubspot__engagement.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__engagement_note_engagement_id.e2eaf5256e", "fqn": ["hubspot_source", "unique_stg_hubspot__engagement_note_engagement_id"], "alias": "unique_stg_hubspot__engagement_note_engagement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.927579, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__engagement_note", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "engagement_id", "file_key_name": "models.stg_hubspot__engagement_note", "attached_node": "model.hubspot_source.stg_hubspot__engagement_note"}, "test.hubspot_source.not_null_stg_hubspot__engagement_task_engagement_id.0bbd752d82": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('stg_hubspot__engagement_task')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_hubspot__engagement_task_engagement_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__engagement_task_engagement_id.sql", "original_file_path": "models/stg_hubspot__engagement.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__engagement_task_engagement_id.0bbd752d82", "fqn": ["hubspot_source", "not_null_stg_hubspot__engagement_task_engagement_id"], "alias": "not_null_stg_hubspot__engagement_task_engagement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.9306722, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__engagement_task", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "engagement_id", "file_key_name": "models.stg_hubspot__engagement_task", "attached_node": "model.hubspot_source.stg_hubspot__engagement_task"}, "test.hubspot_source.unique_stg_hubspot__engagement_task_engagement_id.0f578bc80c": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('stg_hubspot__engagement_task')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "unique_stg_hubspot__engagement_task_engagement_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__engagement_task_engagement_id.sql", "original_file_path": "models/stg_hubspot__engagement.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__engagement_task_engagement_id.0f578bc80c", "fqn": ["hubspot_source", "unique_stg_hubspot__engagement_task_engagement_id"], "alias": "unique_stg_hubspot__engagement_task_engagement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.9336581, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__engagement_task", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "engagement_id", "file_key_name": "models.stg_hubspot__engagement_task", "attached_node": "model.hubspot_source.stg_hubspot__engagement_task"}, "test.hubspot_source.not_null_stg_hubspot__engagement_engagement_id.b26f4d328f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('stg_hubspot__engagement')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_hubspot__engagement_engagement_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__engagement_engagement_id.sql", "original_file_path": "models/stg_hubspot__engagement.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__engagement_engagement_id.b26f4d328f", "fqn": ["hubspot_source", "not_null_stg_hubspot__engagement_engagement_id"], "alias": "not_null_stg_hubspot__engagement_engagement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.936108, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__engagement", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "engagement_id", "file_key_name": "models.stg_hubspot__engagement", "attached_node": "model.hubspot_source.stg_hubspot__engagement"}, "test.hubspot_source.unique_stg_hubspot__engagement_engagement_id.4f054187b0": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('stg_hubspot__engagement')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "unique_stg_hubspot__engagement_engagement_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__engagement_engagement_id.sql", "original_file_path": "models/stg_hubspot__engagement.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__engagement_engagement_id.4f054187b0", "fqn": ["hubspot_source", "unique_stg_hubspot__engagement_engagement_id"], "alias": "unique_stg_hubspot__engagement_engagement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.938525, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__engagement", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "engagement_id", "file_key_name": "models.stg_hubspot__engagement", "attached_node": "model.hubspot_source.stg_hubspot__engagement"}, "test.hubspot_source.unique_stg_hubspot__ticket_ticket_id.78c6fbfcaf": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "ticket_id", "model": "{{ get_where_subquery(ref('stg_hubspot__ticket')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "unique_stg_hubspot__ticket_ticket_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__ticket_ticket_id.sql", "original_file_path": "models/stg_hubspot__ticket.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__ticket_ticket_id.78c6fbfcaf", "fqn": ["hubspot_source", "unique_stg_hubspot__ticket_ticket_id"], "alias": "unique_stg_hubspot__ticket_ticket_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.956717, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__ticket", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "ticket_id", "file_key_name": "models.stg_hubspot__ticket", "attached_node": "model.hubspot_source.stg_hubspot__ticket"}, "test.hubspot_source.not_null_stg_hubspot__ticket_ticket_id.299e7c4c53": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ticket_id", "model": "{{ get_where_subquery(ref('stg_hubspot__ticket')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_hubspot__ticket_ticket_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__ticket_ticket_id.sql", "original_file_path": "models/stg_hubspot__ticket.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__ticket_ticket_id.299e7c4c53", "fqn": ["hubspot_source", "not_null_stg_hubspot__ticket_ticket_id"], "alias": "not_null_stg_hubspot__ticket_ticket_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434197.959264, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__ticket", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "ticket_id", "file_key_name": "models.stg_hubspot__ticket", "attached_node": "model.hubspot_source.stg_hubspot__ticket"}, "test.hubspot_source.unique_stg_hubspot__company_company_id.394a2a4ba0": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "company_id", "model": "{{ get_where_subquery(ref('stg_hubspot__company')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "unique_stg_hubspot__company_company_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__company_company_id.sql", "original_file_path": "models/stg_hubspot__company.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__company_company_id.394a2a4ba0", "fqn": ["hubspot_source", "unique_stg_hubspot__company_company_id"], "alias": "unique_stg_hubspot__company_company_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434198.190727, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__company", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__company"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__company.yml/unique_stg_hubspot__company_company_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select company_id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__company`\n  where company_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "company_id", "file_key_name": "models.stg_hubspot__company", "attached_node": "model.hubspot_source.stg_hubspot__company"}, "test.hubspot_source.not_null_stg_hubspot__company_company_id.0d0a080d43": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "company_id", "model": "{{ get_where_subquery(ref('stg_hubspot__company')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_hubspot__company_company_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__company_company_id.sql", "original_file_path": "models/stg_hubspot__company.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__company_company_id.0d0a080d43", "fqn": ["hubspot_source", "not_null_stg_hubspot__company_company_id"], "alias": "not_null_stg_hubspot__company_company_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434198.2008698, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__company", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__company"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__company.yml/not_null_stg_hubspot__company_company_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect company_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__company`\nwhere company_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "company_id", "file_key_name": "models.stg_hubspot__company", "attached_node": "model.hubspot_source.stg_hubspot__company"}, "test.hubspot.unique_hubspot__deals_deal_id.d728fe5f71": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "deal_id", "model": "{{ get_where_subquery(ref('hubspot__deals')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "unique_hubspot__deals_deal_id", "resource_type": "test", "package_name": "hubspot", "path": "unique_hubspot__deals_deal_id.sql", "original_file_path": "models/sales/sales.yml", "unique_id": "test.hubspot.unique_hubspot__deals_deal_id.d728fe5f71", "fqn": ["hubspot", "sales", "unique_hubspot__deals_deal_id"], "alias": "unique_hubspot__deals_deal_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434198.2523048, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "hubspot__deals", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__deals"]}, "compiled_path": "target/compiled/hubspot/models/sales/sales.yml/unique_hubspot__deals_deal_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select deal_id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_hubspot`.`hubspot__deals`\n  where deal_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "deal_id", "file_key_name": "models.hubspot__deals", "attached_node": "model.hubspot.hubspot__deals"}, "test.hubspot.unique_hubspot__deal_stages_deal_stage_id.7fd3732373": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "deal_stage_id", "model": "{{ get_where_subquery(ref('hubspot__deal_stages')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "unique_hubspot__deal_stages_deal_stage_id", "resource_type": "test", "package_name": "hubspot", "path": "unique_hubspot__deal_stages_deal_stage_id.sql", "original_file_path": "models/sales/sales.yml", "unique_id": "test.hubspot.unique_hubspot__deal_stages_deal_stage_id.7fd3732373", "fqn": ["hubspot", "sales", "unique_hubspot__deal_stages_deal_stage_id"], "alias": "unique_hubspot__deal_stages_deal_stage_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434198.256097, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "hubspot__deal_stages", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__deal_stages"]}, "compiled_path": "target/compiled/hubspot/models/sales/sales.yml/unique_hubspot__deal_stages_deal_stage_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select deal_stage_id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_hubspot`.`hubspot__deal_stages`\n  where deal_stage_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "deal_stage_id", "file_key_name": "models.hubspot__deal_stages", "attached_node": "model.hubspot.hubspot__deal_stages"}, "test.hubspot.not_null_hubspot__companies_company_id.687ec98e97": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "company_id", "model": "{{ get_where_subquery(ref('hubspot__companies')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_hubspot__companies_company_id", "resource_type": "test", "package_name": "hubspot", "path": "not_null_hubspot__companies_company_id.sql", "original_file_path": "models/sales/sales.yml", "unique_id": "test.hubspot.not_null_hubspot__companies_company_id.687ec98e97", "fqn": ["hubspot", "sales", "not_null_hubspot__companies_company_id"], "alias": "not_null_hubspot__companies_company_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434198.258883, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "hubspot__companies", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__companies"]}, "compiled_path": "target/compiled/hubspot/models/sales/sales.yml/not_null_hubspot__companies_company_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect company_id\nfrom `dbt-package-testing`.`zz_dbt_renee_hubspot`.`hubspot__companies`\nwhere company_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "company_id", "file_key_name": "models.hubspot__companies", "attached_node": "model.hubspot.hubspot__companies"}, "test.hubspot.not_null_hubspot__engagements_engagement_id.59b32bc0d7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('hubspot__engagements')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_hubspot__engagements_engagement_id", "resource_type": "test", "package_name": "hubspot", "path": "not_null_hubspot__engagements_engagement_id.sql", "original_file_path": "models/sales/sales.yml", "unique_id": "test.hubspot.not_null_hubspot__engagements_engagement_id.59b32bc0d7", "fqn": ["hubspot", "sales", "not_null_hubspot__engagements_engagement_id"], "alias": "not_null_hubspot__engagements_engagement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434198.2625, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "hubspot__engagements", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "engagement_id", "file_key_name": "models.hubspot__engagements", "attached_node": "model.hubspot.hubspot__engagements"}, "test.hubspot.unique_hubspot__engagements_engagement_id.01d5c3ee5d": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('hubspot__engagements')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "unique_hubspot__engagements_engagement_id", "resource_type": "test", "package_name": "hubspot", "path": "unique_hubspot__engagements_engagement_id.sql", "original_file_path": "models/sales/sales.yml", "unique_id": "test.hubspot.unique_hubspot__engagements_engagement_id.01d5c3ee5d", "fqn": ["hubspot", "sales", "unique_hubspot__engagements_engagement_id"], "alias": "unique_hubspot__engagements_engagement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434198.2654889, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "hubspot__engagements", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "engagement_id", "file_key_name": "models.hubspot__engagements", "attached_node": "model.hubspot.hubspot__engagements"}, "test.hubspot.unique_hubspot__company_history_id.f1af964b1f": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('hubspot__company_history')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "unique_hubspot__company_history_id", "resource_type": "test", "package_name": "hubspot", "path": "unique_hubspot__company_history_id.sql", "original_file_path": "models/sales/history/history.yml", "unique_id": "test.hubspot.unique_hubspot__company_history_id.f1af964b1f", "fqn": ["hubspot", "sales", "history", "unique_hubspot__company_history_id"], "alias": "unique_hubspot__company_history_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434198.2714188, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "hubspot__company_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__company_history"]}, "compiled_path": "target/compiled/hubspot/models/sales/history/history.yml/unique_hubspot__company_history_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_hubspot`.`hubspot__company_history`\n  where id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "models.hubspot__company_history", "attached_node": "model.hubspot.hubspot__company_history"}, "test.hubspot.not_null_hubspot__company_history_id.33035793ff": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('hubspot__company_history')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_hubspot__company_history_id", "resource_type": "test", "package_name": "hubspot", "path": "not_null_hubspot__company_history_id.sql", "original_file_path": "models/sales/history/history.yml", "unique_id": "test.hubspot.not_null_hubspot__company_history_id.33035793ff", "fqn": ["hubspot", "sales", "history", "not_null_hubspot__company_history_id"], "alias": "not_null_hubspot__company_history_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434198.2738922, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "hubspot__company_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__company_history"]}, "compiled_path": "target/compiled/hubspot/models/sales/history/history.yml/not_null_hubspot__company_history_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `dbt-package-testing`.`zz_dbt_renee_hubspot`.`hubspot__company_history`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "models.hubspot__company_history", "attached_node": "model.hubspot.hubspot__company_history"}, "test.hubspot.dbt_utils_unique_combination_of_columns_hubspot__company_history_company_id__field_name__valid_to.654ef778b1": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["company_id", "field_name", "valid_to"], "model": "{{ get_where_subquery(ref('hubspot__company_history')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_hubspot__company_history_company_id__field_name__valid_to", "resource_type": "test", "package_name": "hubspot", "path": "dbt_utils_unique_combination_o_585970f793ee6c11d8a52b8643ed55e3.sql", "original_file_path": "models/sales/history/history.yml", "unique_id": "test.hubspot.dbt_utils_unique_combination_of_columns_hubspot__company_history_company_id__field_name__valid_to.654ef778b1", "fqn": ["hubspot", "sales", "history", "dbt_utils_unique_combination_of_columns_hubspot__company_history_company_id__field_name__valid_to"], "alias": "dbt_utils_unique_combination_o_585970f793ee6c11d8a52b8643ed55e3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_585970f793ee6c11d8a52b8643ed55e3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_585970f793ee6c11d8a52b8643ed55e3"}, "created_at": 1696434198.276721, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_585970f793ee6c11d8a52b8643ed55e3\") }}", "language": "sql", "refs": [{"name": "hubspot__company_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__company_history"]}, "compiled_path": "target/compiled/hubspot/models/sales/history/history.yml/dbt_utils_unique_combination_o_585970f793ee6c11d8a52b8643ed55e3.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        company_id, field_name, valid_to\n    from `dbt-package-testing`.`zz_dbt_renee_hubspot`.`hubspot__company_history`\n    group by company_id, field_name, valid_to\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.hubspot__company_history", "attached_node": "model.hubspot.hubspot__company_history"}, "test.hubspot.unique_hubspot__deal_history_id.1cb93fca79": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('hubspot__deal_history')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "unique_hubspot__deal_history_id", "resource_type": "test", "package_name": "hubspot", "path": "unique_hubspot__deal_history_id.sql", "original_file_path": "models/sales/history/history.yml", "unique_id": "test.hubspot.unique_hubspot__deal_history_id.1cb93fca79", "fqn": ["hubspot", "sales", "history", "unique_hubspot__deal_history_id"], "alias": "unique_hubspot__deal_history_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434198.282681, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "hubspot__deal_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__deal_history"]}, "compiled_path": "target/compiled/hubspot/models/sales/history/history.yml/unique_hubspot__deal_history_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_hubspot`.`hubspot__deal_history`\n  where id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "models.hubspot__deal_history", "attached_node": "model.hubspot.hubspot__deal_history"}, "test.hubspot.not_null_hubspot__deal_history_id.a1c6cd6a75": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('hubspot__deal_history')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_hubspot__deal_history_id", "resource_type": "test", "package_name": "hubspot", "path": "not_null_hubspot__deal_history_id.sql", "original_file_path": "models/sales/history/history.yml", "unique_id": "test.hubspot.not_null_hubspot__deal_history_id.a1c6cd6a75", "fqn": ["hubspot", "sales", "history", "not_null_hubspot__deal_history_id"], "alias": "not_null_hubspot__deal_history_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434198.285701, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "hubspot__deal_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__deal_history"]}, "compiled_path": "target/compiled/hubspot/models/sales/history/history.yml/not_null_hubspot__deal_history_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `dbt-package-testing`.`zz_dbt_renee_hubspot`.`hubspot__deal_history`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "models.hubspot__deal_history", "attached_node": "model.hubspot.hubspot__deal_history"}, "test.hubspot.dbt_utils_unique_combination_of_columns_hubspot__deal_history_deal_id__field_name__valid_to.f55c724804": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["deal_id", "field_name", "valid_to"], "model": "{{ get_where_subquery(ref('hubspot__deal_history')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_hubspot__deal_history_deal_id__field_name__valid_to", "resource_type": "test", "package_name": "hubspot", "path": "dbt_utils_unique_combination_o_7e0520757371651bf254cedb30cf9fec.sql", "original_file_path": "models/sales/history/history.yml", "unique_id": "test.hubspot.dbt_utils_unique_combination_of_columns_hubspot__deal_history_deal_id__field_name__valid_to.f55c724804", "fqn": ["hubspot", "sales", "history", "dbt_utils_unique_combination_of_columns_hubspot__deal_history_deal_id__field_name__valid_to"], "alias": "dbt_utils_unique_combination_o_7e0520757371651bf254cedb30cf9fec", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_7e0520757371651bf254cedb30cf9fec", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_7e0520757371651bf254cedb30cf9fec"}, "created_at": 1696434198.288447, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_7e0520757371651bf254cedb30cf9fec\") }}", "language": "sql", "refs": [{"name": "hubspot__deal_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__deal_history"]}, "compiled_path": "target/compiled/hubspot/models/sales/history/history.yml/dbt_utils_unique_combination_o_7e0520757371651bf254cedb30cf9fec.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        deal_id, field_name, valid_to\n    from `dbt-package-testing`.`zz_dbt_renee_hubspot`.`hubspot__deal_history`\n    group by deal_id, field_name, valid_to\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.hubspot__deal_history", "attached_node": "model.hubspot.hubspot__deal_history"}, "test.hubspot.not_null_hubspot__engagement_calls_engagement_id.00f8d8357f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('hubspot__engagement_calls')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_hubspot__engagement_calls_engagement_id", "resource_type": "test", "package_name": "hubspot", "path": "not_null_hubspot__engagement_calls_engagement_id.sql", "original_file_path": "models/sales/engagement_events/engagement_events.yml", "unique_id": "test.hubspot.not_null_hubspot__engagement_calls_engagement_id.00f8d8357f", "fqn": ["hubspot", "sales", "engagement_events", "not_null_hubspot__engagement_calls_engagement_id"], "alias": "not_null_hubspot__engagement_calls_engagement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434198.3022919, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "hubspot__engagement_calls", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "engagement_id", "file_key_name": "models.hubspot__engagement_calls", "attached_node": "model.hubspot.hubspot__engagement_calls"}, "test.hubspot.unique_hubspot__engagement_calls_engagement_id.972572ce6c": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('hubspot__engagement_calls')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "unique_hubspot__engagement_calls_engagement_id", "resource_type": "test", "package_name": "hubspot", "path": "unique_hubspot__engagement_calls_engagement_id.sql", "original_file_path": "models/sales/engagement_events/engagement_events.yml", "unique_id": "test.hubspot.unique_hubspot__engagement_calls_engagement_id.972572ce6c", "fqn": ["hubspot", "sales", "engagement_events", "unique_hubspot__engagement_calls_engagement_id"], "alias": "unique_hubspot__engagement_calls_engagement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434198.304938, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "hubspot__engagement_calls", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "engagement_id", "file_key_name": "models.hubspot__engagement_calls", "attached_node": "model.hubspot.hubspot__engagement_calls"}, "test.hubspot.not_null_hubspot__engagement_emails_engagement_id.13a39d1e09": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('hubspot__engagement_emails')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_hubspot__engagement_emails_engagement_id", "resource_type": "test", "package_name": "hubspot", "path": "not_null_hubspot__engagement_emails_engagement_id.sql", "original_file_path": "models/sales/engagement_events/engagement_events.yml", "unique_id": "test.hubspot.not_null_hubspot__engagement_emails_engagement_id.13a39d1e09", "fqn": ["hubspot", "sales", "engagement_events", "not_null_hubspot__engagement_emails_engagement_id"], "alias": "not_null_hubspot__engagement_emails_engagement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434198.307488, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "hubspot__engagement_emails", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "engagement_id", "file_key_name": "models.hubspot__engagement_emails", "attached_node": "model.hubspot.hubspot__engagement_emails"}, "test.hubspot.unique_hubspot__engagement_emails_engagement_id.b18e2acbde": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('hubspot__engagement_emails')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "unique_hubspot__engagement_emails_engagement_id", "resource_type": "test", "package_name": "hubspot", "path": "unique_hubspot__engagement_emails_engagement_id.sql", "original_file_path": "models/sales/engagement_events/engagement_events.yml", "unique_id": "test.hubspot.unique_hubspot__engagement_emails_engagement_id.b18e2acbde", "fqn": ["hubspot", "sales", "engagement_events", "unique_hubspot__engagement_emails_engagement_id"], "alias": "unique_hubspot__engagement_emails_engagement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434198.310216, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "hubspot__engagement_emails", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "engagement_id", "file_key_name": "models.hubspot__engagement_emails", "attached_node": "model.hubspot.hubspot__engagement_emails"}, "test.hubspot.not_null_hubspot__engagement_meetings_engagement_id.83a791c3df": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('hubspot__engagement_meetings')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_hubspot__engagement_meetings_engagement_id", "resource_type": "test", "package_name": "hubspot", "path": "not_null_hubspot__engagement_meetings_engagement_id.sql", "original_file_path": "models/sales/engagement_events/engagement_events.yml", "unique_id": "test.hubspot.not_null_hubspot__engagement_meetings_engagement_id.83a791c3df", "fqn": ["hubspot", "sales", "engagement_events", "not_null_hubspot__engagement_meetings_engagement_id"], "alias": "not_null_hubspot__engagement_meetings_engagement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434198.312821, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "hubspot__engagement_meetings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "engagement_id", "file_key_name": "models.hubspot__engagement_meetings", "attached_node": "model.hubspot.hubspot__engagement_meetings"}, "test.hubspot.unique_hubspot__engagement_meetings_engagement_id.3098aabcd1": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('hubspot__engagement_meetings')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "unique_hubspot__engagement_meetings_engagement_id", "resource_type": "test", "package_name": "hubspot", "path": "unique_hubspot__engagement_meetings_engagement_id.sql", "original_file_path": "models/sales/engagement_events/engagement_events.yml", "unique_id": "test.hubspot.unique_hubspot__engagement_meetings_engagement_id.3098aabcd1", "fqn": ["hubspot", "sales", "engagement_events", "unique_hubspot__engagement_meetings_engagement_id"], "alias": "unique_hubspot__engagement_meetings_engagement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434198.315629, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "hubspot__engagement_meetings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "engagement_id", "file_key_name": "models.hubspot__engagement_meetings", "attached_node": "model.hubspot.hubspot__engagement_meetings"}, "test.hubspot.not_null_hubspot__engagement_notes_engagement_id.76434ac965": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('hubspot__engagement_notes')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_hubspot__engagement_notes_engagement_id", "resource_type": "test", "package_name": "hubspot", "path": "not_null_hubspot__engagement_notes_engagement_id.sql", "original_file_path": "models/sales/engagement_events/engagement_events.yml", "unique_id": "test.hubspot.not_null_hubspot__engagement_notes_engagement_id.76434ac965", "fqn": ["hubspot", "sales", "engagement_events", "not_null_hubspot__engagement_notes_engagement_id"], "alias": "not_null_hubspot__engagement_notes_engagement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434198.3184981, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "hubspot__engagement_notes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "engagement_id", "file_key_name": "models.hubspot__engagement_notes", "attached_node": "model.hubspot.hubspot__engagement_notes"}, "test.hubspot.unique_hubspot__engagement_notes_engagement_id.c9864b5001": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('hubspot__engagement_notes')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "unique_hubspot__engagement_notes_engagement_id", "resource_type": "test", "package_name": "hubspot", "path": "unique_hubspot__engagement_notes_engagement_id.sql", "original_file_path": "models/sales/engagement_events/engagement_events.yml", "unique_id": "test.hubspot.unique_hubspot__engagement_notes_engagement_id.c9864b5001", "fqn": ["hubspot", "sales", "engagement_events", "unique_hubspot__engagement_notes_engagement_id"], "alias": "unique_hubspot__engagement_notes_engagement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434198.3231099, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "hubspot__engagement_notes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "engagement_id", "file_key_name": "models.hubspot__engagement_notes", "attached_node": "model.hubspot.hubspot__engagement_notes"}, "test.hubspot.not_null_hubspot__engagement_tasks_engagement_id.67738794ae": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('hubspot__engagement_tasks')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_hubspot__engagement_tasks_engagement_id", "resource_type": "test", "package_name": "hubspot", "path": "not_null_hubspot__engagement_tasks_engagement_id.sql", "original_file_path": "models/sales/engagement_events/engagement_events.yml", "unique_id": "test.hubspot.not_null_hubspot__engagement_tasks_engagement_id.67738794ae", "fqn": ["hubspot", "sales", "engagement_events", "not_null_hubspot__engagement_tasks_engagement_id"], "alias": "not_null_hubspot__engagement_tasks_engagement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434198.326139, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "hubspot__engagement_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "engagement_id", "file_key_name": "models.hubspot__engagement_tasks", "attached_node": "model.hubspot.hubspot__engagement_tasks"}, "test.hubspot.unique_hubspot__engagement_tasks_engagement_id.754d36b939": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('hubspot__engagement_tasks')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "unique_hubspot__engagement_tasks_engagement_id", "resource_type": "test", "package_name": "hubspot", "path": "unique_hubspot__engagement_tasks_engagement_id.sql", "original_file_path": "models/sales/engagement_events/engagement_events.yml", "unique_id": "test.hubspot.unique_hubspot__engagement_tasks_engagement_id.754d36b939", "fqn": ["hubspot", "sales", "engagement_events", "unique_hubspot__engagement_tasks_engagement_id"], "alias": "unique_hubspot__engagement_tasks_engagement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434198.3289568, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "hubspot__engagement_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "engagement_id", "file_key_name": "models.hubspot__engagement_tasks", "attached_node": "model.hubspot.hubspot__engagement_tasks"}, "test.hubspot.not_null_hubspot__email_sends_event_id.9fc8a8bef3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('hubspot__email_sends')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_hubspot__email_sends_event_id", "resource_type": "test", "package_name": "hubspot", "path": "not_null_hubspot__email_sends_event_id.sql", "original_file_path": "models/marketing/marketing.yml", "unique_id": "test.hubspot.not_null_hubspot__email_sends_event_id.9fc8a8bef3", "fqn": ["hubspot", "marketing", "not_null_hubspot__email_sends_event_id"], "alias": "not_null_hubspot__email_sends_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434198.358658, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "hubspot__email_sends", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.hubspot__email_sends", "attached_node": "model.hubspot.hubspot__email_sends"}, "test.hubspot.unique_hubspot__email_campaigns_email_campaign_id.2470fabe62": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "email_campaign_id", "model": "{{ get_where_subquery(ref('hubspot__email_campaigns')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "unique_hubspot__email_campaigns_email_campaign_id", "resource_type": "test", "package_name": "hubspot", "path": "unique_hubspot__email_campaigns_email_campaign_id.sql", "original_file_path": "models/marketing/marketing.yml", "unique_id": "test.hubspot.unique_hubspot__email_campaigns_email_campaign_id.2470fabe62", "fqn": ["hubspot", "marketing", "unique_hubspot__email_campaigns_email_campaign_id"], "alias": "unique_hubspot__email_campaigns_email_campaign_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434198.361341, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "hubspot__email_campaigns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "email_campaign_id", "file_key_name": "models.hubspot__email_campaigns", "attached_node": "model.hubspot.hubspot__email_campaigns"}, "test.hubspot.not_null_hubspot__email_campaigns_email_campaign_id.6b2d6f43c0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "email_campaign_id", "model": "{{ get_where_subquery(ref('hubspot__email_campaigns')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_hubspot__email_campaigns_email_campaign_id", "resource_type": "test", "package_name": "hubspot", "path": "not_null_hubspot__email_campaigns_email_campaign_id.sql", "original_file_path": "models/marketing/marketing.yml", "unique_id": "test.hubspot.not_null_hubspot__email_campaigns_email_campaign_id.6b2d6f43c0", "fqn": ["hubspot", "marketing", "not_null_hubspot__email_campaigns_email_campaign_id"], "alias": "not_null_hubspot__email_campaigns_email_campaign_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434198.365141, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "hubspot__email_campaigns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "email_campaign_id", "file_key_name": "models.hubspot__email_campaigns", "attached_node": "model.hubspot.hubspot__email_campaigns"}, "test.hubspot.not_null_hubspot__contacts_contact_id.e28e88dce3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "contact_id", "model": "{{ get_where_subquery(ref('hubspot__contacts')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_hubspot__contacts_contact_id", "resource_type": "test", "package_name": "hubspot", "path": "not_null_hubspot__contacts_contact_id.sql", "original_file_path": "models/marketing/marketing.yml", "unique_id": "test.hubspot.not_null_hubspot__contacts_contact_id.e28e88dce3", "fqn": ["hubspot", "marketing", "not_null_hubspot__contacts_contact_id"], "alias": "not_null_hubspot__contacts_contact_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434198.368204, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "hubspot__contacts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__contacts"]}, "compiled_path": "target/compiled/hubspot/models/marketing/marketing.yml/not_null_hubspot__contacts_contact_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contact_id\nfrom `dbt-package-testing`.`zz_dbt_renee_hubspot`.`hubspot__contacts`\nwhere contact_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "contact_id", "file_key_name": "models.hubspot__contacts", "attached_node": "model.hubspot.hubspot__contacts"}, "test.hubspot.not_null_hubspot__contact_lists_contact_list_id.3bde1bb891": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "contact_list_id", "model": "{{ get_where_subquery(ref('hubspot__contact_lists')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_hubspot__contact_lists_contact_list_id", "resource_type": "test", "package_name": "hubspot", "path": "not_null_hubspot__contact_lists_contact_list_id.sql", "original_file_path": "models/marketing/marketing.yml", "unique_id": "test.hubspot.not_null_hubspot__contact_lists_contact_list_id.3bde1bb891", "fqn": ["hubspot", "marketing", "not_null_hubspot__contact_lists_contact_list_id"], "alias": "not_null_hubspot__contact_lists_contact_list_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434198.370753, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "hubspot__contact_lists", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__contact_lists"]}, "compiled_path": "target/compiled/hubspot/models/marketing/marketing.yml/not_null_hubspot__contact_lists_contact_list_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contact_list_id\nfrom `dbt-package-testing`.`zz_dbt_renee_hubspot`.`hubspot__contact_lists`\nwhere contact_list_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "contact_list_id", "file_key_name": "models.hubspot__contact_lists", "attached_node": "model.hubspot.hubspot__contact_lists"}, "test.hubspot.not_null_hubspot__email_event_bounce_event_id.39d8daa6f5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('hubspot__email_event_bounce')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_hubspot__email_event_bounce_event_id", "resource_type": "test", "package_name": "hubspot", "path": "not_null_hubspot__email_event_bounce_event_id.sql", "original_file_path": "models/marketing/email_events/email_events.yml", "unique_id": "test.hubspot.not_null_hubspot__email_event_bounce_event_id.39d8daa6f5", "fqn": ["hubspot", "marketing", "email_events", "not_null_hubspot__email_event_bounce_event_id"], "alias": "not_null_hubspot__email_event_bounce_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434198.390622, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "hubspot__email_event_bounce", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.hubspot__email_event_bounce", "attached_node": "model.hubspot.hubspot__email_event_bounce"}, "test.hubspot.not_null_hubspot__email_event_clicks_event_id.f603501ca0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('hubspot__email_event_clicks')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_hubspot__email_event_clicks_event_id", "resource_type": "test", "package_name": "hubspot", "path": "not_null_hubspot__email_event_clicks_event_id.sql", "original_file_path": "models/marketing/email_events/email_events.yml", "unique_id": "test.hubspot.not_null_hubspot__email_event_clicks_event_id.f603501ca0", "fqn": ["hubspot", "marketing", "email_events", "not_null_hubspot__email_event_clicks_event_id"], "alias": "not_null_hubspot__email_event_clicks_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434198.3933089, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "hubspot__email_event_clicks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.hubspot__email_event_clicks", "attached_node": "model.hubspot.hubspot__email_event_clicks"}, "test.hubspot.not_null_hubspot__email_event_deferred_event_id.2c6decaa91": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('hubspot__email_event_deferred')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_hubspot__email_event_deferred_event_id", "resource_type": "test", "package_name": "hubspot", "path": "not_null_hubspot__email_event_deferred_event_id.sql", "original_file_path": "models/marketing/email_events/email_events.yml", "unique_id": "test.hubspot.not_null_hubspot__email_event_deferred_event_id.2c6decaa91", "fqn": ["hubspot", "marketing", "email_events", "not_null_hubspot__email_event_deferred_event_id"], "alias": "not_null_hubspot__email_event_deferred_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434198.396718, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "hubspot__email_event_deferred", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.hubspot__email_event_deferred", "attached_node": "model.hubspot.hubspot__email_event_deferred"}, "test.hubspot.not_null_hubspot__email_event_delivered_event_id.0609870be3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('hubspot__email_event_delivered')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_hubspot__email_event_delivered_event_id", "resource_type": "test", "package_name": "hubspot", "path": "not_null_hubspot__email_event_delivered_event_id.sql", "original_file_path": "models/marketing/email_events/email_events.yml", "unique_id": "test.hubspot.not_null_hubspot__email_event_delivered_event_id.0609870be3", "fqn": ["hubspot", "marketing", "email_events", "not_null_hubspot__email_event_delivered_event_id"], "alias": "not_null_hubspot__email_event_delivered_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434198.39982, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "hubspot__email_event_delivered", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.hubspot__email_event_delivered", "attached_node": "model.hubspot.hubspot__email_event_delivered"}, "test.hubspot.not_null_hubspot__email_event_dropped_event_id.5cfe4eeb95": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('hubspot__email_event_dropped')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_hubspot__email_event_dropped_event_id", "resource_type": "test", "package_name": "hubspot", "path": "not_null_hubspot__email_event_dropped_event_id.sql", "original_file_path": "models/marketing/email_events/email_events.yml", "unique_id": "test.hubspot.not_null_hubspot__email_event_dropped_event_id.5cfe4eeb95", "fqn": ["hubspot", "marketing", "email_events", "not_null_hubspot__email_event_dropped_event_id"], "alias": "not_null_hubspot__email_event_dropped_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434198.402553, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "hubspot__email_event_dropped", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.hubspot__email_event_dropped", "attached_node": "model.hubspot.hubspot__email_event_dropped"}, "test.hubspot.not_null_hubspot__email_event_forward_event_id.417a73da08": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('hubspot__email_event_forward')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_hubspot__email_event_forward_event_id", "resource_type": "test", "package_name": "hubspot", "path": "not_null_hubspot__email_event_forward_event_id.sql", "original_file_path": "models/marketing/email_events/email_events.yml", "unique_id": "test.hubspot.not_null_hubspot__email_event_forward_event_id.417a73da08", "fqn": ["hubspot", "marketing", "email_events", "not_null_hubspot__email_event_forward_event_id"], "alias": "not_null_hubspot__email_event_forward_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434198.4052029, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "hubspot__email_event_forward", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.hubspot__email_event_forward", "attached_node": "model.hubspot.hubspot__email_event_forward"}, "test.hubspot.not_null_hubspot__email_event_opens_event_id.a9fe279ee1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('hubspot__email_event_opens')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_hubspot__email_event_opens_event_id", "resource_type": "test", "package_name": "hubspot", "path": "not_null_hubspot__email_event_opens_event_id.sql", "original_file_path": "models/marketing/email_events/email_events.yml", "unique_id": "test.hubspot.not_null_hubspot__email_event_opens_event_id.a9fe279ee1", "fqn": ["hubspot", "marketing", "email_events", "not_null_hubspot__email_event_opens_event_id"], "alias": "not_null_hubspot__email_event_opens_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434198.407826, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "hubspot__email_event_opens", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.hubspot__email_event_opens", "attached_node": "model.hubspot.hubspot__email_event_opens"}, "test.hubspot.not_null_hubspot__email_event_print_event_id.9dac8a147e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('hubspot__email_event_print')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_hubspot__email_event_print_event_id", "resource_type": "test", "package_name": "hubspot", "path": "not_null_hubspot__email_event_print_event_id.sql", "original_file_path": "models/marketing/email_events/email_events.yml", "unique_id": "test.hubspot.not_null_hubspot__email_event_print_event_id.9dac8a147e", "fqn": ["hubspot", "marketing", "email_events", "not_null_hubspot__email_event_print_event_id"], "alias": "not_null_hubspot__email_event_print_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434198.410833, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "hubspot__email_event_print", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.hubspot__email_event_print", "attached_node": "model.hubspot.hubspot__email_event_print"}, "test.hubspot.not_null_hubspot__email_event_sent_event_id.5507dcc5b9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('hubspot__email_event_sent')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_hubspot__email_event_sent_event_id", "resource_type": "test", "package_name": "hubspot", "path": "not_null_hubspot__email_event_sent_event_id.sql", "original_file_path": "models/marketing/email_events/email_events.yml", "unique_id": "test.hubspot.not_null_hubspot__email_event_sent_event_id.5507dcc5b9", "fqn": ["hubspot", "marketing", "email_events", "not_null_hubspot__email_event_sent_event_id"], "alias": "not_null_hubspot__email_event_sent_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434198.41427, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "hubspot__email_event_sent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.hubspot__email_event_sent", "attached_node": "model.hubspot.hubspot__email_event_sent"}, "test.hubspot.not_null_hubspot__email_event_spam_report_event_id.5ddca8771a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('hubspot__email_event_spam_report')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_hubspot__email_event_spam_report_event_id", "resource_type": "test", "package_name": "hubspot", "path": "not_null_hubspot__email_event_spam_report_event_id.sql", "original_file_path": "models/marketing/email_events/email_events.yml", "unique_id": "test.hubspot.not_null_hubspot__email_event_spam_report_event_id.5ddca8771a", "fqn": ["hubspot", "marketing", "email_events", "not_null_hubspot__email_event_spam_report_event_id"], "alias": "not_null_hubspot__email_event_spam_report_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434198.417144, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "hubspot__email_event_spam_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.hubspot__email_event_spam_report", "attached_node": "model.hubspot.hubspot__email_event_spam_report"}, "test.hubspot.not_null_hubspot__email_event_status_change_event_id.a1737e44b3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('hubspot__email_event_status_change')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_hubspot__email_event_status_change_event_id", "resource_type": "test", "package_name": "hubspot", "path": "not_null_hubspot__email_event_status_change_event_id.sql", "original_file_path": "models/marketing/email_events/email_events.yml", "unique_id": "test.hubspot.not_null_hubspot__email_event_status_change_event_id.a1737e44b3", "fqn": ["hubspot", "marketing", "email_events", "not_null_hubspot__email_event_status_change_event_id"], "alias": "not_null_hubspot__email_event_status_change_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434198.4196732, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "hubspot__email_event_status_change", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.hubspot__email_event_status_change", "attached_node": "model.hubspot.hubspot__email_event_status_change"}, "test.hubspot.unique_hubspot__contact_history_id.aef69ae1ec": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('hubspot__contact_history')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "unique_hubspot__contact_history_id", "resource_type": "test", "package_name": "hubspot", "path": "unique_hubspot__contact_history_id.sql", "original_file_path": "models/marketing/history/history.yml", "unique_id": "test.hubspot.unique_hubspot__contact_history_id.aef69ae1ec", "fqn": ["hubspot", "marketing", "history", "unique_hubspot__contact_history_id"], "alias": "unique_hubspot__contact_history_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434198.424234, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "hubspot__contact_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__contact_history"]}, "compiled_path": "target/compiled/hubspot/models/marketing/history/history.yml/unique_hubspot__contact_history_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_hubspot`.`hubspot__contact_history`\n  where id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "models.hubspot__contact_history", "attached_node": "model.hubspot.hubspot__contact_history"}, "test.hubspot.not_null_hubspot__contact_history_id.eaae22e088": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('hubspot__contact_history')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_hubspot__contact_history_id", "resource_type": "test", "package_name": "hubspot", "path": "not_null_hubspot__contact_history_id.sql", "original_file_path": "models/marketing/history/history.yml", "unique_id": "test.hubspot.not_null_hubspot__contact_history_id.eaae22e088", "fqn": ["hubspot", "marketing", "history", "not_null_hubspot__contact_history_id"], "alias": "not_null_hubspot__contact_history_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434198.426764, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "hubspot__contact_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__contact_history"]}, "compiled_path": "target/compiled/hubspot/models/marketing/history/history.yml/not_null_hubspot__contact_history_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `dbt-package-testing`.`zz_dbt_renee_hubspot`.`hubspot__contact_history`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "models.hubspot__contact_history", "attached_node": "model.hubspot.hubspot__contact_history"}, "test.hubspot.dbt_utils_unique_combination_of_columns_hubspot__contact_history_contact_id__field_name__valid_to.42ccfb8329": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["contact_id", "field_name", "valid_to"], "model": "{{ get_where_subquery(ref('hubspot__contact_history')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_hubspot__contact_history_contact_id__field_name__valid_to", "resource_type": "test", "package_name": "hubspot", "path": "dbt_utils_unique_combination_o_4bdcc02b7c0675314311d172bbf6ae61.sql", "original_file_path": "models/marketing/history/history.yml", "unique_id": "test.hubspot.dbt_utils_unique_combination_of_columns_hubspot__contact_history_contact_id__field_name__valid_to.42ccfb8329", "fqn": ["hubspot", "marketing", "history", "dbt_utils_unique_combination_of_columns_hubspot__contact_history_contact_id__field_name__valid_to"], "alias": "dbt_utils_unique_combination_o_4bdcc02b7c0675314311d172bbf6ae61", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_4bdcc02b7c0675314311d172bbf6ae61", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_4bdcc02b7c0675314311d172bbf6ae61"}, "created_at": 1696434198.4300501, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_4bdcc02b7c0675314311d172bbf6ae61\") }}", "language": "sql", "refs": [{"name": "hubspot__contact_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__contact_history"]}, "compiled_path": "target/compiled/hubspot/models/marketing/history/history.yml/dbt_utils_unique_combination_o_4bdcc02b7c0675314311d172bbf6ae61.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        contact_id, field_name, valid_to\n    from `dbt-package-testing`.`zz_dbt_renee_hubspot`.`hubspot__contact_history`\n    group by contact_id, field_name, valid_to\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.hubspot__contact_history", "attached_node": "model.hubspot.hubspot__contact_history"}, "test.hubspot.unique_int_hubspot__email_aggregate_status_change_email_send_id.7c03e87c05": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "email_send_id", "model": "{{ get_where_subquery(ref('int_hubspot__email_aggregate_status_change')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "unique_int_hubspot__email_aggregate_status_change_email_send_id", "resource_type": "test", "package_name": "hubspot", "path": "unique_int_hubspot__email_aggregate_status_change_email_send_id.sql", "original_file_path": "models/marketing/intermediate/intermediate.yml", "unique_id": "test.hubspot.unique_int_hubspot__email_aggregate_status_change_email_send_id.7c03e87c05", "fqn": ["hubspot", "marketing", "intermediate", "unique_int_hubspot__email_aggregate_status_change_email_send_id"], "alias": "unique_int_hubspot__email_aggregate_status_change_email_send_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434198.4400902, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_hubspot__email_aggregate_status_change", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "email_send_id", "file_key_name": "models.int_hubspot__email_aggregate_status_change", "attached_node": "model.hubspot.int_hubspot__email_aggregate_status_change"}, "test.hubspot.not_null_int_hubspot__email_aggregate_status_change_email_send_id.16bf74a3bc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "email_send_id", "model": "{{ get_where_subquery(ref('int_hubspot__email_aggregate_status_change')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_int_hubspot__email_aggregate_status_change_email_send_id", "resource_type": "test", "package_name": "hubspot", "path": "not_null_int_hubspot__email_ag_072a8e51e30dd12183bb92703b55e189.sql", "original_file_path": "models/marketing/intermediate/intermediate.yml", "unique_id": "test.hubspot.not_null_int_hubspot__email_aggregate_status_change_email_send_id.16bf74a3bc", "fqn": ["hubspot", "marketing", "intermediate", "not_null_int_hubspot__email_aggregate_status_change_email_send_id"], "alias": "not_null_int_hubspot__email_ag_072a8e51e30dd12183bb92703b55e189", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "not_null_int_hubspot__email_ag_072a8e51e30dd12183bb92703b55e189", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_int_hubspot__email_ag_072a8e51e30dd12183bb92703b55e189"}, "created_at": 1696434198.4433641, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_hubspot__email_ag_072a8e51e30dd12183bb92703b55e189\") }}", "language": "sql", "refs": [{"name": "int_hubspot__email_aggregate_status_change", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "email_send_id", "file_key_name": "models.int_hubspot__email_aggregate_status_change", "attached_node": "model.hubspot.int_hubspot__email_aggregate_status_change"}, "test.hubspot.unique_int_hubspot__email_metrics__by_contact_list_contact_list_id.095d72d5b8": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "contact_list_id", "model": "{{ get_where_subquery(ref('int_hubspot__email_metrics__by_contact_list')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "unique_int_hubspot__email_metrics__by_contact_list_contact_list_id", "resource_type": "test", "package_name": "hubspot", "path": "unique_int_hubspot__email_metr_ee44515cad61aa59cf03c59614b376f2.sql", "original_file_path": "models/marketing/intermediate/intermediate.yml", "unique_id": "test.hubspot.unique_int_hubspot__email_metrics__by_contact_list_contact_list_id.095d72d5b8", "fqn": ["hubspot", "marketing", "intermediate", "unique_int_hubspot__email_metrics__by_contact_list_contact_list_id"], "alias": "unique_int_hubspot__email_metr_ee44515cad61aa59cf03c59614b376f2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "unique_int_hubspot__email_metr_ee44515cad61aa59cf03c59614b376f2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_int_hubspot__email_metr_ee44515cad61aa59cf03c59614b376f2"}, "created_at": 1696434198.446213, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_int_hubspot__email_metr_ee44515cad61aa59cf03c59614b376f2\") }}", "language": "sql", "refs": [{"name": "int_hubspot__email_metrics__by_contact_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "contact_list_id", "file_key_name": "models.int_hubspot__email_metrics__by_contact_list", "attached_node": "model.hubspot.int_hubspot__email_metrics__by_contact_list"}, "test.hubspot.not_null_int_hubspot__email_metrics__by_contact_list_contact_list_id.1d3cf4caf2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "contact_list_id", "model": "{{ get_where_subquery(ref('int_hubspot__email_metrics__by_contact_list')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_int_hubspot__email_metrics__by_contact_list_contact_list_id", "resource_type": "test", "package_name": "hubspot", "path": "not_null_int_hubspot__email_me_a72a3c877d9529cf35305d2d29199a33.sql", "original_file_path": "models/marketing/intermediate/intermediate.yml", "unique_id": "test.hubspot.not_null_int_hubspot__email_metrics__by_contact_list_contact_list_id.1d3cf4caf2", "fqn": ["hubspot", "marketing", "intermediate", "not_null_int_hubspot__email_metrics__by_contact_list_contact_list_id"], "alias": "not_null_int_hubspot__email_me_a72a3c877d9529cf35305d2d29199a33", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "not_null_int_hubspot__email_me_a72a3c877d9529cf35305d2d29199a33", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_int_hubspot__email_me_a72a3c877d9529cf35305d2d29199a33"}, "created_at": 1696434198.448857, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_hubspot__email_me_a72a3c877d9529cf35305d2d29199a33\") }}", "language": "sql", "refs": [{"name": "int_hubspot__email_metrics__by_contact_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "contact_list_id", "file_key_name": "models.int_hubspot__email_metrics__by_contact_list", "attached_node": "model.hubspot.int_hubspot__email_metrics__by_contact_list"}, "test.hubspot.unique_int_hubspot__email_event_aggregates_email_send_id.4deec238f9": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "email_send_id", "model": "{{ get_where_subquery(ref('int_hubspot__email_event_aggregates')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "unique_int_hubspot__email_event_aggregates_email_send_id", "resource_type": "test", "package_name": "hubspot", "path": "unique_int_hubspot__email_event_aggregates_email_send_id.sql", "original_file_path": "models/marketing/intermediate/intermediate.yml", "unique_id": "test.hubspot.unique_int_hubspot__email_event_aggregates_email_send_id.4deec238f9", "fqn": ["hubspot", "marketing", "intermediate", "unique_int_hubspot__email_event_aggregates_email_send_id"], "alias": "unique_int_hubspot__email_event_aggregates_email_send_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434198.4513652, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_hubspot__email_event_aggregates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "email_send_id", "file_key_name": "models.int_hubspot__email_event_aggregates", "attached_node": "model.hubspot.int_hubspot__email_event_aggregates"}, "test.hubspot.not_null_int_hubspot__email_event_aggregates_email_send_id.ac29e6997a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "email_send_id", "model": "{{ get_where_subquery(ref('int_hubspot__email_event_aggregates')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_int_hubspot__email_event_aggregates_email_send_id", "resource_type": "test", "package_name": "hubspot", "path": "not_null_int_hubspot__email_event_aggregates_email_send_id.sql", "original_file_path": "models/marketing/intermediate/intermediate.yml", "unique_id": "test.hubspot.not_null_int_hubspot__email_event_aggregates_email_send_id.ac29e6997a", "fqn": ["hubspot", "marketing", "intermediate", "not_null_int_hubspot__email_event_aggregates_email_send_id"], "alias": "not_null_int_hubspot__email_event_aggregates_email_send_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434198.454108, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_hubspot__email_event_aggregates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "email_send_id", "file_key_name": "models.int_hubspot__email_event_aggregates", "attached_node": "model.hubspot.int_hubspot__email_event_aggregates"}, "test.hubspot.unique_int_hubspot__engagement_metrics__by_contact_contact_id.1c156b64ed": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "contact_id", "model": "{{ get_where_subquery(ref('int_hubspot__engagement_metrics__by_contact')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "unique_int_hubspot__engagement_metrics__by_contact_contact_id", "resource_type": "test", "package_name": "hubspot", "path": "unique_int_hubspot__engagement_metrics__by_contact_contact_id.sql", "original_file_path": "models/marketing/intermediate/intermediate.yml", "unique_id": "test.hubspot.unique_int_hubspot__engagement_metrics__by_contact_contact_id.1c156b64ed", "fqn": ["hubspot", "marketing", "intermediate", "unique_int_hubspot__engagement_metrics__by_contact_contact_id"], "alias": "unique_int_hubspot__engagement_metrics__by_contact_contact_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434198.456544, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_hubspot__engagement_metrics__by_contact", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "contact_id", "file_key_name": "models.int_hubspot__engagement_metrics__by_contact", "attached_node": "model.hubspot.int_hubspot__engagement_metrics__by_contact"}, "test.hubspot.not_null_int_hubspot__engagement_metrics__by_contact_contact_id.4a800df06b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "contact_id", "model": "{{ get_where_subquery(ref('int_hubspot__engagement_metrics__by_contact')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_int_hubspot__engagement_metrics__by_contact_contact_id", "resource_type": "test", "package_name": "hubspot", "path": "not_null_int_hubspot__engagement_metrics__by_contact_contact_id.sql", "original_file_path": "models/marketing/intermediate/intermediate.yml", "unique_id": "test.hubspot.not_null_int_hubspot__engagement_metrics__by_contact_contact_id.4a800df06b", "fqn": ["hubspot", "marketing", "intermediate", "not_null_int_hubspot__engagement_metrics__by_contact_contact_id"], "alias": "not_null_int_hubspot__engagement_metrics__by_contact_contact_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696434198.459021, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_hubspot__engagement_metrics__by_contact", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "contact_id", "file_key_name": "models.int_hubspot__engagement_metrics__by_contact", "attached_node": "model.hubspot.int_hubspot__engagement_metrics__by_contact"}}, "sources": {"source.hubspot_source.hubspot.calendar_event": {"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "calendar_event", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.calendar_event", "fqn": ["hubspot_source", "hubspot", "calendar_event"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "calendar_event", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a calendar event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "avatar_url": {"name": "avatar_url", "description": "URL of image associated with social media event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "campaign_guid": {"name": "campaign_guid", "description": "Value of campaign GUID associated with Task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "category": {"name": "category", "description": "Type of event. If the event type is PUBLISHING_TASK, it is one of BLOG_POST, EMAIL, LANDING_PAGE, CUSTOM.\nIf event type is SOCIAL, it is one of twitter, facebook, linkedin, googlepluspages.\nIf event type is CONTENT, it is one of email, recurring-email, blog-post, landing-page, legacy-page, site-page.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "category_id": {"name": "category_id", "description": "For event type of PUBLISHING_TASK, a numeric value corresponding to the type of task; one of 3 (BLOG_POST), 2 (EMAIL), 1 (LANDING_PAGE), 0 (CUSTOM).\nFor event type of SOCIAL, this is 0.\nIf event type is CONTENT, it is one of 2 (email, recurring-email), 3 (blog-post), 1 (landing-page), 5 (legacy-page), 4 (site-page).\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "content_group_id": {"name": "content_group_id", "description": "The ID of the content group (aka blog) that the associated Blog Post belongs to, if any.\nOtherwise null. Only populated for single task GETs and for Blog Post Tasks.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "content_id": {"name": "content_id", "description": "ID value of the COS content object associated with the event, null for social or if nothing associated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_by": {"name": "created_by", "description": "HubSpot ID of the user that the event was created by.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of Event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_date": {"name": "event_date", "description": "If task, When the task is set to be due, otherwise when the event is/ was scheduled for; in milliseconds since the epoch.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_type": {"name": "event_type", "description": "Type of calendar event; for tasks this is PUBLISHING_TASK, for COS Items, this is CONTENT, for social media events, this is SOCIAL", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "The unique ID of the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_recurring": {"name": "is_recurring", "description": "Whether the event is recurring.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of Event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "TASK - HubSpot ID of the user that the task is assigned to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "preview_key": {"name": "preview_key", "description": "Preview key of content object; used for showing previews of unpublished items.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "social_display_name": {"name": "social_display_name", "description": "Social media full name associate with event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "social_username": {"name": "social_username", "description": "Social media user name associated with event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "state": {"name": "state", "description": "For type publishing task, value of TODO or DONE, for others, a value of SCHEDULED, PUBLISHED, PUBLISHED_OR_SCHEDULED.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "topic_ids": {"name": "topic_ids", "description": "The list of IDs of topics associated with the associated Blog Post, if any. Otherwise null. Only populated for single task GETs and for Blog Post Tasks.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "url": {"name": "url", "description": "Public URL of content item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`calendar_event`", "created_at": 1696434198.4881449}, "source.hubspot_source.hubspot.company": {"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "company", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.company", "fqn": ["hubspot_source", "hubspot", "company"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "company", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a company in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Boolean indicating whether a record has been deleted in Hubspot and/or inferred deleted in Hubspot by Fivetran; _fivetran_deleted and is_deleted fields are equivalent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_name": {"name": "property_name", "description": "The name of the company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_description": {"name": "property_description", "description": "A short statement about the company's mission and goals.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_createdate": {"name": "property_createdate", "description": "The date the company was added to your account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_industry": {"name": "property_industry", "description": "The type of business the company performs.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_address": {"name": "property_address", "description": "The street address of the company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_address_2": {"name": "property_address_2", "description": "Additional address information for the company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_city": {"name": "property_city", "description": "The city where the company is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_state": {"name": "property_state", "description": "The state where the company is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_country": {"name": "property_country", "description": "The country where the company is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_annualrevenue": {"name": "property_annualrevenue", "description": "The actual or estimated annual revenue of the company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`company`", "created_at": 1696434198.488606}, "source.hubspot_source.hubspot.company_property_history": {"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "company_property_history", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.company_property_history", "fqn": ["hubspot_source", "hubspot", "company_property_history"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "company_property_history", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a change to company record in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_id": {"name": "company_id", "description": "The ID of the related company record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the field being changed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source": {"name": "source", "description": "The source (reason) of the change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_id": {"name": "source_id", "description": "The ID of the object that caused the change, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "The timestamp the changed occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "value": {"name": "value", "description": "The new value of the field.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`company_property_history`", "created_at": 1696434198.488941}, "source.hubspot_source.hubspot.contact": {"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "contact", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.contact", "fqn": ["hubspot_source", "hubspot", "contact"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "contact", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 84, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents a contact in Hubspot.", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean indicating whether a record has been deleted in Hubspot and/or inferred deleted in Hubspot by Fivetran; _fivetran_deleted and is_deleted fields are equivalent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_email_1": {"name": "property_email_1", "description": "The email address of the contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_company": {"name": "property_company", "description": "The name of the contact's company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_firstname": {"name": "property_firstname", "description": "The contact's first name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_lastname": {"name": "property_lastname", "description": "The contact's last name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_email": {"name": "property_email", "description": "The contact's email.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_createdate": {"name": "property_createdate", "description": "The date that the contact was created in your HubSpot account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_jobtitle": {"name": "property_jobtitle", "description": "The contact's job title.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_annualrevenue": {"name": "property_annualrevenue", "description": "The contact's annual company revenue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_hs_calculated_merged_vids": {"name": "property_hs_calculated_merged_vids", "description": "List of mappings representing contact IDs that have been merged into the contact at hand. Format: <merged_contact_id>:<merged_at_in_epoch_time>;<second_merged_contact_id>:<merged_at_in_epoch_time> This field has replaced the `CONTACT_MERGE_AUDIT` table, which was deprecated by the Hubspot v3 CRM API.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`contact`", "created_at": 1696434198.4896069}, "source.hubspot_source.hubspot.contact_form_submission": {"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "contact_form_submission", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.contact_form_submission", "fqn": ["hubspot_source", "hubspot", "contact_form_submission"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "contact_form_submission", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table containing contact form submission information", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "conversion_id": {"name": "conversion_id", "description": "A Unique ID for the specific form conversion.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "form_id": {"name": "form_id", "description": "The GUID of the form that the submission belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "page_url": {"name": "page_url", "description": "The URL that the form was submitted on, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "A Unix timestamp in milliseconds of the time the submission occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "title": {"name": "title", "description": "The title of the page that the form was submitted on. This will default to the name of the form if no title is provided.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`contact_form_submission`", "created_at": 1696434198.489912}, "source.hubspot_source.hubspot.contact_list": {"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "contact_list", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.contact_list", "fqn": ["hubspot_source", "hubspot", "contact_list"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "contact_list", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a contact list in Hubspot.", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean indicating whether a record has been deleted in Hubspot and/or inferred deleted in Hubspot by Fivetran; _fivetran_deleted and is_deleted fields are equivalent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "A timestamp of the time the list was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deleteable": {"name": "deleteable", "description": "If this is false, this is a system list and cannot be deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dynamic": {"name": "dynamic", "description": "Whether the contact list is dynamic.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the contact list.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata_error": {"name": "metadata_error", "description": "Any errors that happened the last time the list was processed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata_last_processing_state_change_at": {"name": "metadata_last_processing_state_change_at", "description": "A timestamp of the last time that the processing state changed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata_last_size_change_at": {"name": "metadata_last_size_change_at", "description": "A timestamp of the last time that the size of the list changed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata_processing": {"name": "metadata_processing", "description": "One of DONE, REFRESHING, INITIALIZING, or PROCESSING.\nDONE indicates the list has finished processing, any other value indicates that list membership is being evaluated.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata_size": {"name": "metadata_size", "description": "The approximate number of contacts in the list.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the contact list.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "A timestamp of the time that the list was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`contact_list`", "created_at": 1696434198.490259}, "source.hubspot_source.hubspot.contact_list_member": {"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "contact_list_member", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.contact_list_member", "fqn": ["hubspot_source", "hubspot", "contact_list_member"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "contact_list_member", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a 'link' between a contact and a contact list.", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean indicating whether a record has been deleted in Hubspot and/or inferred deleted in Hubspot by Fivetran; _fivetran_deleted and is_deleted fields are equivalent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "added_at": {"name": "added_at", "description": "The timestamp a contact was added to a list.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_list_id": {"name": "contact_list_id", "description": "The ID of the related contact list.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`contact_list_member`", "created_at": 1696434198.490709}, "source.hubspot_source.hubspot.contact_property_history": {"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "contact_property_history", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.contact_property_history", "fqn": ["hubspot_source", "hubspot", "contact_property_history"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "contact_property_history", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 84, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents a change to contact record in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the field being changed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source": {"name": "source", "description": "The source (reason) of the change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_id": {"name": "source_id", "description": "The ID of the object that caused the change, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "The timestamp the changed occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "value": {"name": "value", "description": "The new value of the field.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`contact_property_history`", "created_at": 1696434198.491036}, "source.hubspot_source.hubspot.deal": {"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "deal", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.deal", "fqn": ["hubspot_source", "hubspot", "deal"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "deal", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a deal in Hubspot.", "columns": {"deal_id": {"name": "deal_id", "description": "The ID of the deal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Whether the record was deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_pipeline_id": {"name": "deal_pipeline_id", "description": "The ID of the deal's pipeline.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_pipeline_stage_id": {"name": "deal_pipeline_stage_id", "description": "The ID of the deal's pipeline stage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "The ID of the deal's owner.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_dealname": {"name": "property_dealname", "description": "The name you have given this deal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_description": {"name": "property_description", "description": "A brief description of the deal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_amount": {"name": "property_amount", "description": "The total value of the deal in the deal's currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_closedate": {"name": "property_closedate", "description": "The day the deal is expected to close, or was closed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_createdate": {"name": "property_createdate", "description": "The date the deal was created. This property is set automatically by HubSpot.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`deal`", "created_at": 1696434198.4913652}, "source.hubspot_source.hubspot.deal_stage": {"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "deal_stage", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.deal_stage", "fqn": ["hubspot_source", "hubspot", "deal_stage"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "deal_stage", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a deal stage.", "columns": {"_fivetran_active": {"name": "_fivetran_active", "description": "Boolean indicating whether the deal stage is active.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_end": {"name": "_fivetran_end", "description": "The Fivetran calculated exist time of the deal stage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_start": {"name": "_fivetran_start", "description": "The date the deal stage was entered.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_entered": {"name": "date_entered", "description": "The timestamp the deal stage was entered.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_id": {"name": "deal_id", "description": "Reference to the deal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source": {"name": "source", "description": "The relevant source of the deal stage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_id": {"name": "source_id", "description": "Reference to the source.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "value": {"name": "value", "description": "The value of the deal stage. Typically the name of the stage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`deal_stage`", "created_at": 1696434198.491787}, "source.hubspot_source.hubspot.deal_company": {"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "deal_company", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.deal_company", "fqn": ["hubspot_source", "hubspot", "deal_company"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "deal_company", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a 'link' between a deal and company.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_id": {"name": "company_id", "description": "The ID of the company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_id": {"name": "deal_id", "description": "The ID of the deal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type_id": {"name": "type_id", "description": "The ID of the type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`deal_company`", "created_at": 1696434198.492091}, "source.hubspot_source.hubspot.deal_contact": {"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "deal_contact", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.deal_contact", "fqn": ["hubspot_source", "hubspot", "deal_contact"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "deal_contact", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a 'link' between a deal and a contact.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_id": {"name": "deal_id", "description": "The ID of the deal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type_id": {"name": "type_id", "description": "The ID of the type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`deal_contact`", "created_at": 1696434198.492396}, "source.hubspot_source.hubspot.deal_pipeline": {"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "deal_pipeline", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.deal_pipeline", "fqn": ["hubspot_source", "hubspot", "deal_pipeline"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "deal_pipeline", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a pipeline in Hubspot.", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean indicating whether a record has been deleted in Hubspot and/or inferred deleted in Hubspot by Fivetran; _fivetran_deleted and is_deleted fields are equivalent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active": {"name": "active", "description": "Whether the stage is currently in use.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "display_order": {"name": "display_order", "description": "Used to determine the order in which the pipelines appear when viewed in HubSpot.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "label": {"name": "label", "description": "The human-readable label for the pipeline. The label is used when showing the pipeline in HubSpot.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pipeline_id": {"name": "pipeline_id", "description": "The ID of the pipeline.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "A timestamp representing when the record was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "A timestamp representing when the record was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`deal_pipeline`", "created_at": 1696434198.492714}, "source.hubspot_source.hubspot.deal_pipeline_stage": {"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "deal_pipeline_stage", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.deal_pipeline_stage", "fqn": ["hubspot_source", "hubspot", "deal_pipeline_stage"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "deal_pipeline_stage", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a pipeline stage in Hubspot.", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean indicating whether a record has been deleted in Hubspot and/or inferred deleted in Hubspot by Fivetran; _fivetran_deleted and is_deleted fields are equivalent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active": {"name": "active", "description": "Whether the pipeline stage is currently in use.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "closed_won": {"name": "closed_won", "description": "Whether the stage represents a Closed Won deal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "display_order": {"name": "display_order", "description": "Used to determine the order in which the stages appear when viewed in HubSpot.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "label": {"name": "label", "description": "The human-readable label for the stage. The label is used when showing the stage in HubSpot.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pipeline_id": {"name": "pipeline_id", "description": "The ID of the related pipeline.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "probability": {"name": "probability", "description": "The probability that the deal will close. Used for the deal forecast.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stage_id": {"name": "stage_id", "description": "The ID of the pipeline stage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "A timestamp representing when the record was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "A timestamp representing when the record was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`deal_pipeline_stage`", "created_at": 1696434198.4930408}, "source.hubspot_source.hubspot.deal_property_history": {"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "deal_property_history", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.deal_property_history", "fqn": ["hubspot_source", "hubspot", "deal_property_history"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "deal_property_history", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a change to deal record in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_id": {"name": "deal_id", "description": "The ID of the related deal record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the field being changed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source": {"name": "source", "description": "The source (reason) of the change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_id": {"name": "source_id", "description": "The ID of the object that caused the change, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "The timestamp the changed occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "value": {"name": "value", "description": "The new value of the field.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`deal_property_history`", "created_at": 1696434198.493357}, "source.hubspot_source.hubspot.email_subscription": {"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "email_subscription", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.email_subscription", "fqn": ["hubspot_source", "hubspot", "email_subscription"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "email_subscription", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents an email subscription in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active": {"name": "active", "description": "Whether the subscription is active.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "The description of the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the email subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the email subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`email_subscription`", "created_at": 1696434198.4980218}, "source.hubspot_source.hubspot.email_subscription_change": {"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "email_subscription_change", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.email_subscription_change", "fqn": ["hubspot_source", "hubspot", "email_subscription_change"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "email_subscription_change", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a change to an email subscription in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "caused_by_event_id": {"name": "caused_by_event_id", "description": "The ID of the event that caused the subscription change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change": {"name": "change", "description": "The change which occurred. This enumeration is specific to the 'changeType'; see below for the possible values.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_type": {"name": "change_type", "description": "The type of change which occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_subscription_id": {"name": "email_subscription_id", "description": "The ID of the related email subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "recipient": {"name": "recipient", "description": "The email address of the related contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source": {"name": "source", "description": "The source of the subscription change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "The timestamp when this change occurred. If 'causedByEvent' is present, this will be absent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`email_subscription_change`", "created_at": 1696434198.498314}, "source.hubspot_source.hubspot.engagement_email_cc": {"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "engagement_email_cc", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.engagement_email_cc", "fqn": ["hubspot_source", "hubspot", "engagement_email_cc"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "engagement_email_cc", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a CC'd email address as part of an EMAIL engagement.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "The email address of the recipient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the related engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "The first name of the recipient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "The last name of the recipient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`engagement_email_cc`", "created_at": 1696434198.500746}, "source.hubspot_source.hubspot.engagement_email_to": {"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "engagement_email_to", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.engagement_email_to", "fqn": ["hubspot_source", "hubspot", "engagement_email_to"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "engagement_email_to", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a TO email address as part of an EMAIL engagement.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "The email address of the recipient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the related engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "The first name of the recipient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "The last name of the recipient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`engagement_email_to`", "created_at": 1696434198.5010428}, "source.hubspot_source.hubspot.form": {"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "form", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.form", "fqn": ["hubspot_source", "hubspot", "form"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "form", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a Hubspot form.", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean indicating whether a record has been deleted in Hubspot and/or inferred deleted in Hubspot by Fivetran; _fivetran_deleted and is_deleted fields are equivalent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "A timestamp for when the form was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "css_class": {"name": "css_class", "description": "The CSS classes assigned to the form.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "follow_up_id": {"name": "follow_up_id", "description": "This field is no longer used.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "guid": {"name": "guid", "description": "The internal ID of the form.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lead_nurturing_campaign_id": {"name": "lead_nurturing_campaign_id", "description": "TBD", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "method": {"name": "method", "description": "This field is no longer used.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the form.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "notify_recipients": {"name": "notify_recipients", "description": "A comma-separated list of user IDs that should receive submission notifications.\nEmail addresses will be returned for individuals who aren't users.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "redirect": {"name": "redirect", "description": "The URL that the visitor will be redirected to after filling out the form.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "submit_text": {"name": "submit_text", "description": "The text used for the submit button.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "A timestamp for when the form was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`form`", "created_at": 1696434198.5022862}, "source.hubspot_source.hubspot.owner": {"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "owner", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.owner", "fqn": ["hubspot_source", "hubspot", "owner"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "owner", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents an owner/user in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "A timestamp for when the owner was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "The email address of the owner.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "The first name of the owner.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "The last name of the owner.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "The ID of the owner.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of owner.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "A timestamp for when the owner was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`owner`", "created_at": 1696434198.502602}}, "macros": {"macro.dbt_bigquery.date_sharded_table": {"name": "date_sharded_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.5769548, "supported_languages": null}, "macro.dbt_bigquery.grant_access_to": {"name": "grant_access_to", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.577555, "supported_languages": null}, "macro.dbt_bigquery.get_partitions_metadata": {"name": "get_partitions_metadata", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.57829, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog": {"name": "bigquery__get_catalog", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n  {%- if (schemas | length) == 0 -%}\n    {# Hopefully nothing cares about the columns we return when there are no rows #}\n    {%- set query  = \"select 1 as id limit 0\" -%}\n  {%- else -%}\n\n  {%- set query -%}\n    with tables as (\n        select\n            project_id as table_database,\n            dataset_id as table_schema,\n            table_id as original_table_name,\n\n            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,\n\n            row_count,\n            size_bytes as size_bytes,\n            case\n                when type = 1 then 'table'\n                when type = 2 then 'view'\n                else 'external'\n            end as table_type,\n\n            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,\n            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,\n            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name\n\n        from {{ information_schema.replace(information_schema_view='__TABLES__') }}\n        where (\n          {%- for schema in schemas -%}\n            upper(dataset_id) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n    ),\n\n    table_options as (\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            JSON_VALUE(option_value) as table_comment\n\n        from {{ information_schema.replace(information_schema_view='TABLE_OPTIONS') }}\n        where option_name = 'description'\n    ),\n    extracted as (\n\n        select *,\n            case\n                when is_date_shard then shard_base_name\n                else original_table_name\n            end as table_name\n\n        from tables\n\n    ),\n\n    unsharded_tables as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            coalesce(table_type, 'external') as table_type,\n            is_date_shard,\n\n            struct(\n                min(shard_name) as shard_min,\n                max(shard_name) as shard_max,\n                count(*) as shard_count\n            ) as table_shards,\n\n            sum(size_bytes) as size_bytes,\n            sum(row_count) as row_count,\n\n            max(relation_id) as relation_id\n\n        from extracted\n        group by 1,2,3,4,5\n\n    ),\n\n    info_schema_columns as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n\n            -- use the \"real\" column name from the paths query below\n            column_name as base_column_name,\n            ordinal_position as column_index,\n\n            is_partitioning_column,\n            clustering_ordinal_position\n\n        from {{ information_schema.replace(information_schema_view='COLUMNS') }}\n        where ordinal_position is not null\n\n    ),\n\n    info_schema_column_paths as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            field_path as column_name,\n            data_type as column_type,\n            column_name as base_column_name,\n            description as column_comment\n\n        from {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }}\n\n    ),\n\n    columns as (\n\n        select * except (base_column_name)\n        from info_schema_columns\n        join info_schema_column_paths using (relation_id, base_column_name)\n\n    ),\n\n    column_stats as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            max(relation_id) as relation_id,\n            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,\n            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,\n            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,\n            array_to_string(\n                array_agg(\n                    case\n                        when clustering_ordinal_position is not null then column_name\n                        else null\n                    end ignore nulls\n                    order by clustering_ordinal_position\n                ), ', '\n            ) as clustering_columns\n\n        from columns\n        group by 1,2,3\n\n    )\n\n    select\n        unsharded_tables.table_database,\n        unsharded_tables.table_schema,\n        case\n            when is_date_shard then concat(unsharded_tables.table_name, '*')\n            else unsharded_tables.table_name\n        end as table_name,\n        unsharded_tables.table_type,\n        table_options.table_comment,\n\n        -- coalesce name and type for External tables - these columns are not\n        -- present in the COLUMN_FIELD_PATHS resultset\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields -- BQ does\n        -- not treat these nested properties as independent fields\n        row_number() over (\n            partition by relation_id\n            order by columns.column_index, columns.column_name\n        ) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        columns.column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_shards.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_shards.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_shards.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        is_clustered as `stats__clustering_fields__include`\n\n    -- join using relation_id (an actual relation, not a shard prefix) to make\n    -- sure that column metadata is picked up through the join. This will only\n    -- return the column information for the \"max\" table in a date-sharded table set\n    from unsharded_tables\n    left join table_options using (relation_id)\n    left join columns using (relation_id)\n    left join column_stats using (relation_id)\n  {%- endset -%}\n\n  {%- endif -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.585771, "supported_languages": null}, "macro.dbt_bigquery.partition_by": {"name": "partition_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.time_ingestion_partitioning -%}\n        partition by {{ partition_config.render_wrapped() }}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.596511, "supported_languages": null}, "macro.dbt_bigquery.cluster_by": {"name": "cluster_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.5977972, "supported_languages": null}, "macro.dbt_bigquery.bigquery_options": {"name": "bigquery_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.598964, "supported_languages": null}, "macro.dbt_bigquery.bigquery_table_options": {"name": "bigquery_table_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.599688, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_table_as": {"name": "bigquery__create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- if partition_config.time_ingestion_partitioning -%}\n    {%- set columns = get_columns_with_types_in_query_sql(sql) -%}\n    {%- set table_dest_columns_csv = columns_without_partition_fields_csv(partition_config, columns) -%}\n    {%- set columns = '(' ~ table_dest_columns_csv ~ ')' -%}\n    {%- endif -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n      {%- set contract_config = config.get('contract') -%}\n      {%- if contract_config.enforced -%}\n        {{ get_assert_columns_equivalent(compiled_code) }}\n        {{ get_table_columns_and_constraints() }}\n        {%- set compiled_code = get_select_subquery(compiled_code) %}\n      {% else %}\n        {#-- cannot do contracts at the same time as time ingestion partitioning -#}\n        {{ columns }}\n      {% endif %}\n    {{ partition_by(partition_config) }}\n    {{ cluster_by(raw_cluster_by) }}\n\n    {{ bigquery_table_options(config, model, temporary) }}\n\n    {#-- PARTITION BY cannot be used with the AS query_statement clause.\n         https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#partition_expression\n    -#}\n    {%- if not partition_config.time_ingestion_partitioning %}\n    as (\n      {{ compiled_code }}\n    );\n    {%- endif %}\n  {%- elif language == 'python' -%}\n    {#--\n    N.B. Python models _can_ write to temp views HOWEVER they use a different session\n    and have already expired by the time they need to be used (I.E. in merges for incremental models)\n\n    TODO: Deep dive into spark sessions to see if we can reuse a single session for an entire\n    dbt invocation.\n     --#}\n\n    {#-- when a user wants to change the schema of an existing relation, they must intentionally drop the table in the dataset --#}\n    {%- set old_relation = adapter.get_relation(database=relation.database, schema=relation.schema, identifier=relation.identifier) -%}\n    {%- if (old_relation.is_table and (should_full_refresh())) -%}\n      {% do adapter.drop_relation(relation) %}\n    {%- endif -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation.quote(database=False, schema=False, identifier=False)) }}\n  {%- else -%}\n    {% do exceptions.raise_compiler_error(\"bigquery__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options", "macro.dbt.should_full_refresh", "macro.dbt_bigquery.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.604637, "supported_languages": null}, "macro.dbt_bigquery.bigquery_view_options": {"name": "bigquery_view_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.605303, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_view_as": {"name": "bigquery__create_view_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  as {{ sql }};\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.606539, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_schema": {"name": "bigquery__drop_schema", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.6069021, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_relation": {"name": "bigquery__drop_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n  {% call statement('drop_relation') -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.607431, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"name": "bigquery__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.607838, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"name": "bigquery__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.608234, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_schemas": {"name": "bigquery__list_schemas", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.608639, "supported_languages": null}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"name": "bigquery__check_schema_exists", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.60911, "supported_languages": null}, "macro.dbt_bigquery.bigquery__persist_docs": {"name": "bigquery__persist_docs", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.609828, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"name": "bigquery__alter_column_comment", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.6102982, "supported_languages": null}, "macro.dbt_bigquery.bigquery__rename_relation": {"name": "bigquery__rename_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.610742, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"name": "bigquery__alter_relation_add_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.61175, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"name": "bigquery__alter_relation_drop_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.6126988, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_type": {"name": "bigquery__alter_column_type", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.614748, "supported_languages": null}, "macro.dbt_bigquery.bigquery__test_unique": {"name": "bigquery__test_unique", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__test_unique", "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n\n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.615145, "supported_languages": null}, "macro.dbt_bigquery.bigquery__upload_file": {"name": "bigquery__upload_file", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__upload_file", "macro_sql": "{% macro bigquery__upload_file(local_file_path, database, table_schema, table_name) %}\n\n  {{ log(\"kwargs: \" ~ kwargs) }}\n\n  {% do adapter.upload_file(local_file_path, database, table_schema, table_name, kwargs=kwargs) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.6157818, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_csv_table": {"name": "bigquery__create_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.6164842, "supported_languages": null}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"name": "bigquery__reset_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.6168692, "supported_languages": null}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"name": "bigquery__load_csv_rows", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n\n  {% call statement() %}\n    alter table {{ this.render() }} set {{ bigquery_table_options(config, model) }}\n  {% endcall %}\n\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.618526, "supported_languages": null}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"name": "bigquery__handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.6197162, "supported_languages": null}, "macro.dbt_bigquery.materialization_view_bigquery": {"name": "materialization_view_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    -- grab current tables grants config for comparision later on\n    {% set grant_config = config.get('grants') %}\n\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.621332, "supported_languages": ["sql"]}, "macro.dbt_bigquery.materialization_table_bigquery": {"name": "materialization_table_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery', supported_languages=['sql', 'python']-%}\n\n  {%- set language = model['language'] -%}\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n\n  -- build model\n  {%- call statement('main', language=language) -%}\n    {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.627677, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation) %}\nfrom pyspark.sql import SparkSession\n\nspark = SparkSession.builder.appName('smallTest').getOrCreate()\n\nspark.conf.set(\"viewsEnabled\",\"true\")\nspark.conf.set(\"temporaryGcsBucket\",\"{{target.gcs_bucket}}\")\n\n{{ compiled_code }}\ndbt = dbtObj(spark.read.format(\"bigquery\").load)\ndf = model(dbt, spark)\n\n# COMMAND ----------\n# this is materialization code dbt generated, please do not modify\n\nimport pyspark\n# make sure pandas exists before using it\ntry:\n  import pandas\n  pandas_available = True\nexcept ImportError:\n  pandas_available = False\n\n# make sure pyspark.pandas exists before using it\ntry:\n  import pyspark.pandas\n  pyspark_pandas_api_available = True\nexcept ImportError:\n  pyspark_pandas_api_available = False\n\n# make sure databricks.koalas exists before using it\ntry:\n  import databricks.koalas\n  koalas_available = True\nexcept ImportError:\n  koalas_available = False\n\n# preferentially convert pandas DataFrames to pandas-on-Spark or Koalas DataFrames first\n# since they know how to convert pandas DataFrames better than `spark.createDataFrame(df)`\n# and converting from pandas-on-Spark to Spark DataFrame has no overhead\nif pyspark_pandas_api_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = pyspark.pandas.frame.DataFrame(df)\nelif koalas_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = databricks.koalas.frame.DataFrame(df)\n\n# convert to pyspark.sql.dataframe.DataFrame\nif isinstance(df, pyspark.sql.dataframe.DataFrame):\n  pass  # since it is already a Spark DataFrame\nelif pyspark_pandas_api_available and isinstance(df, pyspark.pandas.frame.DataFrame):\n  df = df.to_spark()\nelif koalas_available and isinstance(df, databricks.koalas.frame.DataFrame):\n  df = df.to_spark()\nelif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = spark.createDataFrame(df)\nelse:\n  msg = f\"{type(df)} is not a supported type for dbt Python materialization\"\n  raise Exception(msg)\n\ndf.write \\\n  .mode(\"overwrite\") \\\n  .format(\"bigquery\") \\\n  .option(\"writeMethod\", \"direct\").option(\"writeDisposition\", 'WRITE_TRUNCATE') \\\n  .save(\"{{target_relation}}\")\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.6282618, "supported_languages": null}, "macro.dbt_bigquery.materialization_copy_bigquery": {"name": "materialization_copy_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(*ref_table)) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {%- do apply_grants(target_relation, grant_config) -%}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.631205, "supported_languages": ["sql"]}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"name": "dbt_bigquery_validate_get_incremental_strategy", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\") or 'merge' -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.6352189, "supported_languages": null}, "macro.dbt_bigquery.source_sql_with_partition": {"name": "source_sql_with_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.source_sql_with_partition", "macro_sql": "{% macro source_sql_with_partition(partition_by, source_sql) %}\n\n  {%- if partition_by.time_ingestion_partitioning %}\n    {{ return(wrap_with_time_ingestion_partitioning_sql(partition_by, source_sql, False))  }}\n  {% else %}\n    {{ return(source_sql)  }}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.635991, "supported_languages": null}, "macro.dbt_bigquery.bq_create_table_as": {"name": "bq_create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_create_table_as", "macro_sql": "{% macro bq_create_table_as(partition_by, temporary, relation, compiled_code, language='sql') %}\n  {%- set _dbt_max_partition = declare_dbt_max_partition(this, partition_by, compiled_code, language) -%}\n  {% if partition_by.time_ingestion_partitioning and language == 'python' %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models do not support ingestion time partitioning\"\n    ) %}\n  {% elif partition_by.time_ingestion_partitioning and language == 'sql' %}\n    {#-- Create the table before inserting data as ingestion time partitioned tables can't be created with the transformed data --#}\n    {% do run_query(create_table_as(temporary, relation, compiled_code)) %}\n    {{ return(_dbt_max_partition + bq_insert_into_ingestion_time_partitioned_table_sql(relation, compiled_code)) }}\n  {% else %}\n    {{ return(_dbt_max_partition + create_table_as(temporary, relation, compiled_code, language)) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.run_query", "macro.dbt.create_table_as", "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.637793, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"name": "bq_generate_incremental_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions, incremental_predicates\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set build_sql = bq_generate_incremental_insert_overwrite_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n\n    {% set build_sql = bq_generate_incremental_merge_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n    ) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.639272, "supported_languages": null}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"name": "materialization_incremental_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery', supported_languages=['sql', 'python'] -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] %}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n  {% set incremental_predicates = config.get('predicates', default=none) or config.get('incremental_predicates', default=none) %}\n\n   -- grab current tables grants config for comparison later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if partition_by.copy_partitions is true and strategy != 'insert_overwrite' %} {#-- We can't copy partitions with merge strategy --#}\n        {% set wrong_strategy_msg -%}\n        The 'copy_partitions' option requires the 'incremental_strategy' option to be set to 'insert_overwrite'.\n        {%- endset %}\n        {% do exceptions.raise_compiler_error(wrong_strategy_msg) %}\n\n  {% elif existing_relation is none %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% else %}\n    {%- if language == 'python' and strategy == 'insert_overwrite' -%}\n      {#-- This lets us move forward assuming no python will be directly templated into a query --#}\n      {%- set python_unsupported_msg -%}\n        The 'insert_overwrite' strategy is not yet supported for python models.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(python_unsupported_msg) %}\n    {%- endif -%}\n\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' or language == 'python' %}\n      {#-- Check first, since otherwise we may not build a temp table --#}\n      {#-- Python always needs to create a temp table --#}\n      {%- call statement('create_tmp_relation', language=language) -%}\n        {{ bq_create_table_as(partition_by, True, tmp_relation, compiled_code, language) }}\n      {%- endcall -%}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {#--  Add time ingestion pseudo column to destination column as not part of the 'schema' but still need it for actual data insertion --#}\n    {% if partition_by.time_ingestion_partitioning %}\n      {% set dest_columns = adapter.add_time_ingestion_partition_column(partition_by, dest_columns) %}\n    {% endif %}\n\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, compiled_code, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, partition_by.copy_partitions, incremental_predicates\n    ) %}\n\n    {%- call statement('main') -%}\n      {{ build_sql }}\n    {% endcall %}\n\n    {%- if language == 'python' and tmp_relation -%}\n      {{ adapter.drop_relation(tmp_relation) }}\n    {%- endif -%}\n\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.650021, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"name": "bigquery__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.6514251, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_columns": {"name": "bigquery__create_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.651794, "supported_languages": null}, "macro.dbt_bigquery.bigquery__post_snapshot": {"name": "bigquery__post_snapshot", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.652121, "supported_languages": null}, "macro.dbt_bigquery.bigquery__can_clone_table": {"name": "bigquery__can_clone_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__can_clone_table", "macro_sql": "{% macro bigquery__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.652541, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_or_replace_clone": {"name": "bigquery__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_or_replace_clone", "macro_sql": "{% macro bigquery__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n      table {{ this_relation }}\n      clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.652858, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql": {"name": "bq_generate_incremental_merge_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/merge.sql", "original_file_path": "macros/materializations/incremental_strategy/merge.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql", "macro_sql": "{% macro bq_generate_incremental_merge_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n) %}\n    {%- set source_sql -%}\n        {%- if tmp_relation_exists -%}\n        (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n        )\n        {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n            {%- if partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n            {%- else -%}\n            {{sql}}\n            {%- endif %}\n        )\n        {%- endif -%}\n    {%- endset -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns, incremental_predicates) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.6547189, "supported_languages": null}, "macro.dbt_bigquery.declare_dbt_max_partition": {"name": "declare_dbt_max_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/common.sql", "original_file_path": "macros/materializations/incremental_strategy/common.sql", "unique_id": "macro.dbt_bigquery.declare_dbt_max_partition", "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, compiled_code, language='sql') %}\n\n  {#-- TODO: revisit partitioning with python models --#}\n  {%- if '_dbt_max_partition' in compiled_code and language == 'sql' -%}\n\n    declare _dbt_max_partition {{ partition_by.data_type_for_partition() }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.655659, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql": {"name": "bq_generate_incremental_insert_overwrite_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro_sql": "{% macro bq_generate_incremental_insert_overwrite_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n    {% if partition_by is none %}\n      {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.660161, "supported_languages": null}, "macro.dbt_bigquery.bq_copy_partitions": {"name": "bq_copy_partitions", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_copy_partitions", "macro_sql": "{% macro bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n\n  {% for partition in partitions %}\n    {% if partition_by.granularity == 'hour' %}\n      {% set partition = partition.strftime(\"%Y%m%d%H\") %}\n    {% elif partition_by.granularity == 'day' %}\n      {% set partition = partition.strftime(\"%Y%m%d\") %}\n    {% elif partition_by.granularity == 'month' %}\n      {% set partition = partition.strftime(\"%Y%m\") %}\n    {% elif partition_by.granularity == 'year' %}\n      {% set partition = partition.strftime(\"%Y\") %}\n    {% endif %}\n    {% set tmp_relation_partitioned = api.Relation.create(database=tmp_relation.database, schema=tmp_relation.schema, identifier=tmp_relation.table ~ '$' ~ partition, type=tmp_relation.type) %}\n    {% set target_relation_partitioned = api.Relation.create(database=target_relation.database, schema=target_relation.schema, identifier=target_relation.table ~ '$' ~ partition, type=target_relation.type) %}\n    {% do adapter.copy_table(tmp_relation_partitioned, target_relation_partitioned, \"table\") %}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.663028, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_overwrite_sql": {"name": "bq_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_insert_overwrite_sql", "macro_sql": "{% macro bq_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n  {% if partitions is not none and partitions != [] %} {# static #}\n      {{ bq_static_insert_overwrite_sql(tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else %} {# dynamic #}\n      {{ bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.6649752, "supported_languages": null}, "macro.dbt_bigquery.bq_static_insert_overwrite_sql": {"name": "bq_static_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro_sql": "{% macro bq_static_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {% if partition_by.time_ingestion_partitioning and tmp_relation_exists -%}\n          select\n            {{ partition_by.insertable_time_partitioning_field() }},\n            * from {{ tmp_relation }}\n          {% elif tmp_relation_exists -%}\n            select\n            * from {{ tmp_relation }}\n          {%- elif partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n          {%- else -%}\n            {{sql}}\n          {%- endif -%}\n\n        )\n      {%- endset -%}\n\n      {% if copy_partitions %}\n          {% do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n      {% else %}\n\n      {#-- In case we're putting the model SQL _directly_ into the MERGE statement,\n         we need to prepend the MERGE statement with the user-configured sql_header,\n         which may be needed to resolve that model SQL (e.g. referencing a variable or UDF in the header)\n         in the \"temporary table exists\" case, we save the model SQL result as a temp table first, wherein the\n         sql_header is included by the create_table_as macro.\n      #}\n      -- 1. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header = not tmp_relation_exists) }};\n\n      {%- if tmp_relation_exists -%}\n      -- 2. clean up the temp table\n      drop table if exists {{ tmp_relation }};\n      {%- endif -%}\n\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.bq_copy_partitions", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.6675892, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql": {"name": "bq_dynamic_copy_partitions_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_copy_partitions_insert_overwrite_sql(\n  tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions\n  ) %}\n  {# We run temp table creation in a separated script to move to partitions copy #}\n  {%- call statement('create_tmp_relation_for_copy', language='sql') -%}\n    {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql')\n  }}\n  {%- endcall %}\n  {%- set partitions_sql -%}\n    select distinct {{ partition_by.render_wrapped() }}\n    from {{ tmp_relation }}\n  {%- endset -%}\n  {%- set partitions = run_query(partitions_sql).columns[0].values() -%}\n  {# We copy the partitions #}\n  {%- do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) -%}\n  -- Clean up the temp table\n  drop table if exists {{ tmp_relation }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.run_query", "macro.dbt_bigquery.bq_copy_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.669387, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql": {"name": "bq_dynamic_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) %}\n  {%- if copy_partitions is true %}\n     {{ bq_dynamic_copy_partitions_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else -%}\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type_for_partition() }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n       -- 1. create a temp table with model data\n        {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql') }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n      {%- set partition_field = partition_by.time_partitioning_field() if partition_by.time_ingestion_partitioning else partition_by.render_wrapped() -%}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              -- IGNORE NULLS: this needs to be aligned to _dbt_max_partition, which ignores null\n              array_agg(distinct {{ partition_field }} IGNORE NULLS)\n          from {{ tmp_relation }}\n      );\n\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate]) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.672726, "supported_languages": null}, "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql": {"name": "wrap_with_time_ingestion_partitioning_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro_sql": "{% macro wrap_with_time_ingestion_partitioning_sql(partition_by, sql, is_nested) %}\n\n  select TIMESTAMP({{ partition_by.field }}) as {{ partition_by.insertable_time_partitioning_field() }}, * EXCEPT({{ partition_by.field }}) from (\n    {{ sql }}\n  ){%- if not is_nested -%};{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.675136, "supported_languages": null}, "macro.dbt_bigquery.get_quoted_with_types_csv": {"name": "get_quoted_with_types_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_quoted_with_types_csv", "macro_sql": "{% macro get_quoted_with_types_csv(columns) %}\n    {% set quoted = [] %}\n    {% for col in columns -%}\n        {%- do quoted.append(adapter.quote(col.name) ~ \" \" ~ col.data_type) -%}\n    {%- endfor %}\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.676091, "supported_languages": null}, "macro.dbt_bigquery.columns_without_partition_fields_csv": {"name": "columns_without_partition_fields_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro_sql": "{% macro columns_without_partition_fields_csv(partition_config, columns) -%}\n  {%- set columns_no_partition = partition_config.reject_partition_field_column(columns) -%}\n  {% set columns_names = get_quoted_with_types_csv(columns_no_partition) %}\n  {{ return(columns_names) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_quoted_with_types_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.676685, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql": {"name": "bq_insert_into_ingestion_time_partitioned_table_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql", "macro_sql": "{% macro bq_insert_into_ingestion_time_partitioned_table_sql(target_relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  {{ sql_header if sql_header is not none }}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set dest_columns_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n  insert into {{ target_relation }} ({{ partition_by.insertable_time_partitioning_field() }}, {{ dest_columns_csv }})\n    {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, False) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.6781702, "supported_languages": null}, "macro.dbt_bigquery.get_columns_with_types_in_query_sql": {"name": "get_columns_with_types_in_query_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro_sql": "{% macro get_columns_with_types_in_query_sql(select_sql) %}\n  {% set sql %}\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n    select * from (\n      {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n  {% endset %}\n  {{ return(adapter.get_columns_in_select_sql(sql)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.679046, "supported_languages": null}, "macro.dbt_bigquery.bigquery__except": {"name": "bigquery__except", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt_bigquery.bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.679332, "supported_languages": null}, "macro.dbt_bigquery.bigquery__dateadd": {"name": "bigquery__dateadd", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_bigquery.bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.679855, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp": {"name": "bigquery__current_timestamp", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  current_timestamp()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.680362, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"name": "bigquery__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.6813598, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp_backcompat": {"name": "bigquery__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp_backcompat", "macro_sql": "{% macro bigquery__current_timestamp_backcompat() -%}\n  current_timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.682293, "supported_languages": null}, "macro.dbt_bigquery.bigquery__intersect": {"name": "bigquery__intersect", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt_bigquery.bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.68328, "supported_languages": null}, "macro.dbt_bigquery.bigquery__escape_single_quotes": {"name": "bigquery__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_bigquery.bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.6838841, "supported_languages": null}, "macro.dbt_bigquery.bigquery__format_column": {"name": "bigquery__format_column", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__format_column", "macro_sql": "{% macro bigquery__format_column(column) -%}\n  {% set data_type = column.data_type %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.685915, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_empty_schema_sql": {"name": "bigquery__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_empty_schema_sql", "macro_sql": "{% macro bigquery__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {% for col in columns.values() %}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n\n    {%- set columns = adapter.nest_column_data_types(columns) -%}\n    {{ return(dbt.default__get_empty_schema_sql(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.687527, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_select_subquery": {"name": "bigquery__get_select_subquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_select_subquery", "macro_sql": "{% macro bigquery__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.687986, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_column_names": {"name": "bigquery__get_column_names", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_column_names", "macro_sql": "{% macro bigquery__get_column_names() %}\n  {#- loop through nested user_provided_columns to get column names -#}\n    {%- set user_provided_columns = adapter.nest_column_data_types(model['columns']) -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.689298, "supported_languages": null}, "macro.dbt_bigquery.bigquery__right": {"name": "bigquery__right", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_bigquery.bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.689936, "supported_languages": null}, "macro.dbt_bigquery.bigquery__listagg": {"name": "bigquery__listagg", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_bigquery.bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.6911, "supported_languages": null}, "macro.dbt_bigquery.bigquery__datediff": {"name": "bigquery__datediff", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_bigquery.bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n  {% if dbt_version[0] == 1 and dbt_version[2] >= 2 %}\n    {{ return(dbt.datediff(first_date, second_date, datepart)) }}\n  {% else %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.6924758, "supported_languages": null}, "macro.dbt_bigquery.bigquery__safe_cast": {"name": "bigquery__safe_cast", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_bigquery.bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.692953, "supported_languages": null}, "macro.dbt_bigquery.bigquery__hash": {"name": "bigquery__hash", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt_bigquery.bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt.default__hash(field)}})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.6933901, "supported_languages": null}, "macro.dbt_bigquery.bigquery__position": {"name": "bigquery__position", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt_bigquery.bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.694031, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_concat": {"name": "bigquery__array_concat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.6944818, "supported_languages": null}, "macro.dbt_bigquery.bigquery__bool_or": {"name": "bigquery__bool_or", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_bigquery.bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n\n    logical_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.694844, "supported_languages": null}, "macro.dbt_bigquery.bigquery__split_part": {"name": "bigquery__split_part", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_bigquery.bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1 + {{ part_number }}\n        )]\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.6965408, "supported_languages": null}, "macro.dbt_bigquery.bigquery__date_trunc": {"name": "bigquery__date_trunc", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt_bigquery.bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.697506, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_construct": {"name": "bigquery__array_construct", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    [ {{ inputs|join(' , ') }} ]\n    {% else %}\n    ARRAY<{{data_type}}>[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.6986802, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_append": {"name": "bigquery__array_append", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.array_concat", "macro.dbt.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.699541, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_show_grant_sql": {"name": "bigquery__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_show_grant_sql", "macro_sql": "{% macro bigquery__get_show_grant_sql(relation) %}\n    {% set location = adapter.get_dataset_location(relation) %}\n    {% set relation = relation.incorporate(location=location) %}\n\n    select privilege_type, grantee\n    from {{ relation.information_schema(\"OBJECT_PRIVILEGES\") }}\n    where object_schema = \"{{ relation.dataset }}\"\n      and object_name = \"{{ relation.identifier }}\"\n      -- filter out current user\n      and split(grantee, ':')[offset(1)] != session_user()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.701359, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_grant_sql": {"name": "bigquery__get_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_grant_sql", "macro_sql": "\n\n\n{%- macro bigquery__get_grant_sql(relation, privilege, grantee) -%}\n    grant `{{ privilege }}` on {{ relation.type }} {{ relation }} to {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.7020328, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_revoke_sql": {"name": "bigquery__get_revoke_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_revoke_sql", "macro_sql": "{%- macro bigquery__get_revoke_sql(relation, privilege, grantee) -%}\n    revoke `{{ privilege }}` on {{ relation.type }} {{ relation }} from {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.702691, "supported_languages": null}, "macro.dbt_bigquery.bigquery__resolve_model_name": {"name": "bigquery__resolve_model_name", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt_bigquery.bigquery__resolve_model_name", "macro_sql": "{% macro bigquery__resolve_model_name(input_model_name) -%}\n    {{ input_model_name | string | replace('`', '') | replace('\"', '\\\"') }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.7033222, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.705873, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.7064068, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.7068071, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.707208, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.7076092, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.7084641, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.709297, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.710151, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.7111628, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.711894, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.719386, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.719882, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.720499, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.722385, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.72284, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.723304, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.727189, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.730805, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.7382798, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.73906, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.739521, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.7397802, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.740184, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.740629, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.741206, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.7438772, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.745565, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.7468128, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.74822, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.762608, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.7678368, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.768947, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.7697742, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.7708, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.7718122, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.7749429, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.776385, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.7781172, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.778738, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.780629, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.791743, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.7971358, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.7978702, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.800692, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.801444, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.80317, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.804759, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.8065972, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.8072262, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.807729, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.808507, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.809005, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.809783, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.8102882, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.811147, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.811777, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.812299, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.813117, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.8257642, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.8359559, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.839218, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.842488, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.8449888, "supported_languages": null}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.8547368, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.855792, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.8564632, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_materialized_view_as_sql(target_relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_materialized_view_as_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.859932, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.861127, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.863104, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "original_file_path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.8642108, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "original_file_path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.864626, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.86589, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.866417, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.867198, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.867575, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_as_sql": {"name": "get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "unique_id": "macro.dbt.get_replace_materialized_view_as_sql", "macro_sql": "{% macro get_replace_materialized_view_as_sql(relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {{- log('Applying REPLACE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_replace_materialized_view_as_sql', 'dbt')(relation, sql, existing_relation, backup_relation, intermediate_relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.868601, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_as_sql": {"name": "default__get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_as_sql", "macro_sql": "{% macro default__get_replace_materialized_view_as_sql(relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.869077, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.8699148, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.870313, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.8709178, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.87125, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.8721511, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation }} clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.8725288, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {{ create_or_replace_clone(target_relation, defer_relation) }}\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.8795571, "supported_languages": ["sql"]}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.881678, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.882016, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.883425, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.8838809, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.8842509, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.887352, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.888244, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.889035, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.894567, "supported_languages": ["sql"]}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.896065, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.896468, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.897443, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.8993359, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.900615, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.901332, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.901929, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.908833, "supported_languages": ["sql"]}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.909516, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.910012, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.9141278, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.915589, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.915977, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.916558, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.9189, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.927192, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.936691, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.9390998, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.9397602, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.941047, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.941566, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.9419389, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.942327, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.942655, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.9430861, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.943416, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.945318, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.946275, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.9498, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.950869, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.951893, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.953064, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.9537961, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.9546392, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.95567, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.956365, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.957197, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.957972, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.958598, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.9600089, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.964294, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.9660008, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.9667919, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.970273, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.9735591, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.9755, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.976119, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.976707, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.9769258, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.977718, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.978163, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.978786, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.979136, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.979769, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.9800599, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.980876, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.981313, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.981934, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.982155, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.9828212, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.9832041, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.983936, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.984311, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.9857779, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.986906, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.9877608, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.9882162, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.9889789, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.989559, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.9902542, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.990704, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.9913752, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.9918358, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.992522, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.992836, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.993612, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.993984, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.994636, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.994942, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.997673, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.998281, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.9987898, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.999233, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434193.99968, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.0001879, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.000654, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.0011468, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.001602, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.002034, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.002647, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.003051, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.00349, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.0038888, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.004607, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.004977, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.005619, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.0059159, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.0067441, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.0074492, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.007854, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.008995, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.0094452, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.0100539, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.010762, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.011123, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.012057, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.012724, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.0134451, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.013821, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.014699, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.01522, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.015674, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.0163462, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.0174232, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.017836, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.018229, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.018532, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.018995, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.0192199, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.0196748, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.020142, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.0219038, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.022294, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.022731, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.023822, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.0243359, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.0247161, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.025183, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.025562, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.030826, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.031598, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.0321212, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.033416, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.034189, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.0350149, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.03551, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.035954, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.03652, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.03732, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.038014, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.0394912, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.040117, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.0405262, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.041068, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.042167, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.043311, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.044401, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.045125, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.0485802, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.048945, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.049406, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.049728, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.050775, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.051332, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.0516632, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.0525608, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.053112, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.053752, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.0542889, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.05493, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.0567439, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.0572731, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.057954, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.0585752, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.061716, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.063651, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.064149, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.0647879, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.0652668, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.066126, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.067415, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.070424, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.0711691, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.071692, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.072133, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.072639, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.073308, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.073868, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.0748641, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.0753741, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.07583, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.0776331, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {%- if relation.is_table -%}\n            {{- drop_table(relation) -}}\n        {%- elif relation.is_view -%}\n            {{- drop_view(relation) -}}\n        {%- elif relation.is_materialized_view -%}\n            {{- drop_materialized_view(relation) -}}\n        {%- else -%}\n            drop {{ relation.type }} if exists {{ relation }} cascade\n        {%- endif -%}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.drop_table", "macro.dbt.drop_view", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.0788548, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n  {{ return(adapter.dispatch('drop_table', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.079347, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.079625, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n  {{ return(adapter.dispatch('drop_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.080079, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.080363, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n  {{ return(adapter.dispatch('drop_materialized_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.0808802, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.081158, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.08579, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.0866182, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.087457, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.0879738, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.0884721, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.088898, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      cast(null as {{ col['data_type'] }}) as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.0909781, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.091882, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.092376, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.0932748, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.0949068, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.096629, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.0973299, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.0995588, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.102706, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.103124, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.105247, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.1063318, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.107848, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.109057, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.109272, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.1104698, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.11113, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.112067, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.113284, "supported_languages": null}, "macro.hubspot_source.get_contact_columns": {"name": "get_contact_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_contact_columns.sql", "original_file_path": "macros/get_contact_columns.sql", "unique_id": "macro.hubspot_source.get_contact_columns", "macro_sql": "{% macro get_contact_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\", \"alias\": \"is_contact_deleted\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int(), \"alias\": \"contact_id\"},\n    {\"name\": \"property_hs_calculated_merged_vids\", \"datatype\": dbt.type_string(), \"alias\": \"calculated_merged_vids\"},\n    {\"name\": \"property_email\", \"datatype\": dbt.type_string(), \"alias\": \"email\"},\n    {\"name\": \"property_company\", \"datatype\": dbt.type_string(), \"alias\": \"contact_company\"},\n    {\"name\": \"property_firstname\", \"datatype\": dbt.type_string(), \"alias\": \"first_name\"},\n    {\"name\": \"property_lastname\", \"datatype\": dbt.type_string(), \"alias\": \"last_name\"},\n    {\"name\": \"property_createdate\", \"datatype\": dbt.type_timestamp(), \"alias\": \"created_at\"},\n    {\"name\": \"property_jobtitle\", \"datatype\": dbt.type_string(), \"alias\": \"job_title\"},\n    {\"name\": \"property_annualrevenue\", \"datatype\": dbt.type_int(), \"alias\": \"company_annual_revenue\"}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('hubspot__contact_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.11781, "supported_languages": null}, "macro.hubspot_source.get_email_event_open_columns": {"name": "get_email_event_open_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_email_event_open_columns.sql", "original_file_path": "macros/get_email_event_open_columns.sql", "unique_id": "macro.hubspot_source.get_email_event_open_columns", "macro_sql": "{% macro get_email_event_open_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"browser\", \"datatype\": dbt.type_string()},\n    {\"name\": \"duration\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ip_address\", \"datatype\": dbt.type_string()},\n    {\"name\": \"location\", \"datatype\": dbt.type_string()},\n    {\"name\": \"user_agent\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.120126, "supported_languages": null}, "macro.hubspot_source.get_email_event_spam_report_columns": {"name": "get_email_event_spam_report_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_email_event_spam_report_columns.sql", "original_file_path": "macros/get_email_event_spam_report_columns.sql", "unique_id": "macro.hubspot_source.get_email_event_spam_report_columns", "macro_sql": "{% macro get_email_event_spam_report_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ip_address\", \"datatype\": dbt.type_string()},\n    {\"name\": \"user_agent\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.121839, "supported_languages": null}, "macro.hubspot_source.get_email_event_bounce_columns": {"name": "get_email_event_bounce_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_email_event_bounce_columns.sql", "original_file_path": "macros/get_email_event_bounce_columns.sql", "unique_id": "macro.hubspot_source.get_email_event_bounce_columns", "macro_sql": "{% macro get_email_event_bounce_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"category\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"response\", \"datatype\": dbt.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.123562, "supported_languages": null}, "macro.hubspot_source.get_ticket_pipeline_stage_columns": {"name": "get_ticket_pipeline_stage_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_ticket_pipeline_stage_columns.sql", "original_file_path": "macros/get_ticket_pipeline_stage_columns.sql", "unique_id": "macro.hubspot_source.get_ticket_pipeline_stage_columns", "macro_sql": "{% macro get_ticket_pipeline_stage_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"active\", \"datatype\": \"boolean\"},\n    {\"name\": \"display_order\", \"datatype\": dbt.type_int()},\n    {\"name\": \"is_closed\", \"datatype\": \"boolean\"},\n    {\"name\": \"label\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pipeline_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stage_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ticket_state\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.127182, "supported_languages": null}, "macro.hubspot_source.get_company_columns": {"name": "get_company_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_company_columns.sql", "original_file_path": "macros/get_company_columns.sql", "unique_id": "macro.hubspot_source.get_company_columns", "macro_sql": "{% macro get_company_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int(), \"alias\": \"company_id\"},\n    {\"name\": \"is_deleted\", \"datatype\": \"boolean\", \"alias\": \"is_company_deleted\"},\n    {\"name\": \"property_name\", \"datatype\": dbt.type_string(), \"alias\": \"company_name\"},\n    {\"name\": \"property_description\", \"datatype\": dbt.type_string(), \"alias\": \"description\"},\n    {\"name\": \"property_createdate\", \"datatype\": dbt.type_timestamp(), \"alias\": \"created_at\"},\n    {\"name\": \"property_industry\", \"datatype\": dbt.type_string(), \"alias\": \"industry\"},\n    {\"name\": \"property_address\", \"datatype\": dbt.type_string(), \"alias\": \"street_address\"},\n    {\"name\": \"property_address_2\", \"datatype\": dbt.type_string(), \"alias\": \"street_address_2\"},\n    {\"name\": \"property_city\", \"datatype\": dbt.type_string(), \"alias\": \"city\"},\n    {\"name\": \"property_state\", \"datatype\": dbt.type_string(), \"alias\": \"state\"},\n    {\"name\": \"property_country\", \"datatype\": dbt.type_string(), \"alias\": \"country\"},\n    {\"name\": \"property_annualrevenue\", \"datatype\": dbt.type_int(), \"alias\": \"company_annual_revenue\"}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('hubspot__company_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.132271, "supported_languages": null}, "macro.hubspot_source.get_ticket_deal_columns": {"name": "get_ticket_deal_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_ticket_deal_columns.sql", "original_file_path": "macros/get_ticket_deal_columns.sql", "unique_id": "macro.hubspot_source.get_ticket_deal_columns", "macro_sql": "{% macro get_ticket_deal_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"ticket_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"deal_id\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.133621, "supported_languages": null}, "macro.hubspot_source.get_ticket_pipeline_columns": {"name": "get_ticket_pipeline_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_ticket_pipeline_columns.sql", "original_file_path": "macros/get_ticket_pipeline_columns.sql", "unique_id": "macro.hubspot_source.get_ticket_pipeline_columns", "macro_sql": "{% macro get_ticket_pipeline_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"active\", \"datatype\": \"boolean\"},\n    {\"name\": \"display_order\", \"datatype\": dbt.type_int()},\n    {\"name\": \"label\", \"datatype\": dbt.type_string()},\n    {\"name\": \"object_type_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pipeline_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.136262, "supported_languages": null}, "macro.hubspot_source.get_email_event_dropped_columns": {"name": "get_email_event_dropped_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_email_event_dropped_columns.sql", "original_file_path": "macros/get_email_event_dropped_columns.sql", "unique_id": "macro.hubspot_source.get_email_event_dropped_columns", "macro_sql": "{% macro get_email_event_dropped_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"bcc\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cc\", \"datatype\": dbt.type_string()},\n    {\"name\": \"drop_message\", \"datatype\": dbt.type_string()},\n    {\"name\": \"drop_reason\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"reply_to\", \"datatype\": dbt.type_string()},\n    {\"name\": \"subject\", \"datatype\": dbt.type_string()}\n] %}\n\n{% if target.type == 'snowflake' %}\n {{ columns.append({\"name\": \"FROM\", \"datatype\": dbt.type_string(), \"quote\": True, \"alias\": \"from_email\"}) }}\n{% else %}\n {{ columns.append({\"name\": \"from\", \"datatype\": dbt.type_string(), \"quote\": True, \"alias\": \"from_email\"}) }}\n{% endif %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.140052, "supported_languages": null}, "macro.hubspot_source.get_engagement_email_columns": {"name": "get_engagement_email_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_engagement_email_columns.sql", "original_file_path": "macros/get_engagement_email_columns.sql", "unique_id": "macro.hubspot_source.get_engagement_email_columns", "macro_sql": "{% macro get_engagement_email_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string(), \"alias\": \"engagement_type\"},\n    {\"name\": \"engagement_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"property_hs_createdate\", \"datatype\": dbt.type_timestamp(), \"alias\": \"created_timestamp\"},\n    {\"name\": \"property_hs_timestamp\", \"datatype\": dbt.type_timestamp(), \"alias\": \"occurred_timestamp\"},\n    {\"name\": \"property_hubspot_owner_id\", \"datatype\": dbt.type_int(), \"alias\": \"owner_id\"},\n    {\"name\": \"property_hubspot_team_id\", \"datatype\": dbt.type_int(), \"alias\": \"team_id\"}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_boolean", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.143351, "supported_languages": null}, "macro.hubspot_source.get_email_event_forward_columns": {"name": "get_email_event_forward_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_email_event_forward_columns.sql", "original_file_path": "macros/get_email_event_forward_columns.sql", "unique_id": "macro.hubspot_source.get_email_event_forward_columns", "macro_sql": "{% macro get_email_event_forward_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"browser\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ip_address\", \"datatype\": dbt.type_string()},\n    {\"name\": \"location\", \"datatype\": dbt.type_string()},\n    {\"name\": \"user_agent\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.145491, "supported_languages": null}, "macro.hubspot_source.get_deal_pipeline_columns": {"name": "get_deal_pipeline_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_deal_pipeline_columns.sql", "original_file_path": "macros/get_deal_pipeline_columns.sql", "unique_id": "macro.hubspot_source.get_deal_pipeline_columns", "macro_sql": "{% macro get_deal_pipeline_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"active\", \"datatype\": \"boolean\"},\n    {\"name\": \"display_order\", \"datatype\": dbt.type_int()},\n    {\"name\": \"label\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pipeline_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.147938, "supported_languages": null}, "macro.hubspot_source.get_email_event_click_columns": {"name": "get_email_event_click_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_email_event_click_columns.sql", "original_file_path": "macros/get_email_event_click_columns.sql", "unique_id": "macro.hubspot_source.get_email_event_click_columns", "macro_sql": "{% macro get_email_event_click_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"browser\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ip_address\", \"datatype\": dbt.type_string()},\n    {\"name\": \"location\", \"datatype\": dbt.type_string()},\n    {\"name\": \"referer\", \"datatype\": dbt.type_string()},\n    {\"name\": \"url\", \"datatype\": dbt.type_string()},\n    {\"name\": \"user_agent\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.15059, "supported_languages": null}, "macro.hubspot_source.get_email_event_deferred_columns": {"name": "get_email_event_deferred_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_email_event_deferred_columns.sql", "original_file_path": "macros/get_email_event_deferred_columns.sql", "unique_id": "macro.hubspot_source.get_email_event_deferred_columns", "macro_sql": "{% macro get_email_event_deferred_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"attempt\", \"datatype\": dbt.type_int()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"response\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.152192, "supported_languages": null}, "macro.hubspot_source.get_deal_columns": {"name": "get_deal_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_deal_columns.sql", "original_file_path": "macros/get_deal_columns.sql", "unique_id": "macro.hubspot_source.get_deal_columns", "macro_sql": "{% macro get_deal_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"deal_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"deal_pipeline_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"deal_pipeline_stage_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"is_deleted\", \"datatype\": \"boolean\", \"alias\": \"is_deal_deleted\"},\n    {\"name\": \"owner_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"portal_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"property_dealname\", \"datatype\": dbt.type_string(), \"alias\": \"deal_name\"},\n    {\"name\": \"property_description\", \"datatype\": dbt.type_string(), \"alias\": \"description\"},\n    {\"name\": \"property_amount\", \"datatype\": dbt.type_int(), \"alias\": \"amount\"},\n    {\"name\": \"property_closedate\", \"datatype\": dbt.type_timestamp(), \"alias\": \"closed_at\"},\n    {\"name\": \"property_createdate\", \"datatype\": dbt.type_timestamp(), \"alias\": \"created_at\"}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('hubspot__deal_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.156377, "supported_languages": null}, "macro.hubspot_source.get_engagement_columns": {"name": "get_engagement_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_engagement_columns.sql", "original_file_path": "macros/get_engagement_columns.sql", "unique_id": "macro.hubspot_source.get_engagement_columns", "macro_sql": "{% macro get_engagement_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"active\", \"datatype\": \"boolean\", \"alias\": \"is_active\"},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp(), \"alias\": \"created_timestamp\"},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"owner_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"portal_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"timestamp\", \"datatype\": dbt.type_timestamp(), \"alias\": \"occurred_timestamp\"},\n    {\"name\": \"type\", \"datatype\": dbt.type_string(), \"alias\": \"engagement_type\"}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.159256, "supported_languages": null}, "macro.hubspot_source.get_engagement_contact_columns": {"name": "get_engagement_contact_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_engagement_contact_columns.sql", "original_file_path": "macros/get_engagement_contact_columns.sql", "unique_id": "macro.hubspot_source.get_engagement_contact_columns", "macro_sql": "{% macro get_engagement_contact_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"contact_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"engagement_id\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.160835, "supported_languages": null}, "macro.hubspot_source.get_email_event_columns": {"name": "get_email_event_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_email_event_columns.sql", "original_file_path": "macros/get_email_event_columns.sql", "unique_id": "macro.hubspot_source.get_email_event_columns", "macro_sql": "{% macro get_email_event_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"app_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"caused_by_created\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"caused_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"email_campaign_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"filtered_event\", \"datatype\": \"boolean\"},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"obsoleted_by_created\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"obsoleted_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"portal_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"recipient\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sent_by_created\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"sent_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.165836, "supported_languages": null}, "macro.hubspot_source.get_contact_merge_audit_columns": {"name": "get_contact_merge_audit_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_contact_merge_audit_columns.sql", "original_file_path": "macros/get_contact_merge_audit_columns.sql", "unique_id": "macro.hubspot_source.get_contact_merge_audit_columns", "macro_sql": "{% macro get_contact_merge_audit_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"canonical_vid\", \"datatype\": dbt.type_int()},\n    {\"name\": \"contact_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"entity_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"first_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"last_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"num_properties_moved\", \"datatype\": dbt.type_int()},\n    {\"name\": \"timestamp\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"user_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"vid_to_merge\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.1688802, "supported_languages": null}, "macro.hubspot_source.get_engagement_company_columns": {"name": "get_engagement_company_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_engagement_company_columns.sql", "original_file_path": "macros/get_engagement_company_columns.sql", "unique_id": "macro.hubspot_source.get_engagement_company_columns", "macro_sql": "{% macro get_engagement_company_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"company_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"engagement_id\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.17019, "supported_languages": null}, "macro.hubspot_source.get_deal_pipeline_stage_columns": {"name": "get_deal_pipeline_stage_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_deal_pipeline_stage_columns.sql", "original_file_path": "macros/get_deal_pipeline_stage_columns.sql", "unique_id": "macro.hubspot_source.get_deal_pipeline_stage_columns", "macro_sql": "{% macro get_deal_pipeline_stage_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"active\", \"datatype\": \"boolean\"},\n    {\"name\": \"closed_won\", \"datatype\": \"boolean\"},\n    {\"name\": \"display_order\", \"datatype\": dbt.type_int()},\n    {\"name\": \"label\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pipeline_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"probability\", \"datatype\": dbt.type_float()},\n    {\"name\": \"stage_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.173194, "supported_languages": null}, "macro.hubspot_source.get_email_campaign_columns": {"name": "get_email_campaign_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_email_campaign_columns.sql", "original_file_path": "macros/get_email_campaign_columns.sql", "unique_id": "macro.hubspot_source.get_email_campaign_columns", "macro_sql": "{% macro get_email_campaign_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"app_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"app_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"content_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"num_included\", \"datatype\": dbt.type_int()},\n    {\"name\": \"num_queued\", \"datatype\": dbt.type_int()},\n    {\"name\": \"sub_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"subject\", \"datatype\": dbt.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.176446, "supported_languages": null}, "macro.hubspot_source.get_email_event_sent_columns": {"name": "get_email_event_sent_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_email_event_sent_columns.sql", "original_file_path": "macros/get_email_event_sent_columns.sql", "unique_id": "macro.hubspot_source.get_email_event_sent_columns", "macro_sql": "{% macro get_email_event_sent_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"bcc\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cc\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"reply_to\", \"datatype\": dbt.type_string()},\n    {\"name\": \"subject\", \"datatype\": dbt.type_string()}\n] %}\n\n{% if target.type == 'snowflake' %}\n {{ columns.append({\"name\": \"FROM\", \"datatype\": dbt.type_string(), \"quote\": True, \"alias\": \"from_email\"}) }}\n{% else %}\n {{ columns.append({\"name\": \"from\", \"datatype\": dbt.type_string(), \"quote\": True, \"alias\": \"from_email\"}) }}\n{% endif %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.179683, "supported_languages": null}, "macro.hubspot_source.get_deal_stage_columns": {"name": "get_deal_stage_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_deal_stage_columns.sql", "original_file_path": "macros/get_deal_stage_columns.sql", "unique_id": "macro.hubspot_source.get_deal_stage_columns", "macro_sql": "{% macro get_deal_stage_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_active\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_end\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_start\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"date_entered\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"deal_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"source\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"value\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.1822872, "supported_languages": null}, "macro.hubspot_source.get_contact_list_columns": {"name": "get_contact_list_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_contact_list_columns.sql", "original_file_path": "macros/get_contact_list_columns.sql", "unique_id": "macro.hubspot_source.get_contact_list_columns", "macro_sql": "{% macro get_contact_list_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"deleteable\", \"datatype\": \"boolean\"},\n    {\"name\": \"dynamic\", \"datatype\": \"boolean\"},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"metadata_error\", \"datatype\": dbt.type_string()},\n    {\"name\": \"metadata_last_processing_state_change_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"metadata_last_size_change_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"metadata_processing\", \"datatype\": dbt.type_string()},\n    {\"name\": \"metadata_size\", \"datatype\": dbt.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"portal_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.1862242, "supported_languages": null}, "macro.hubspot_source.get_ticket_property_history_columns": {"name": "get_ticket_property_history_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_ticket_property_history_columns.sql", "original_file_path": "macros/get_ticket_property_history_columns.sql", "unique_id": "macro.hubspot_source.get_ticket_property_history_columns", "macro_sql": "{% macro get_ticket_property_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_start\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"ticket_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string(), \"alias\": \"field_name\"},\n    {\"name\": \"source\", \"datatype\": dbt.type_string(), \"alias\": \"change_source\"},\n    {\"name\": \"source_id\", \"datatype\": dbt.type_string(), \"alias\": \"change_source_id\"},\n    {\"name\": \"timestamp_instant\", \"datatype\": dbt.type_timestamp(), \"alias\": \"change_timestamp\"},\n    {\"name\": \"value\", \"datatype\": dbt.type_string(), \"alias\": \"new_value\"}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.1891499, "supported_languages": null}, "macro.hubspot_source.get_owner_columns": {"name": "get_owner_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_owner_columns.sql", "original_file_path": "macros/get_owner_columns.sql", "unique_id": "macro.hubspot_source.get_owner_columns", "macro_sql": "{% macro get_owner_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"email\", \"datatype\": dbt.type_string()},\n    {\"name\": \"first_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"last_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"owner_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"portal_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.1919801, "supported_languages": null}, "macro.hubspot_source.get_engagement_deal_columns": {"name": "get_engagement_deal_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_engagement_deal_columns.sql", "original_file_path": "macros/get_engagement_deal_columns.sql", "unique_id": "macro.hubspot_source.get_engagement_deal_columns", "macro_sql": "{% macro get_engagement_deal_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"deal_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"engagement_id\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.194203, "supported_languages": null}, "macro.hubspot_source.get_email_event_status_change_columns": {"name": "get_email_event_status_change_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_email_event_status_change_columns.sql", "original_file_path": "macros/get_email_event_status_change_columns.sql", "unique_id": "macro.hubspot_source.get_email_event_status_change_columns", "macro_sql": "{% macro get_email_event_status_change_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"bounced\", \"datatype\": \"boolean\"},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"portal_subscription_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"requested_by\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source\", \"datatype\": dbt.type_string()},\n    {\"name\": \"subscriptions\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.196602, "supported_languages": null}, "macro.hubspot_source.get_deal_contact_columns": {"name": "get_deal_contact_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_deal_contact_columns.sql", "original_file_path": "macros/get_deal_contact_columns.sql", "unique_id": "macro.hubspot_source.get_deal_contact_columns", "macro_sql": "{% macro get_deal_contact_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"deal_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"contact_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"type_id\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.198244, "supported_languages": null}, "macro.hubspot_source.get_engagement_task_columns": {"name": "get_engagement_task_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_engagement_task_columns.sql", "original_file_path": "macros/get_engagement_task_columns.sql", "unique_id": "macro.hubspot_source.get_engagement_task_columns", "macro_sql": "{% macro get_engagement_task_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"engagement_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string(), \"alias\": \"engagement_type\"},\n    {\"name\": \"property_hs_createdate\", \"datatype\": dbt.type_timestamp(), \"alias\": \"created_timestamp\"},\n    {\"name\": \"property_hs_timestamp\", \"datatype\": dbt.type_timestamp(), \"alias\": \"occurred_timestamp\"},\n    {\"name\": \"property_hubspot_owner_id\", \"datatype\": dbt.type_int(), \"alias\": \"owner_id\"},\n    {\"name\": \"property_hubspot_team_id\", \"datatype\": dbt.type_int(), \"alias\": \"team_id\"}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_boolean", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.201362, "supported_languages": null}, "macro.hubspot_source.get_ticket_contact_columns": {"name": "get_ticket_contact_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_ticket_contact_columns.sql", "original_file_path": "macros/get_ticket_contact_columns.sql", "unique_id": "macro.hubspot_source.get_ticket_contact_columns", "macro_sql": "{% macro get_ticket_contact_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"ticket_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"contact_id\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.203309, "supported_languages": null}, "macro.hubspot_source.get_ticket_company_columns": {"name": "get_ticket_company_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_ticket_company_columns.sql", "original_file_path": "macros/get_ticket_company_columns.sql", "unique_id": "macro.hubspot_source.get_ticket_company_columns", "macro_sql": "{% macro get_ticket_company_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"ticket_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"company_id\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.204617, "supported_languages": null}, "macro.hubspot_source.get_ticket_columns": {"name": "get_ticket_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_ticket_columns.sql", "original_file_path": "macros/get_ticket_columns.sql", "unique_id": "macro.hubspot_source.get_ticket_columns", "macro_sql": "{% macro get_ticket_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int(), \"alias\": \"ticket_id\"},\n    {\"name\": \"is_deleted\", \"datatype\": \"boolean\", \"alias\": \"is_ticket_deleted\"},\n    {\"name\": \"property_closed_date\", \"datatype\": dbt.type_timestamp(), \"alias\": \"closed_at\"},\n    {\"name\": \"property_createdate\", \"datatype\": dbt.type_timestamp(), \"alias\": \"created_at\"},\n    {\"name\": \"property_first_agent_reply_date\", \"datatype\": dbt.type_timestamp(), \"alias\": \"first_agent_reply_at\"},\n    {\"name\": \"property_hs_pipeline\", \"datatype\": dbt.type_string(), \"alias\": \"ticket_pipeline_id\"},\n    {\"name\": \"property_hs_pipeline_stage\", \"datatype\": dbt.type_string(), \"alias\": \"ticket_pipeline_stage_id\"},\n    {\"name\": \"property_hs_ticket_category\", \"datatype\": dbt.type_string(), \"alias\": \"ticket_category\"},\n    {\"name\": \"property_hs_ticket_priority\", \"datatype\": dbt.type_string(), \"alias\": \"ticket_priority\"},\n    {\"name\": \"property_hubspot_owner_id\", \"datatype\": dbt.type_int(), \"alias\": \"owner_id\"},\n    {\"name\": \"property_subject\", \"datatype\": dbt.type_string(), \"alias\": \"ticket_subject\"},\n    {\"name\": \"property_content\", \"datatype\": dbt.type_string(), \"alias\": \"ticket_content\"}  \n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('hubspot__ticket_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.2095308, "supported_languages": null}, "macro.hubspot_source.get_deal_company_columns": {"name": "get_deal_company_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_deal_company_columns.sql", "original_file_path": "macros/get_deal_company_columns.sql", "unique_id": "macro.hubspot_source.get_deal_company_columns", "macro_sql": "{% macro get_deal_company_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"deal_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"company_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"type_id\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.21103, "supported_languages": null}, "macro.hubspot_source.get_deal_property_history_columns": {"name": "get_deal_property_history_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_deal_property_history_columns.sql", "original_file_path": "macros/get_deal_property_history_columns.sql", "unique_id": "macro.hubspot_source.get_deal_property_history_columns", "macro_sql": "{% macro get_deal_property_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"deal_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"timestamp\", \"datatype\": dbt.type_timestamp(), \"alias\": \"change_timestamp\"},\n    {\"name\": \"value\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.213332, "supported_languages": null}, "macro.hubspot_source.get_ticket_engagement_columns": {"name": "get_ticket_engagement_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_ticket_engagement_columns.sql", "original_file_path": "macros/get_ticket_engagement_columns.sql", "unique_id": "macro.hubspot_source.get_ticket_engagement_columns", "macro_sql": "{% macro get_ticket_engagement_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"ticket_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"engagement_id\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.214669, "supported_languages": null}, "macro.hubspot_source.get_macro_columns": {"name": "get_macro_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_macro_columns.sql", "original_file_path": "macros/get_macro_columns.sql", "unique_id": "macro.hubspot_source.get_macro_columns", "macro_sql": "{%- macro get_macro_columns(get_column_macro) -%}\n\n    {%- set macro_column_names = [] -%}\n    {%- for col in get_column_macro -%}\n        {%- set macro_column_names = macro_column_names.append(col.name | upper if target.type == 'snowflake' else col.name) -%}\n    {%- endfor -%}\n\n{{ return(macro_column_names) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.215826, "supported_languages": null}, "macro.hubspot_source.get_company_property_history_columns": {"name": "get_company_property_history_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_company_property_history_columns.sql", "original_file_path": "macros/get_company_property_history_columns.sql", "unique_id": "macro.hubspot_source.get_company_property_history_columns", "macro_sql": "{% macro get_company_property_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"company_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"timestamp\", \"datatype\": dbt.type_timestamp(), \"alias\": \"change_timestamp\"},\n    {\"name\": \"value\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.2181172, "supported_languages": null}, "macro.hubspot_source.get_engagement_note_columns": {"name": "get_engagement_note_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_engagement_note_columns.sql", "original_file_path": "macros/get_engagement_note_columns.sql", "unique_id": "macro.hubspot_source.get_engagement_note_columns", "macro_sql": "{% macro get_engagement_note_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"body\", \"datatype\": dbt.type_string(), \"alias\": \"note\"},\n    {\"name\": \"type\", \"datatype\": dbt.type_string(), \"alias\": \"engagement_type\"},\n    {\"name\": \"engagement_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"property_hs_createdate\", \"datatype\": dbt.type_timestamp(), \"alias\": \"created_timestamp\"},\n    {\"name\": \"property_hs_timestamp\", \"datatype\": dbt.type_timestamp(), \"alias\": \"occurred_timestamp\"},\n    {\"name\": \"property_hubspot_owner_id\", \"datatype\": dbt.type_int(), \"alias\": \"owner_id\"},\n    {\"name\": \"property_hubspot_team_id\", \"datatype\": dbt.type_int(), \"alias\": \"team_id\"}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_boolean", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.221693, "supported_languages": null}, "macro.hubspot_source.get_engagement_meeting_columns": {"name": "get_engagement_meeting_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_engagement_meeting_columns.sql", "original_file_path": "macros/get_engagement_meeting_columns.sql", "unique_id": "macro.hubspot_source.get_engagement_meeting_columns", "macro_sql": "{% macro get_engagement_meeting_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string(), \"alias\": \"engagement_type\"},\n    {\"name\": \"engagement_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"property_hs_createdate\", \"datatype\": dbt.type_timestamp(), \"alias\": \"created_timestamp\"},\n    {\"name\": \"property_hs_timestamp\", \"datatype\": dbt.type_timestamp(), \"alias\": \"occurred_timestamp\"},\n    {\"name\": \"property_hubspot_owner_id\", \"datatype\": dbt.type_int(), \"alias\": \"owner_id\"},\n    {\"name\": \"property_hubspot_team_id\", \"datatype\": dbt.type_int(), \"alias\": \"team_id\"}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_boolean", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.2247, "supported_languages": null}, "macro.hubspot_source.get_contact_list_member_columns": {"name": "get_contact_list_member_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_contact_list_member_columns.sql", "original_file_path": "macros/get_contact_list_member_columns.sql", "unique_id": "macro.hubspot_source.get_contact_list_member_columns", "macro_sql": "{% macro get_contact_list_member_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"added_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"contact_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"contact_list_id\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.226589, "supported_languages": null}, "macro.hubspot_source.get_email_event_delivered_columns": {"name": "get_email_event_delivered_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_email_event_delivered_columns.sql", "original_file_path": "macros/get_email_event_delivered_columns.sql", "unique_id": "macro.hubspot_source.get_email_event_delivered_columns", "macro_sql": "{% macro get_email_event_delivered_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"response\", \"datatype\": dbt.type_string()},\n    {\"name\": \"smtp_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.228534, "supported_languages": null}, "macro.hubspot_source.get_contact_property_history_columns": {"name": "get_contact_property_history_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_contact_property_history_columns.sql", "original_file_path": "macros/get_contact_property_history_columns.sql", "unique_id": "macro.hubspot_source.get_contact_property_history_columns", "macro_sql": "{% macro get_contact_property_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"contact_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"timestamp\", \"datatype\": dbt.type_timestamp(), \"alias\": \"change_timestamp\"},\n    {\"name\": \"value\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.230983, "supported_languages": null}, "macro.hubspot_source.all_passthrough_column_check": {"name": "all_passthrough_column_check", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/all_passthrough_column_check.sql", "original_file_path": "macros/all_passthrough_column_check.sql", "unique_id": "macro.hubspot_source.all_passthrough_column_check", "macro_sql": "{% macro all_passthrough_column_check(relation, get_columns) %}\n\n{% set available_passthrough_columns = fivetran_utils.remove_prefix_from_columns(\n                columns=adapter.get_columns_in_relation(ref(relation)), \n                prefix='property_', exclude=get_macro_columns(get_columns)) \n            %}\n\n{{ return(available_passthrough_columns|length) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.remove_prefix_from_columns", "macro.hubspot_source.get_macro_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.232126, "supported_languages": null}, "macro.hubspot_source.get_email_event_print_columns": {"name": "get_email_event_print_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_email_event_print_columns.sql", "original_file_path": "macros/get_email_event_print_columns.sql", "unique_id": "macro.hubspot_source.get_email_event_print_columns", "macro_sql": "{% macro get_email_event_print_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"browser\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ip_address\", \"datatype\": dbt.type_string()},\n    {\"name\": \"location\", \"datatype\": dbt.type_string()},\n    {\"name\": \"user_agent\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.234099, "supported_languages": null}, "macro.hubspot_source.get_engagement_call_columns": {"name": "get_engagement_call_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_engagement_call_columns.sql", "original_file_path": "macros/get_engagement_call_columns.sql", "unique_id": "macro.hubspot_source.get_engagement_call_columns", "macro_sql": "{% macro get_engagement_call_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"engagement_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string(), \"alias\": \"engagement_type\"},\n    {\"name\": \"property_hs_createdate\", \"datatype\": dbt.type_timestamp(), \"alias\": \"created_timestamp\"},\n    {\"name\": \"property_hs_timestamp\", \"datatype\": dbt.type_timestamp(), \"alias\": \"occurred_timestamp\"},\n    {\"name\": \"property_hubspot_owner_id\", \"datatype\": dbt.type_int(), \"alias\": \"owner_id\"},\n    {\"name\": \"property_hubspot_team_id\", \"datatype\": dbt.type_int(), \"alias\": \"team_id\"}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_boolean", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.237066, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.237973, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.239213, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.240278, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.242191, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.2431831, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.244405, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.2470489, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.249977, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.2519062, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.255009, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.2565172, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.257426, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.259011, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.261546, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.2630022, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.2642822, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.2658298, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.2670772, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.2683032, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.269314, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.2708511, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.272968, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.274424, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.2761889, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.277387, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.278295, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.279252, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.280266, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.281686, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.283988, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.2858438, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.288194, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.2897348, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.292018, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.293151, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.2939332, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.30036, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.304409, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.305171, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.305624, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.3067572, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.307565, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.3084228, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.3094242, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.309939, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.311539, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.31361, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.315205, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.317049, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.3177412, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.318711, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.319648, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.3212202, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.322665, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.324296, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.325977, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.328327, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.33025, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.331437, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.332026, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.333579, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.3353732, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.338336, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.3397288, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.340744, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.3438342, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.348703, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.3528042, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.358171, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.359107, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.359551, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.3667, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.376161, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.376956, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.377614, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.379146, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.379702, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.380244, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.380838, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.381362, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.3818529, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.382887, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.383542, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.384458, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.3859599, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.3868659, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.387799, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.3920388, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.393271, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.395359, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.396818, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.3992739, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.4033878, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.405751, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.407989, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.4090738, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.4109938, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.4126358, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.414079, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.414612, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.4155421, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.41712, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.4182022, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.419882, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.421058, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.4214468, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.42191, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.422403, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.423585, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.425938, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.428224, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.428976, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.4311411, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.433391, "supported_languages": null}, "macro.spark_utils.get_tables": {"name": "get_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.get_tables", "macro_sql": "{% macro get_tables(table_regex_pattern='.*') %}\n\n  {% set tables = [] %}\n  {% for database in spark__list_schemas('not_used') %}\n    {% for table in spark__list_relations_without_caching(database[0]) %}\n      {% set db_tablename = database[0] ~ \".\" ~ table[1] %}\n      {% set is_match = modules.re.match(table_regex_pattern, db_tablename) %}\n      {% if is_match %}\n        {% call statement('table_detail', fetch_result=True) -%}\n          describe extended {{ db_tablename }}\n        {% endcall %}\n\n        {% set table_type = load_result('table_detail').table|reverse|selectattr(0, 'in', ('type', 'TYPE', 'Type'))|first %}\n        {% if table_type[1]|lower != 'view' %}\n          {{ tables.append(db_tablename) }}\n        {% endif %}\n      {% endif %}\n    {% endfor %}\n  {% endfor %}\n  {{ return(tables) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.4443111, "supported_languages": null}, "macro.spark_utils.get_delta_tables": {"name": "get_delta_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.get_delta_tables", "macro_sql": "{% macro get_delta_tables(table_regex_pattern='.*') %}\n\n  {% set delta_tables = [] %}\n  {% for db_tablename in get_tables(table_regex_pattern) %}\n    {% call statement('table_detail', fetch_result=True) -%}\n      describe extended {{ db_tablename }}\n    {% endcall %}\n\n    {% set table_type = load_result('table_detail').table|reverse|selectattr(0, 'in', ('provider', 'PROVIDER', 'Provider'))|first %}\n    {% if table_type[1]|lower == 'delta' %}\n      {{ delta_tables.append(db_tablename) }}\n    {% endif %}\n  {% endfor %}\n  {{ return(delta_tables) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_tables", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.4468212, "supported_languages": null}, "macro.spark_utils.get_statistic_columns": {"name": "get_statistic_columns", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.get_statistic_columns", "macro_sql": "{% macro get_statistic_columns(table) %}\n\n  {% call statement('input_columns', fetch_result=True) %}\n    SHOW COLUMNS IN {{ table }}\n  {% endcall %}\n  {% set input_columns = load_result('input_columns').table %}\n\n  {% set output_columns = [] %}\n  {% for column in input_columns %}\n    {% call statement('column_information', fetch_result=True) %}\n      DESCRIBE TABLE {{ table }} `{{ column[0] }}`\n    {% endcall %}\n    {% if not load_result('column_information').table[1][1].startswith('struct') and not load_result('column_information').table[1][1].startswith('array')  %}\n      {{ output_columns.append('`' ~ column[0] ~ '`') }}\n    {% endif %}\n  {% endfor %}\n  {{ return(output_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.4496331, "supported_languages": null}, "macro.spark_utils.spark_optimize_delta_tables": {"name": "spark_optimize_delta_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.spark_optimize_delta_tables", "macro_sql": "{% macro spark_optimize_delta_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_delta_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Optimizing \" ~ table) }}\n    {% do run_query(\"optimize \" ~ table) %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_delta_tables", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.4517372, "supported_languages": null}, "macro.spark_utils.spark_vacuum_delta_tables": {"name": "spark_vacuum_delta_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.spark_vacuum_delta_tables", "macro_sql": "{% macro spark_vacuum_delta_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_delta_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Vacuuming \" ~ table) }}\n    {% do run_query(\"vacuum \" ~ table) %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_delta_tables", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.453718, "supported_languages": null}, "macro.spark_utils.spark_analyze_tables": {"name": "spark_analyze_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.spark_analyze_tables", "macro_sql": "{% macro spark_analyze_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set columns = get_statistic_columns(table) | join(',') %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Analyzing \" ~ table) }}\n    {% if columns != '' %}\n      {% do run_query(\"analyze table \" ~ table ~ \" compute statistics for columns \" ~ columns) %}\n    {% endif %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_tables", "macro.spark_utils.get_statistic_columns", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.456251, "supported_languages": null}, "macro.spark_utils.spark__concat": {"name": "spark__concat", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/concat.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/concat.sql", "unique_id": "macro.spark_utils.spark__concat", "macro_sql": "{% macro spark__concat(fields) -%}\n    concat({{ fields|join(', ') }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.456769, "supported_languages": null}, "macro.spark_utils.spark__type_numeric": {"name": "spark__type_numeric", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/datatypes.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/datatypes.sql", "unique_id": "macro.spark_utils.spark__type_numeric", "macro_sql": "{% macro spark__type_numeric() %}\n    decimal(28, 6)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.45707, "supported_languages": null}, "macro.spark_utils.spark__dateadd": {"name": "spark__dateadd", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/dateadd.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/dateadd.sql", "unique_id": "macro.spark_utils.spark__dateadd", "macro_sql": "{% macro spark__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {%- set clock_component -%}\n        {# make sure the dates + timestamps are real, otherwise raise an error asap #}\n        to_unix_timestamp({{ spark_utils.assert_not_null('to_timestamp', from_date_or_timestamp) }})\n        - to_unix_timestamp({{ spark_utils.assert_not_null('date', from_date_or_timestamp) }})\n    {%- endset -%}\n\n    {%- if datepart in ['day', 'week'] -%}\n        \n        {%- set multiplier = 7 if datepart == 'week' else 1 -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                date_add(\n                    {{ spark_utils.assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ['month', 'quarter', 'year'] -%}\n    \n        {%- set multiplier -%} \n            {%- if datepart == 'month' -%} 1\n            {%- elif datepart == 'quarter' -%} 3\n            {%- elif datepart == 'year' -%} 12\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                add_months(\n                    {{ spark_utils.assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n    \n        {%- set multiplier -%} \n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            {{ spark_utils.assert_not_null('to_unix_timestamp', from_date_or_timestamp) }}\n            + cast({{interval}} * {{multiplier}} as int)\n        )\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro dateadd not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.464489, "supported_languages": null}, "macro.spark_utils.spark__datediff": {"name": "spark__datediff", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/datediff.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/datediff.sql", "unique_id": "macro.spark_utils.spark__datediff", "macro_sql": "{% macro spark__datediff(first_date, second_date, datepart) %}\n\n    {%- if datepart in ['day', 'week', 'month', 'quarter', 'year'] -%}\n    \n        {# make sure the dates are real, otherwise raise an error asap #}\n        {% set first_date = spark_utils.assert_not_null('date', first_date) %}\n        {% set second_date = spark_utils.assert_not_null('date', second_date) %}\n    \n    {%- endif -%}\n    \n    {%- if datepart == 'day' -%}\n    \n        datediff({{second_date}}, {{first_date}})\n    \n    {%- elif datepart == 'week' -%}\n    \n        case when {{first_date}} < {{second_date}}\n            then floor(datediff({{second_date}}, {{first_date}})/7)\n            else ceil(datediff({{second_date}}, {{first_date}})/7)\n            end\n        \n        -- did we cross a week boundary (Sunday)?\n        + case\n            when {{first_date}} < {{second_date}} and dayofweek({{second_date}}) < dayofweek({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofweek({{second_date}}) > dayofweek({{first_date}}) then -1\n            else 0 end\n\n    {%- elif datepart == 'month' -%}\n\n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}})))\n            else ceil(months_between(date({{second_date}}), date({{first_date}})))\n            end\n        \n        -- did we cross a month boundary?\n        + case\n            when {{first_date}} < {{second_date}} and dayofmonth({{second_date}}) < dayofmonth({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofmonth({{second_date}}) > dayofmonth({{first_date}}) then -1\n            else 0 end\n        \n    {%- elif datepart == 'quarter' -%}\n    \n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}}))/3)\n            else ceil(months_between(date({{second_date}}), date({{first_date}}))/3)\n            end\n        \n        -- did we cross a quarter boundary?\n        + case\n            when {{first_date}} < {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                < (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then 1\n            when {{first_date}} > {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                > (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then -1\n            else 0 end\n\n    {%- elif datepart == 'year' -%}\n    \n        year({{second_date}}) - year({{first_date}})\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n    \n        {%- set divisor -%} \n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        case when {{first_date}} < {{second_date}}\n            then ceil((\n                {# make sure the timestamps are real, otherwise raise an error asap #}\n                {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', second_date)) }}\n                - {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            else floor((\n                {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', second_date)) }}\n                - {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            end\n            \n            {% if datepart == 'millisecond' %}\n                + cast(date_format({{second_date}}, 'SSS') as int)\n                - cast(date_format({{first_date}}, 'SSS') as int)\n            {% endif %}\n            \n            {% if datepart == 'microsecond' %}    \n                {% set capture_str = '[0-9]{4}-[0-9]{2}-[0-9]{2}.[0-9]{2}:[0-9]{2}:[0-9]{2}.([0-9]{6})' %}\n                -- Spark doesn't really support microseconds, so this is a massive hack!\n                -- It will only work if the timestamp-string is of the format\n                -- 'yyyy-MM-dd-HH mm.ss.SSSSSS'\n                + cast(regexp_extract({{second_date}}, '{{capture_str}}', 1) as int)\n                - cast(regexp_extract({{first_date}}, '{{capture_str}}', 1) as int)    \n            {% endif %}\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro datediff not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.481256, "supported_languages": null}, "macro.spark_utils.spark__current_timestamp": {"name": "spark__current_timestamp", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "unique_id": "macro.spark_utils.spark__current_timestamp", "macro_sql": "{% macro spark__current_timestamp() %}\n    current_timestamp()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.481714, "supported_languages": null}, "macro.spark_utils.spark__current_timestamp_in_utc": {"name": "spark__current_timestamp_in_utc", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "unique_id": "macro.spark_utils.spark__current_timestamp_in_utc", "macro_sql": "{% macro spark__current_timestamp_in_utc() %}\n    unix_timestamp()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.4820101, "supported_languages": null}, "macro.spark_utils.spark__split_part": {"name": "spark__split_part", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/split_part.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/split_part.sql", "unique_id": "macro.spark_utils.spark__split_part", "macro_sql": "{% macro spark__split_part(string_text, delimiter_text, part_number) %}\n\n    {% set delimiter_expr %}\n    \n        -- escape if starts with a special character\n        case when regexp_extract({{ delimiter_text }}, '([^A-Za-z0-9])(.*)', 1) != '_'\n            then concat('\\\\', {{ delimiter_text }})\n            else {{ delimiter_text }} end\n    \n    {% endset %}\n\n    {% set split_part_expr %}\n    \n    split(\n        {{ string_text }},\n        {{ delimiter_expr }}\n        )[({{ part_number - 1 }})]\n    \n    {% endset %}\n    \n    {{ return(split_part_expr) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.4833689, "supported_languages": null}, "macro.spark_utils.spark__get_relations_by_pattern": {"name": "spark__get_relations_by_pattern", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_relations_by_pattern", "macro_sql": "{% macro spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n        show table extended in {{ schema_pattern }} like '{{ table_pattern }}'\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n    {%- set tbl_relations = [] -%}\n    {%- for row in table_list['table'] -%}\n        {%- set tbl_relation = api.Relation.create(\n            database=None,\n            schema=row[0],\n            identifier=row[1],\n            type=('view' if 'Type: VIEW' in row[3] else 'table')\n        ) -%}\n        {%- do tbl_relations.append(tbl_relation) -%}\n    {%- endfor -%}\n\n    {{ return(tbl_relations) }}\n    {%- else -%}\n    {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.486963, "supported_languages": null}, "macro.spark_utils.spark__get_relations_by_prefix": {"name": "spark__get_relations_by_prefix", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_relations_by_prefix", "macro_sql": "{% macro spark__get_relations_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {% set table_pattern = table_pattern ~ '*' %}\n    {{ return(spark_utils.spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.4878778, "supported_languages": null}, "macro.spark_utils.spark__get_tables_by_pattern": {"name": "spark__get_tables_by_pattern", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_tables_by_pattern", "macro_sql": "{% macro spark__get_tables_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(spark_utils.spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.488657, "supported_languages": null}, "macro.spark_utils.spark__get_tables_by_prefix": {"name": "spark__get_tables_by_prefix", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_tables_by_prefix", "macro_sql": "{% macro spark__get_tables_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(spark_utils.spark__get_relations_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.489405, "supported_languages": null}, "macro.spark_utils.assert_not_null": {"name": "assert_not_null", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/etc/assert_not_null.sql", "original_file_path": "macros/etc/assert_not_null.sql", "unique_id": "macro.spark_utils.assert_not_null", "macro_sql": "{% macro assert_not_null(function, arg) -%}\n  {{ return(adapter.dispatch('assert_not_null', 'spark_utils')(function, arg)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.spark_utils.default__assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.490242, "supported_languages": null}, "macro.spark_utils.default__assert_not_null": {"name": "default__assert_not_null", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/etc/assert_not_null.sql", "original_file_path": "macros/etc/assert_not_null.sql", "unique_id": "macro.spark_utils.default__assert_not_null", "macro_sql": "{% macro default__assert_not_null(function, arg) %}\n\n    coalesce({{function}}({{arg}}), nvl2({{function}}({{arg}}), assert_true({{function}}({{arg}}) is not null), null))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.4908879, "supported_languages": null}, "macro.spark_utils.spark__convert_timezone": {"name": "spark__convert_timezone", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/snowplow/convert_timezone.sql", "original_file_path": "macros/snowplow/convert_timezone.sql", "unique_id": "macro.spark_utils.spark__convert_timezone", "macro_sql": "{% macro spark__convert_timezone(in_tz, out_tz, in_timestamp) %}\n    from_utc_timestamp(to_utc_timestamp({{in_timestamp}}, {{in_tz}}), {{out_tz}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.49147, "supported_languages": null}, "macro.hubspot.engagements_joined": {"name": "engagements_joined", "resource_type": "macro", "package_name": "hubspot", "path": "macros/engagements_joined.sql", "original_file_path": "macros/engagements_joined.sql", "unique_id": "macro.hubspot.engagements_joined", "macro_sql": "{% macro engagements_joined(base_model) %}\n\nwith base as (\n\n    select *\n    from {{ base_model }}\n\n), engagements as (\n\n    select *\n    from {{ ref('hubspot__engagements') }}\n\n), joined as (\n\n    select \n        {{ dbt_utils.star(from=base_model, relation_alias=\"base\",except=[\"_fivetran_deleted\", \"created_timestamp\", \"occurred_timestamp\", \"owner_id\"]) }},\n        {% if fivetran_utils.enabled_vars(['hubspot_engagement_contact_enabled']) %} engagements.contact_ids, {% endif %}\n        {% if fivetran_utils.enabled_vars(['hubspot_engagement_deal_enabled']) %} engagements.deal_ids, {% endif %}\n        {% if fivetran_utils.enabled_vars(['hubspot_engagement_company_enabled']) %} engagements.company_ids, {% endif %}\n        coalesce(engagements.is_active, not base._fivetran_deleted) as is_active,\n        coalesce(engagements.created_timestamp, base.created_timestamp) as created_timestamp,\n        coalesce(engagements.occurred_timestamp, base.occurred_timestamp) as occurred_timestamp,\n        coalesce(engagements.owner_id, base.owner_id) as owner_id\n    from base\n    left join engagements\n        on base.engagement_id = engagements.engagement_id\n\n)\n\nselect *\nfrom joined\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.star", "macro.fivetran_utils.enabled_vars"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.493783, "supported_languages": null}, "macro.hubspot.email_events_joined": {"name": "email_events_joined", "resource_type": "macro", "package_name": "hubspot", "path": "macros/email_events_joined.sql", "original_file_path": "macros/email_events_joined.sql", "unique_id": "macro.hubspot.email_events_joined", "macro_sql": "{% macro email_events_joined(base_model) %}\n\nwith base as (\n\n    select *\n    from {{ base_model }}\n\n), events as (\n\n    select *\n    from {{ var('email_event') }}\n\n), contacts as (\n\n    select *\n    from {{ ref('int_hubspot__contact_merge_adjust') }} \n\n), events_joined as (\n\n    select \n        base.*,\n        events.created_timestamp,\n        events.email_campaign_id,\n        events.recipient_email_address,\n        events.sent_timestamp as email_send_timestamp,\n        events.sent_by_event_id as email_send_id\n    from base\n    left join events\n        using (event_id)\n\n), contacts_joined as (\n\n    select \n        events_joined.*,\n        contacts.contact_id,\n        coalesce(contacts.is_contact_deleted, false) as is_contact_deleted\n    from events_joined\n    left join contacts\n        on events_joined.recipient_email_address = contacts.email\n\n)\n\nselect *\nfrom contacts_joined\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.495478, "supported_languages": null}, "macro.hubspot.adjust_email_metrics": {"name": "adjust_email_metrics", "resource_type": "macro", "package_name": "hubspot", "path": "macros/adjust_email_metrics.sql", "original_file_path": "macros/adjust_email_metrics.sql", "unique_id": "macro.hubspot.adjust_email_metrics", "macro_sql": "{% macro adjust_email_metrics(base_ref, var_name) %}\n\n{% set base_cols = dbt_utils.get_filtered_columns_in_relation(ref(base_ref))|map('lower') %}\n\n{% set default_metrics = ['bounces', 'clicks', 'deferrals', 'deliveries', 'drops', 'forwards', 'opens', 'prints', 'spam_reports', 'unsubscribes'] %}\n{% set email_metrics = var(var_name, default_metrics)|map('lower') %}\n\n{# Only keep metrics found in the base ref #}\n{% set adjusted_cols = email_metrics|select('in', base_cols)|list %}\n\n{{ return(adjusted_cols) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.4979541, "supported_languages": null}, "macro.hubspot.engagements_aggregated": {"name": "engagements_aggregated", "resource_type": "macro", "package_name": "hubspot", "path": "macros/engagements_aggregated.sql", "original_file_path": "macros/engagements_aggregated.sql", "unique_id": "macro.hubspot.engagements_aggregated", "macro_sql": "{% macro engagements_aggregated(from_ref, primary_key) %}\n\n    select\n        {{ primary_key }},\n        count(case when engagement_type = 'NOTE' then {{ primary_key }} end) as count_engagement_notes,\n        count(case when engagement_type = 'TASK' then {{ primary_key }} end) as count_engagement_tasks,\n        count(case when engagement_type = 'CALL' then {{ primary_key }} end) as count_engagement_calls,\n        count(case when engagement_type = 'MEETING' then {{ primary_key }} end) as count_engagement_meetings,\n        count(case when engagement_type = 'EMAIL' then {{ primary_key }} end) as count_engagement_emails,\n        count(case when engagement_type = 'INCOMING_EMAIL' then {{ primary_key }} end) as count_engagement_incoming_emails,\n        count(case when engagement_type = 'FORWARDED_EMAIL' then {{ primary_key }} end) as count_engagement_forwarded_emails\n    from {{ from_ref }}\n    group by 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.499995, "supported_languages": null}, "macro.hubspot.engagement_metrics": {"name": "engagement_metrics", "resource_type": "macro", "package_name": "hubspot", "path": "macros/engagements_aggregated.sql", "original_file_path": "macros/engagements_aggregated.sql", "unique_id": "macro.hubspot.engagement_metrics", "macro_sql": "{% macro engagement_metrics() %}\n\n{% set metrics = [\n    'count_engagement_notes',\n    'count_engagement_tasks',\n    'count_engagement_calls',\n    'count_engagement_meetings',\n    'count_engagement_emails',\n    'count_engagement_incoming_emails',\n    'count_engagement_forwarded_emails'\n] %}\n\n{{ return(metrics) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.500992, "supported_languages": null}, "macro.hubspot.merge_contacts": {"name": "merge_contacts", "resource_type": "macro", "package_name": "hubspot", "path": "macros/merge_contacts.sql", "original_file_path": "macros/merge_contacts.sql", "unique_id": "macro.hubspot.merge_contacts", "macro_sql": "{% macro merge_contacts() -%}\n\n{{ adapter.dispatch('merge_contacts', 'hubspot') () }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.hubspot.default__merge_contacts"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.502211, "supported_languages": null}, "macro.hubspot.default__merge_contacts": {"name": "default__merge_contacts", "resource_type": "macro", "package_name": "hubspot", "path": "macros/merge_contacts.sql", "original_file_path": "macros/merge_contacts.sql", "unique_id": "macro.hubspot.default__merge_contacts", "macro_sql": "{% macro default__merge_contacts() %}\n{# bigquery  #}\n    select\n        contacts.contact_id,\n        split(merges, ':')[offset(0)] as vid_to_merge\n\n    from contacts\n    cross join \n        unnest(cast(split(calculated_merged_vids, \";\") as array<string>)) as merges\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.5025222, "supported_languages": null}, "macro.hubspot.snowflake__merge_contacts": {"name": "snowflake__merge_contacts", "resource_type": "macro", "package_name": "hubspot", "path": "macros/merge_contacts.sql", "original_file_path": "macros/merge_contacts.sql", "unique_id": "macro.hubspot.snowflake__merge_contacts", "macro_sql": "{% macro snowflake__merge_contacts() %}\n    select\n        contacts.contact_id,\n        split_part(merges.value, ':', 0) as vid_to_merge\n    \n    from contacts\n    cross join \n        table(flatten(STRTOK_TO_ARRAY(calculated_merged_vids, ';'))) as merges\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.502799, "supported_languages": null}, "macro.hubspot.redshift__merge_contacts": {"name": "redshift__merge_contacts", "resource_type": "macro", "package_name": "hubspot", "path": "macros/merge_contacts.sql", "original_file_path": "macros/merge_contacts.sql", "unique_id": "macro.hubspot.redshift__merge_contacts", "macro_sql": "{% macro redshift__merge_contacts() %}\n\tselect\n        unnest_vid_array.contact_id,\n        split_part(cast(vid_to_merge as {{ dbt.type_string() }}) ,':',1) as vid_to_merge\n    from (\n        select \n            contacts.contact_id,\n            split_to_array(calculated_merged_vids, ';') as super_calculated_merged_vids\n        from contacts\n    ) as unnest_vid_array, unnest_vid_array.super_calculated_merged_vids as vid_to_merge\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.503212, "supported_languages": null}, "macro.hubspot.postgres__merge_contacts": {"name": "postgres__merge_contacts", "resource_type": "macro", "package_name": "hubspot", "path": "macros/merge_contacts.sql", "original_file_path": "macros/merge_contacts.sql", "unique_id": "macro.hubspot.postgres__merge_contacts", "macro_sql": "{% macro postgres__merge_contacts() %}\n    select\n        contacts.contact_id,\n        split_part(merges, ':', 1) as vid_to_merge\n\n    from contacts\n    cross join \n        unnest(string_to_array(calculated_merged_vids, ';')) as merges\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.503493, "supported_languages": null}, "macro.hubspot.spark__merge_contacts": {"name": "spark__merge_contacts", "resource_type": "macro", "package_name": "hubspot", "path": "macros/merge_contacts.sql", "original_file_path": "macros/merge_contacts.sql", "unique_id": "macro.hubspot.spark__merge_contacts", "macro_sql": "{% macro spark__merge_contacts() %}\n{# databricks and spark #}\n    select\n        contacts.contact_id,\n        split_part(merges, ':', 1) as vid_to_merge\n    from contacts\n    cross join (\n        select \n            contact_id, \n            explode(split(calculated_merged_vids, ';')) as merges from contacts\n    ) as merges_subquery \n    where contacts.contact_id = merges_subquery.contact_id\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.503792, "supported_languages": null}, "macro.fivetran_utils.enabled_vars": {"name": "enabled_vars", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/enabled_vars.sql", "original_file_path": "macros/enabled_vars.sql", "unique_id": "macro.fivetran_utils.enabled_vars", "macro_sql": "{% macro enabled_vars(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, True) == False %}\n    {{ return(False) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(True) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.5051541, "supported_languages": null}, "macro.fivetran_utils.percentile": {"name": "percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.percentile", "macro_sql": "{% macro percentile(percentile_field, partition_field, percent) -%}\n\n{{ adapter.dispatch('percentile', 'fivetran_utils') (percentile_field, partition_field, percent) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__percentile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.507195, "supported_languages": null}, "macro.fivetran_utils.default__percentile": {"name": "default__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.default__percentile", "macro_sql": "{% macro default__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.507699, "supported_languages": null}, "macro.fivetran_utils.redshift__percentile": {"name": "redshift__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.redshift__percentile", "macro_sql": "{% macro redshift__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.508199, "supported_languages": null}, "macro.fivetran_utils.bigquery__percentile": {"name": "bigquery__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.bigquery__percentile", "macro_sql": "{% macro bigquery__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.508692, "supported_languages": null}, "macro.fivetran_utils.postgres__percentile": {"name": "postgres__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.postgres__percentile", "macro_sql": "{% macro postgres__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n    /* have to group by partition field */\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.509133, "supported_languages": null}, "macro.fivetran_utils.spark__percentile": {"name": "spark__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.spark__percentile", "macro_sql": "{% macro spark__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.50963, "supported_languages": null}, "macro.fivetran_utils.pivot_json_extract": {"name": "pivot_json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/pivot_json_extract.sql", "original_file_path": "macros/pivot_json_extract.sql", "unique_id": "macro.fivetran_utils.pivot_json_extract", "macro_sql": "{% macro pivot_json_extract(string, list_of_properties) %}\n\n{%- for property in list_of_properties -%}\n{%- if property is mapping -%}\nreplace( {{ fivetran_utils.json_extract(string, property.name) }}, '\"', '') as {{ property.alias if property.alias else property.name | replace(' ', '_') | replace('.', '_') | lower }}\n\n{%- else -%}\nreplace( {{ fivetran_utils.json_extract(string, property) }}, '\"', '') as {{ property | replace(' ', '_') | lower }}\n\n{%- endif -%}\n{%- if not loop.last -%},{%- endif %}\n{% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.json_extract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.511798, "supported_languages": null}, "macro.fivetran_utils.persist_pass_through_columns": {"name": "persist_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/persist_pass_through_columns.sql", "original_file_path": "macros/persist_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.persist_pass_through_columns", "macro_sql": "{% macro persist_pass_through_columns(pass_through_variable, identifier=none, transform='') %}\n\n{% if var(pass_through_variable, none) %}\n    {% for field in var(pass_through_variable) %}\n        , {{ transform ~ '(' ~ (identifier ~ '.' if identifier else '') ~ (field.alias if field.alias else field.name) ~ ')' }} as {{ field.alias if field.alias else field.name }}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.513727, "supported_languages": null}, "macro.fivetran_utils.json_parse": {"name": "json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.json_parse", "macro_sql": "{% macro json_parse(string, string_path) -%}\n\n{{ adapter.dispatch('json_parse', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__json_parse"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.5162911, "supported_languages": null}, "macro.fivetran_utils.default__json_parse": {"name": "default__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.default__json_parse", "macro_sql": "{% macro default__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.517045, "supported_languages": null}, "macro.fivetran_utils.redshift__json_parse": {"name": "redshift__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.redshift__json_parse", "macro_sql": "{% macro redshift__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.517814, "supported_languages": null}, "macro.fivetran_utils.bigquery__json_parse": {"name": "bigquery__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.bigquery__json_parse", "macro_sql": "{% macro bigquery__json_parse(string, string_path) %}\n\n \n  json_extract_scalar({{string}}, '$.{%- for s in string_path -%}{{ s }}{%- if not loop.last -%}.{%- endif -%}{%- endfor -%} ')\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.518494, "supported_languages": null}, "macro.fivetran_utils.postgres__json_parse": {"name": "postgres__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.postgres__json_parse", "macro_sql": "{% macro postgres__json_parse(string, string_path) %}\n\n  {{string}}::json #>> '{ {%- for s in string_path -%}{{ s }}{%- if not loop.last -%},{%- endif -%}{%- endfor -%} }'\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.519187, "supported_languages": null}, "macro.fivetran_utils.snowflake__json_parse": {"name": "snowflake__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.snowflake__json_parse", "macro_sql": "{% macro snowflake__json_parse(string, string_path) %}\n\n  parse_json( {{string}} ) {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.519967, "supported_languages": null}, "macro.fivetran_utils.spark__json_parse": {"name": "spark__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.spark__json_parse", "macro_sql": "{% macro spark__json_parse(string, string_path) %}\n\n  {{string}} : {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.5207198, "supported_languages": null}, "macro.fivetran_utils.max_bool": {"name": "max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.max_bool", "macro_sql": "{% macro max_bool(boolean_field) -%}\n\n{{ adapter.dispatch('max_bool', 'fivetran_utils') (boolean_field) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__max_bool"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.521524, "supported_languages": null}, "macro.fivetran_utils.default__max_bool": {"name": "default__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.default__max_bool", "macro_sql": "{% macro default__max_bool(boolean_field)  %}\n\n    bool_or( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.521822, "supported_languages": null}, "macro.fivetran_utils.snowflake__max_bool": {"name": "snowflake__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.snowflake__max_bool", "macro_sql": "{% macro snowflake__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.5221262, "supported_languages": null}, "macro.fivetran_utils.bigquery__max_bool": {"name": "bigquery__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.bigquery__max_bool", "macro_sql": "{% macro bigquery__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.5224152, "supported_languages": null}, "macro.fivetran_utils.calculated_fields": {"name": "calculated_fields", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/calculated_fields.sql", "original_file_path": "macros/calculated_fields.sql", "unique_id": "macro.fivetran_utils.calculated_fields", "macro_sql": "{% macro calculated_fields(variable) -%}\n\n{% if var(variable, none) %}\n    {% for field in var(variable) %}\n        , {{ field.transform_sql }} as {{ field.name }} \n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.523387, "supported_languages": null}, "macro.fivetran_utils.drop_schemas_automation": {"name": "drop_schemas_automation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/drop_schemas_automation.sql", "original_file_path": "macros/drop_schemas_automation.sql", "unique_id": "macro.fivetran_utils.drop_schemas_automation", "macro_sql": "{% macro drop_schemas_automation(drop_target_schema=true) %}\n    {{ return(adapter.dispatch('drop_schemas_automation', 'fivetran_utils')(drop_target_schema)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__drop_schemas_automation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.5248692, "supported_languages": null}, "macro.fivetran_utils.default__drop_schemas_automation": {"name": "default__drop_schemas_automation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/drop_schemas_automation.sql", "original_file_path": "macros/drop_schemas_automation.sql", "unique_id": "macro.fivetran_utils.default__drop_schemas_automation", "macro_sql": "{% macro default__drop_schemas_automation(drop_target_schema=true) %}\n\n{% set fetch_list_sql %}\n    {% if target.type not in ('databricks', 'spark') %}\n        select schema_name\n        from \n        {{ wrap_in_quotes(target.database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like '{{ target.schema | lower }}{%- if not drop_target_schema -%}_{%- endif -%}%'\n    {% else %}\n        SHOW SCHEMAS LIKE '{{ target.schema }}{%- if not drop_target_schema -%}_{%- endif -%}*'\n    {% endif %}\n{% endset %}\n\n{% set results = run_query(fetch_list_sql) %}\n\n{% if execute %}\n    {% set results_list = results.columns[0].values() %}\n{% else %}\n    {% set results_list = [] %}\n{% endif %}\n\n{% for schema_to_drop in results_list %}\n    {% do adapter.drop_schema(api.Relation.create(database=target.database, schema=schema_to_drop)) %}\n    {{ print('Schema ' ~ schema_to_drop ~ ' successfully dropped from the ' ~ target.database ~ ' database.\\n')}}\n{% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.wrap_in_quotes", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.528251, "supported_languages": null}, "macro.fivetran_utils.seed_data_helper": {"name": "seed_data_helper", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/seed_data_helper.sql", "original_file_path": "macros/seed_data_helper.sql", "unique_id": "macro.fivetran_utils.seed_data_helper", "macro_sql": "{% macro seed_data_helper(seed_name, warehouses) %}\n\n{% if target.type in warehouses %}\n    {% for w in warehouses %}\n        {% if target.type == w %}\n            {{ return(ref(seed_name ~ \"_\" ~ w ~ \"\")) }}\n        {% endif %}\n    {% endfor %}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.529942, "supported_languages": null}, "macro.fivetran_utils.fill_pass_through_columns": {"name": "fill_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_pass_through_columns.sql", "original_file_path": "macros/fill_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.fill_pass_through_columns", "macro_sql": "{% macro fill_pass_through_columns(pass_through_variable) %}\n\n{% if var(pass_through_variable) %}\n    {% for field in var(pass_through_variable) %}\n        {% if field is mapping %}\n            {% if field.transform_sql %}\n                , {{ field.transform_sql }} as {{ field.alias if field.alias else field.name }}\n            {% else %}\n                , {{ field.alias if field.alias else field.name }}\n            {% endif %}\n        {% else %}\n        , {{ field }}\n        {% endif %}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.532277, "supported_languages": null}, "macro.fivetran_utils.string_agg": {"name": "string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.string_agg", "macro_sql": "{% macro string_agg(field_to_agg, delimiter) -%}\n\n{{ adapter.dispatch('string_agg', 'fivetran_utils') (field_to_agg, delimiter) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__string_agg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.533428, "supported_languages": null}, "macro.fivetran_utils.default__string_agg": {"name": "default__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.default__string_agg", "macro_sql": "{% macro default__string_agg(field_to_agg, delimiter) %}\n    string_agg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.53399, "supported_languages": null}, "macro.fivetran_utils.snowflake__string_agg": {"name": "snowflake__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.snowflake__string_agg", "macro_sql": "{% macro snowflake__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.534388, "supported_languages": null}, "macro.fivetran_utils.redshift__string_agg": {"name": "redshift__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.redshift__string_agg", "macro_sql": "{% macro redshift__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.53476, "supported_languages": null}, "macro.fivetran_utils.spark__string_agg": {"name": "spark__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.spark__string_agg", "macro_sql": "{% macro spark__string_agg(field_to_agg, delimiter) %}\n    -- collect set will remove duplicates\n    replace(replace(replace(cast( collect_set({{ field_to_agg }}) as string), '[', ''), ']', ''), ', ', {{ delimiter }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.5351412, "supported_languages": null}, "macro.fivetran_utils.timestamp_diff": {"name": "timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.timestamp_diff", "macro_sql": "{% macro timestamp_diff(first_date, second_date, datepart) %}\n  {{ adapter.dispatch('timestamp_diff', 'fivetran_utils')(first_date, second_date, datepart) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__timestamp_diff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.5433018, "supported_languages": null}, "macro.fivetran_utils.default__timestamp_diff": {"name": "default__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.default__timestamp_diff", "macro_sql": "{% macro default__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.544791, "supported_languages": null}, "macro.fivetran_utils.redshift__timestamp_diff": {"name": "redshift__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.redshift__timestamp_diff", "macro_sql": "{% macro redshift__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.5458372, "supported_languages": null}, "macro.fivetran_utils.bigquery__timestamp_diff": {"name": "bigquery__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.bigquery__timestamp_diff", "macro_sql": "{% macro bigquery__timestamp_diff(first_date, second_date, datepart) %}\n\n    timestamp_diff(\n        {{second_date}},\n        {{first_date}},\n        {{datepart}}\n    )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.5467021, "supported_languages": null}, "macro.fivetran_utils.postgres__timestamp_diff": {"name": "postgres__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.postgres__timestamp_diff", "macro_sql": "{% macro postgres__timestamp_diff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.556521, "supported_languages": null}, "macro.fivetran_utils.try_cast": {"name": "try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.try_cast", "macro_sql": "{% macro try_cast(field, type) %}\n    {{ adapter.dispatch('try_cast', 'fivetran_utils') (field, type) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__try_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.559256, "supported_languages": null}, "macro.fivetran_utils.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.560004, "supported_languages": null}, "macro.fivetran_utils.redshift__try_cast": {"name": "redshift__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.redshift__try_cast", "macro_sql": "{% macro redshift__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when trim({{field}}) ~ '^(0|[1-9][0-9]*)$' then trim({{field}})\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.56111, "supported_languages": null}, "macro.fivetran_utils.postgres__try_cast": {"name": "postgres__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.postgres__try_cast", "macro_sql": "{% macro postgres__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar)) ~ '^(0|[1-9][0-9]*)$' \n        then replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar))\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.562166, "supported_languages": null}, "macro.fivetran_utils.snowflake__try_cast": {"name": "snowflake__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.snowflake__try_cast", "macro_sql": "{% macro snowflake__try_cast(field, type) %}\n    try_cast(cast({{field}} as varchar) as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.5626628, "supported_languages": null}, "macro.fivetran_utils.bigquery__try_cast": {"name": "bigquery__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.bigquery__try_cast", "macro_sql": "{% macro bigquery__try_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.563105, "supported_languages": null}, "macro.fivetran_utils.spark__try_cast": {"name": "spark__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.spark__try_cast", "macro_sql": "{% macro spark__try_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.563777, "supported_languages": null}, "macro.fivetran_utils.source_relation": {"name": "source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "unique_id": "macro.fivetran_utils.source_relation", "macro_sql": "{% macro source_relation(union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('source_relation', 'fivetran_utils') (union_schema_variable, union_database_variable) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__source_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.566987, "supported_languages": null}, "macro.fivetran_utils.default__source_relation": {"name": "default__source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "unique_id": "macro.fivetran_utils.default__source_relation", "macro_sql": "{% macro default__source_relation(union_schema_variable, union_database_variable) %}\n\n{% if var(union_schema_variable, none)  %}\n, case\n    {% for schema in var(union_schema_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.{{ schema|lower }}.%' then '{{ schema|lower }}'\n    {% endfor %}\n  end as source_relation\n{% elif var(union_database_variable, none) %}\n, case\n    {% for database in var(union_database_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%{{ database|lower }}.%' then '{{ database|lower }}'\n    {% endfor %}\n  end as source_relation\n{% else %}\n, cast('' as {{ dbt.type_string() }}) as source_relation\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.569522, "supported_languages": null}, "macro.fivetran_utils.first_value": {"name": "first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.first_value", "macro_sql": "{% macro first_value(first_value_field, partition_field, order_by_field, order=\"asc\") -%}\n\n{{ adapter.dispatch('first_value', 'fivetran_utils') (first_value_field, partition_field, order_by_field, order) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__first_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.571091, "supported_languages": null}, "macro.fivetran_utils.default__first_value": {"name": "default__first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.default__first_value", "macro_sql": "{% macro default__first_value(first_value_field, partition_field, order_by_field, order=\"asc\")  %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.571792, "supported_languages": null}, "macro.fivetran_utils.redshift__first_value": {"name": "redshift__first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.redshift__first_value", "macro_sql": "{% macro redshift__first_value(first_value_field, partition_field, order_by_field, order=\"asc\") %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} , {{ partition_field }} rows unbounded preceding )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.573761, "supported_languages": null}, "macro.fivetran_utils.add_dbt_source_relation": {"name": "add_dbt_source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/add_dbt_source_relation.sql", "original_file_path": "macros/add_dbt_source_relation.sql", "unique_id": "macro.fivetran_utils.add_dbt_source_relation", "macro_sql": "{% macro add_dbt_source_relation() %}\n\n{% if var('union_schemas', none) or var('union_databases', none) %}\n, _dbt_source_relation\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.57487, "supported_languages": null}, "macro.fivetran_utils.add_pass_through_columns": {"name": "add_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/add_pass_through_columns.sql", "original_file_path": "macros/add_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.add_pass_through_columns", "macro_sql": "{% macro add_pass_through_columns(base_columns, pass_through_var) %}\n\n  {% if pass_through_var %}\n\n    {% for column in pass_through_var %}\n\n    {% if column is mapping %}\n\n      {% if column.alias %}\n\n        {% do base_columns.append({ \"name\": column.name, \"alias\": column.alias, \"datatype\": column.datatype if column.datatype else dbt.type_string()}) %}\n\n      {% else %}\n\n        {% do base_columns.append({ \"name\": column.name, \"datatype\": column.datatype if column.datatype else dbt.type_string()}) %}\n        \n      {% endif %}\n\n    {% else %}\n\n      {% do base_columns.append({ \"name\": column, \"datatype\": dbt.type_string()}) %}\n\n    {% endif %}\n\n    {% endfor %}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.578889, "supported_languages": null}, "macro.fivetran_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "unique_id": "macro.fivetran_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, aliases=none, column_override=none, include=[], exclude=[], source_column_name=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n    {%- set source_column_name = source_column_name if source_column_name is not none else '_dbt_source_relation' -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ aliases[loop.index0] if aliases else relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.599736, "supported_languages": null}, "macro.fivetran_utils.union_tables": {"name": "union_tables", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "unique_id": "macro.fivetran_utils.union_tables", "macro_sql": "{%- macro union_tables(tables, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_table') -%}\n\n    {%- do exceptions.warn(\"Warning: the `union_tables` macro is no longer supported and will be deprecated in a future release of dbt-utils. Use the `union_relations` macro instead\") -%}\n\n    {{ return(dbt_utils.union_relations(tables, column_override, include, exclude, source_column_name)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.602172, "supported_languages": null}, "macro.fivetran_utils.snowflake_seed_data": {"name": "snowflake_seed_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/snowflake_seed_data.sql", "original_file_path": "macros/snowflake_seed_data.sql", "unique_id": "macro.fivetran_utils.snowflake_seed_data", "macro_sql": "{% macro snowflake_seed_data(seed_name) %}\n\n{% if target.type == 'snowflake' %}\n{{ return(ref(seed_name ~ '_snowflake')) }}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.6033862, "supported_languages": null}, "macro.fivetran_utils.fill_staging_columns": {"name": "fill_staging_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "unique_id": "macro.fivetran_utils.fill_staging_columns", "macro_sql": "{% macro fill_staging_columns(source_columns, staging_columns) -%}\n\n{%- set source_column_names = source_columns|map(attribute='name')|map('lower')|list -%}\n\n{%- for column in staging_columns %}\n    {% if column.name|lower in source_column_names -%}\n        {{ fivetran_utils.quote_column(column) }} as \n        {%- if 'alias' in column %} {{ column.alias }} {% else %} {{ fivetran_utils.quote_column(column) }} {%- endif -%}\n    {%- else -%}\n        cast(null as {{ column.datatype }})\n        {%- if 'alias' in column %} as {{ column.alias }} {% else %} as {{ fivetran_utils.quote_column(column) }} {% endif -%}\n    {%- endif -%}\n    {%- if not loop.last -%} , {% endif -%}\n{% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.quote_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.607626, "supported_languages": null}, "macro.fivetran_utils.quote_column": {"name": "quote_column", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "unique_id": "macro.fivetran_utils.quote_column", "macro_sql": "{% macro quote_column(column) %}\n    {% if 'quote' in column %}\n        {% if column.quote %}\n            {% if target.type in ('bigquery', 'spark', 'databricks') %}\n            `{{ column.name }}`\n            {% elif target.type == 'snowflake' %}\n            \"{{ column.name | upper }}\"\n            {% else %}\n            \"{{ column.name }}\"\n            {% endif %}\n        {% else %}\n        {{ column.name }}\n        {% endif %}\n    {% else %}\n    {{ column.name }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.6094022, "supported_languages": null}, "macro.fivetran_utils.json_extract": {"name": "json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.json_extract", "macro_sql": "{% macro json_extract(string, string_path) -%}\n\n{{ adapter.dispatch('json_extract', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__json_extract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.610912, "supported_languages": null}, "macro.fivetran_utils.default__json_extract": {"name": "default__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.default__json_extract", "macro_sql": "{% macro default__json_extract(string, string_path) %}\n\n  json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} )\n \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.611428, "supported_languages": null}, "macro.fivetran_utils.snowflake__json_extract": {"name": "snowflake__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.snowflake__json_extract", "macro_sql": "{% macro snowflake__json_extract(string, string_path) %}\n\n  json_extract_path_text(try_parse_json( {{string}} ), {{ \"'\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.611903, "supported_languages": null}, "macro.fivetran_utils.redshift__json_extract": {"name": "redshift__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.redshift__json_extract", "macro_sql": "{% macro redshift__json_extract(string, string_path) %}\n\n  case when is_valid_json( {{string}} ) then json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} ) else null end\n \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.6124318, "supported_languages": null}, "macro.fivetran_utils.bigquery__json_extract": {"name": "bigquery__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.bigquery__json_extract", "macro_sql": "{% macro bigquery__json_extract(string, string_path) %}\n\n  json_extract_scalar({{string}}, {{ \"'$.\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.612917, "supported_languages": null}, "macro.fivetran_utils.postgres__json_extract": {"name": "postgres__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.postgres__json_extract", "macro_sql": "{% macro postgres__json_extract(string, string_path) %}\n\n  {{string}}::json->>{{\"'\" ~ string_path ~ \"'\" }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.613394, "supported_languages": null}, "macro.fivetran_utils.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "unique_id": "macro.fivetran_utils.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.6154501, "supported_languages": null}, "macro.fivetran_utils.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "unique_id": "macro.fivetran_utils.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n\n  {%- set enabled_array = [] -%}\n  {% for node in graph.sources.values() %}\n    {% if node.identifier == source.identifier %}\n      {% if (node.meta['is_enabled'] | default(true)) %}\n        {%- do enabled_array.append(1) -%}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n  {% set is_enabled = (enabled_array != []) %}\n\n    select\n      {% if is_enabled %}\n      max({{ loaded_at_field }})\n      {% else %} \n      {{ current_timestamp() }} {% endif %} as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n\n    {% if is_enabled %}\n    from {{ source }}\n      {% if filter %}\n      where {{ filter }}\n      {% endif %}\n    {% endif %}\n\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.618447, "supported_languages": null}, "macro.fivetran_utils.timestamp_add": {"name": "timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.timestamp_add", "macro_sql": "{% macro timestamp_add(datepart, interval, from_timestamp) -%}\n\n{{ adapter.dispatch('timestamp_add', 'fivetran_utils') (datepart, interval, from_timestamp) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__timestamp_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.620636, "supported_languages": null}, "macro.fivetran_utils.default__timestamp_add": {"name": "default__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.default__timestamp_add", "macro_sql": "{% macro default__timestamp_add(datepart, interval, from_timestamp) %}\n\n    timestampadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.6211681, "supported_languages": null}, "macro.fivetran_utils.bigquery__timestamp_add": {"name": "bigquery__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.bigquery__timestamp_add", "macro_sql": "{% macro bigquery__timestamp_add(datepart, interval, from_timestamp) %}\n\n        timestamp_add({{ from_timestamp }}, interval  {{ interval }} {{ datepart }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.6217, "supported_languages": null}, "macro.fivetran_utils.redshift__timestamp_add": {"name": "redshift__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.redshift__timestamp_add", "macro_sql": "{% macro redshift__timestamp_add(datepart, interval, from_timestamp) %}\n\n        dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.622219, "supported_languages": null}, "macro.fivetran_utils.postgres__timestamp_add": {"name": "postgres__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.postgres__timestamp_add", "macro_sql": "{% macro postgres__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ from_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.622835, "supported_languages": null}, "macro.fivetran_utils.spark__timestamp_add": {"name": "spark__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.spark__timestamp_add", "macro_sql": "{% macro spark__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ dbt.dateadd(datepart, interval, from_timestamp) }}\n        \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.6234171, "supported_languages": null}, "macro.fivetran_utils.ceiling": {"name": "ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.ceiling", "macro_sql": "{% macro ceiling(num) -%}\n\n{{ adapter.dispatch('ceiling', 'fivetran_utils') (num) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__ceiling"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.6244721, "supported_languages": null}, "macro.fivetran_utils.default__ceiling": {"name": "default__ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.default__ceiling", "macro_sql": "{% macro default__ceiling(num) %}\n    ceiling({{ num }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.62483, "supported_languages": null}, "macro.fivetran_utils.snowflake__ceiling": {"name": "snowflake__ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.snowflake__ceiling", "macro_sql": "{% macro snowflake__ceiling(num) %}\n    ceil({{ num }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.6251678, "supported_languages": null}, "macro.fivetran_utils.remove_prefix_from_columns": {"name": "remove_prefix_from_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/remove_prefix_from_columns.sql", "original_file_path": "macros/remove_prefix_from_columns.sql", "unique_id": "macro.fivetran_utils.remove_prefix_from_columns", "macro_sql": "{% macro remove_prefix_from_columns(columns, prefix='', exclude=[]) %}\n\n        {%- for col in columns if col.name not in exclude -%}\n        {%- if col.name[:prefix|length]|lower == prefix -%}\n        {{ col.name }} as {{ col.name[prefix|length:] }}\n        {%- else -%}\n        {{ col.name }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n        {% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.627726, "supported_languages": null}, "macro.fivetran_utils.union_data": {"name": "union_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "unique_id": "macro.fivetran_utils.union_data", "macro_sql": "{%- macro union_data(table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable, union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('union_data', 'fivetran_utils') (\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fivetran_utils.default__union_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.635937, "supported_languages": null}, "macro.fivetran_utils.default__union_data": {"name": "default__union_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "unique_id": "macro.fivetran_utils.default__union_data", "macro_sql": "{%- macro default__union_data(\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) -%}\n\n{%- if var(union_schema_variable, none) -%}\n\n    {%- set relations = [] -%}\n    \n    {%- if var(union_schema_variable) is string -%}\n    {%- set trimmed = var(union_schema_variable)|trim('[')|trim(']') -%}\n    {%- set schemas = trimmed.split(',')|map('trim',\" \")|map('trim','\"')|map('trim',\"'\") -%}\n    {%- else -%}\n    {%- set schemas = var(union_schema_variable) -%}\n    {%- endif -%}\n\n    {%- for schema in var(union_schema_variable) -%}\n    {%- set relation=adapter.get_relation(\n        database=source(schema, table_identifier).database if var('has_defined_sources', false) else var(database_variable, default_database),\n        schema=source(schema, table_identifier).schema if var('has_defined_sources', false) else schema,\n        identifier=source(schema, table_identifier).identifier if var('has_defined_sources', false) else table_identifier\n    ) -%}\n    \n    {%- set relation_exists=relation is not none -%}\n\n    {%- if relation_exists -%}\n        {%- do relations.append(relation) -%}\n    {%- endif -%}\n\n    {%- endfor -%}\n    \n    {%- if relations != [] -%}\n        {{ dbt_utils.union_relations(relations) }}\n    {%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit 0\n    {%- endif -%}\n\n{%- elif var(union_database_variable, none) -%}\n\n    {%- set relations = [] -%}\n\n    {%- for database in var(union_database_variable) -%}\n    {%- set relation=adapter.get_relation(\n        database=source(schema, table_identifier).database if var('has_defined_sources', false) else database,\n        schema=source(schema, table_identifier).schema if var('has_defined_sources', false) else var(schema_variable, default_schema),\n        identifier=source(schema, table_identifier).identifier if var('has_defined_sources', false) else table_identifier\n    ) -%}\n\n    {%- set relation_exists=relation is not none -%}\n\n    {%- if relation_exists -%}\n        {%- do relations.append(relation) -%}\n    {%- endif -%}\n\n    {%- endfor -%}\n\n    {%- if relations != [] -%}\n        {{ dbt_utils.union_relations(relations) }}\n    {%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit 0\n    {%- endif -%}\n\n{%- else -%}\n    {% set exception_schemas = {\"linkedin_company_pages\": \"linkedin_pages\", \"instagram_business_pages\": \"instagram_business\"} %}\n    {% set relation = namespace(value=\"\") %}\n    {% if default_schema in exception_schemas.keys() %}\n        {% for corrected_schema_name in exception_schemas.items() %}   \n            {% if default_schema in corrected_schema_name %}\n                {# In order for this macro to effectively work within upstream integration tests (mainly used by the Fivetran dbt package maintainers), this identifier variable selection is required to use the macro with different identifier names. #}\n                {% set identifier_var = corrected_schema_name[1] + \"_\" + table_identifier + \"_identifier\"  %}\n                {%- set relation.value=adapter.get_relation(\n                    database=source(corrected_schema_name[1], table_identifier).database,\n                    schema=source(corrected_schema_name[1], table_identifier).schema,\n                    identifier=var(identifier_var, table_identifier)\n                ) -%}\n            {% endif %}\n        {% endfor %}\n    {% else %}\n        {# In order for this macro to effectively work within upstream integration tests (mainly used by the Fivetran dbt package maintainers), this identifier variable selection is required to use the macro with different identifier names. #}\n        {% set identifier_var = default_schema + \"_\" + table_identifier + \"_identifier\"  %}\n        {# Unfortunately the Twitter Organic identifiers were misspelled. As such, we will need to account for this in the model. This will be adjusted in the Twitter Organic package, but to ensure backwards compatibility, this needs to be included. #}\n        {% if var(identifier_var, none) is none %} \n            {% set identifier_var = default_schema + \"_\" + table_identifier + \"_identifer\"  %}\n        {% endif %}\n        {%- set relation.value=adapter.get_relation(\n            database=source(default_schema, table_identifier).database,\n            schema=source(default_schema, table_identifier).schema,\n            identifier=var(identifier_var, table_identifier)\n        ) -%}\n    {% endif %}\n{%- set table_exists=relation.value is not none -%}\n\n{%- if table_exists -%}\n    select * \n    from {{ relation.value }}\n{%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit 0\n{%- endif -%}\n{%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils.union_relations", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.651339, "supported_languages": null}, "macro.fivetran_utils.dummy_coalesce_value": {"name": "dummy_coalesce_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/dummy_coalesce_value.sql", "original_file_path": "macros/dummy_coalesce_value.sql", "unique_id": "macro.fivetran_utils.dummy_coalesce_value", "macro_sql": "{% macro dummy_coalesce_value(column) %}\n\n{% set coalesce_value = {\n 'STRING': \"'DUMMY_STRING'\",\n 'BOOLEAN': 'null',\n 'INT': 999999999,\n 'FLOAT': 999999999.99,\n 'TIMESTAMP': 'cast(\"2099-12-31\" as timestamp)',\n 'DATE': 'cast(\"2099-12-31\" as date)',\n} %}\n\n{% if column.is_float() %}\n{{ return(coalesce_value['FLOAT']) }}\n\n{% elif column.is_numeric() %}\n{{ return(coalesce_value['INT']) }}\n\n{% elif column.is_string() %}\n{{ return(coalesce_value['STRING']) }}\n\n{% elif column.data_type|lower == 'boolean' %}\n{{ return(coalesce_value['BOOLEAN']) }}\n\n{% elif 'timestamp' in column.data_type|lower %}\n{{ return(coalesce_value['TIMESTAMP']) }}\n\n{% elif 'date' in column.data_type|lower %}\n{{ return(coalesce_value['DATE']) }}\n\n{% elif 'int' in column.data_type|lower %}\n{{ return(coalesce_value['INT']) }}\n\n{% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.6559029, "supported_languages": null}, "macro.fivetran_utils.wrap_in_quotes": {"name": "wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.wrap_in_quotes", "macro_sql": "{%- macro wrap_in_quotes(object_to_quote) -%}\n\n{{ return(adapter.dispatch('wrap_in_quotes', 'fivetran_utils')(object_to_quote)) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fivetran_utils.default__wrap_in_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.656993, "supported_languages": null}, "macro.fivetran_utils.default__wrap_in_quotes": {"name": "default__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.default__wrap_in_quotes", "macro_sql": "{%- macro default__wrap_in_quotes(object_to_quote)  -%}\n{# bigquery, spark, databricks #}\n    `{{ object_to_quote }}`\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.657387, "supported_languages": null}, "macro.fivetran_utils.snowflake__wrap_in_quotes": {"name": "snowflake__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.snowflake__wrap_in_quotes", "macro_sql": "{%- macro snowflake__wrap_in_quotes(object_to_quote)  -%}\n    \"{{ object_to_quote | upper }}\"\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.657759, "supported_languages": null}, "macro.fivetran_utils.redshift__wrap_in_quotes": {"name": "redshift__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.redshift__wrap_in_quotes", "macro_sql": "{%- macro redshift__wrap_in_quotes(object_to_quote)  -%}\n    \"{{ object_to_quote }}\"\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.658091, "supported_languages": null}, "macro.fivetran_utils.postgres__wrap_in_quotes": {"name": "postgres__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.postgres__wrap_in_quotes", "macro_sql": "{%- macro postgres__wrap_in_quotes(object_to_quote)  -%}\n    \"{{ object_to_quote }}\"\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.658423, "supported_languages": null}, "macro.fivetran_utils.array_agg": {"name": "array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.array_agg", "macro_sql": "{% macro array_agg(field_to_agg) -%}\n\n{{ adapter.dispatch('array_agg', 'fivetran_utils') (field_to_agg) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__array_agg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.65919, "supported_languages": null}, "macro.fivetran_utils.default__array_agg": {"name": "default__array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.default__array_agg", "macro_sql": "{% macro default__array_agg(field_to_agg) %}\n    array_agg({{ field_to_agg }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.659534, "supported_languages": null}, "macro.fivetran_utils.redshift__array_agg": {"name": "redshift__array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.redshift__array_agg", "macro_sql": "{% macro redshift__array_agg(field_to_agg) %}\n    listagg({{ field_to_agg }}, ',')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.659868, "supported_languages": null}, "macro.fivetran_utils.empty_variable_warning": {"name": "empty_variable_warning", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/empty_variable_warning.sql", "original_file_path": "macros/empty_variable_warning.sql", "unique_id": "macro.fivetran_utils.empty_variable_warning", "macro_sql": "{% macro empty_variable_warning(variable, downstream_model) %}\n\n{% if not var(variable) %}\n{{ log(\n    \"\"\"\n    Warning: You have passed an empty list to the \"\"\" ~ variable ~ \"\"\".\n    As a result, you won't see the history of any columns in the \"\"\" ~ downstream_model ~ \"\"\" model.\n    \"\"\",\n    info=True\n) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.661383, "supported_languages": null}, "macro.fivetran_utils.enabled_vars_one_true": {"name": "enabled_vars_one_true", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/enabled_vars_one_true.sql", "original_file_path": "macros/enabled_vars_one_true.sql", "unique_id": "macro.fivetran_utils.enabled_vars_one_true", "macro_sql": "{% macro enabled_vars_one_true(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, False) == True %}\n    {{ return(True) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(False) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696434194.663501, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}, "doc.hubspot_source._fivetran_synced": {"name": "_fivetran_synced", "resource_type": "doc", "package_name": "hubspot_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot_source._fivetran_synced", "block_contents": "Timestamp of when Fivetran synced a record."}, "doc.hubspot_source._fivetran_deleted": {"name": "_fivetran_deleted", "resource_type": "doc", "package_name": "hubspot_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot_source._fivetran_deleted", "block_contents": "Boolean indicating whether a record has been deleted in Hubspot and/or inferred deleted in Hubspot by Fivetran; _fivetran_deleted and is_deleted fields are equivalent."}, "doc.hubspot_source.portal_id": {"name": "portal_id", "resource_type": "doc", "package_name": "hubspot_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot_source.portal_id", "block_contents": "The hub ID."}, "doc.hubspot_source.is_deleted": {"name": "is_deleted", "resource_type": "doc", "package_name": "hubspot_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot_source.is_deleted", "block_contents": "Boolean indicating whether a record has been deleted in Hubspot and/or inferred deleted in Hubspot by Fivetran; _fivetran_deleted and is_deleted fields are equivalent."}, "doc.hubspot_source.history_name": {"name": "history_name", "resource_type": "doc", "package_name": "hubspot_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot_source.history_name", "block_contents": "The name of the field being changed."}, "doc.hubspot_source.history_source": {"name": "history_source", "resource_type": "doc", "package_name": "hubspot_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot_source.history_source", "block_contents": "The source (reason) of the change."}, "doc.hubspot_source.history_source_id": {"name": "history_source_id", "resource_type": "doc", "package_name": "hubspot_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot_source.history_source_id", "block_contents": "The ID of the object that caused the change, if applicable."}, "doc.hubspot_source.history_timestamp": {"name": "history_timestamp", "resource_type": "doc", "package_name": "hubspot_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot_source.history_timestamp", "block_contents": "The timestamp the changed occurred."}, "doc.hubspot_source.history_value": {"name": "history_value", "resource_type": "doc", "package_name": "hubspot_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot_source.history_value", "block_contents": "The new value of the field."}, "doc.hubspot_source.email_event_browser": {"name": "email_event_browser", "resource_type": "doc", "package_name": "hubspot_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot_source.email_event_browser", "block_contents": "A JSON object representing the browser which serviced the event. Its comprised of the properties: 'name', 'family', 'producer', 'producer_url', 'type', 'url', 'version'."}, "doc.hubspot_source.email_event_ip_address": {"name": "email_event_ip_address", "resource_type": "doc", "package_name": "hubspot_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot_source.email_event_ip_address", "block_contents": "The contact's IP address when the event occurred."}, "doc.hubspot_source.email_event_location": {"name": "email_event_location", "resource_type": "doc", "package_name": "hubspot_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot_source.email_event_location", "block_contents": "A JSON object representing the location where the event occurred. It's comprised of the properties: 'city', 'state', 'country'."}, "doc.hubspot_source.email_event_user_agent": {"name": "email_event_user_agent", "resource_type": "doc", "package_name": "hubspot_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot_source.email_event_user_agent", "block_contents": "The user agent responsible for the event, e.g. \u201cMozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.95 Safari/537.36\u201d"}, "doc.hubspot.bounces": {"name": "bounces", "resource_type": "doc", "package_name": "hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot.bounces", "block_contents": "The total number of bounce email events."}, "doc.hubspot.clicks": {"name": "clicks", "resource_type": "doc", "package_name": "hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot.clicks", "block_contents": "The total number of click email events."}, "doc.hubspot.deferrals": {"name": "deferrals", "resource_type": "doc", "package_name": "hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot.deferrals", "block_contents": "The total number of deferral email events."}, "doc.hubspot.deliveries": {"name": "deliveries", "resource_type": "doc", "package_name": "hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot.deliveries", "block_contents": "The total number of delivery email events."}, "doc.hubspot.drops": {"name": "drops", "resource_type": "doc", "package_name": "hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot.drops", "block_contents": "The total number of drop email events."}, "doc.hubspot.forwards": {"name": "forwards", "resource_type": "doc", "package_name": "hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot.forwards", "block_contents": "The total number of forward email events."}, "doc.hubspot.opens": {"name": "opens", "resource_type": "doc", "package_name": "hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot.opens", "block_contents": "The total number of open email events."}, "doc.hubspot.prints": {"name": "prints", "resource_type": "doc", "package_name": "hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot.prints", "block_contents": "The total number of print email events."}, "doc.hubspot.spam_reports": {"name": "spam_reports", "resource_type": "doc", "package_name": "hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot.spam_reports", "block_contents": "The total number of spam report email events."}, "doc.hubspot.unsubscribes": {"name": "unsubscribes", "resource_type": "doc", "package_name": "hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot.unsubscribes", "block_contents": "The total number of unsubscribe email events."}, "doc.hubspot.unique_bounces": {"name": "unique_bounces", "resource_type": "doc", "package_name": "hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot.unique_bounces", "block_contents": "The total number of unique email sends with a bounce email event."}, "doc.hubspot.unique_clicks": {"name": "unique_clicks", "resource_type": "doc", "package_name": "hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot.unique_clicks", "block_contents": "The total number of unique email sends with a click email event."}, "doc.hubspot.unique_deferrals": {"name": "unique_deferrals", "resource_type": "doc", "package_name": "hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot.unique_deferrals", "block_contents": "The total number of unique email sends with a deferral email event."}, "doc.hubspot.unique_deliveries": {"name": "unique_deliveries", "resource_type": "doc", "package_name": "hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot.unique_deliveries", "block_contents": "The total number of unique email sends with a delivery email event."}, "doc.hubspot.unique_drops": {"name": "unique_drops", "resource_type": "doc", "package_name": "hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot.unique_drops", "block_contents": "The total number of unique email sends with a drop email event."}, "doc.hubspot.unique_forwards": {"name": "unique_forwards", "resource_type": "doc", "package_name": "hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot.unique_forwards", "block_contents": "The total number of unique email sends with a forward email event."}, "doc.hubspot.unique_opens": {"name": "unique_opens", "resource_type": "doc", "package_name": "hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot.unique_opens", "block_contents": "The total number of unique email sends with a opens email event."}, "doc.hubspot.unique_prints": {"name": "unique_prints", "resource_type": "doc", "package_name": "hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot.unique_prints", "block_contents": "The total number of unique email sends with a print email event."}, "doc.hubspot.unique_spam_reports": {"name": "unique_spam_reports", "resource_type": "doc", "package_name": "hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot.unique_spam_reports", "block_contents": "The total number of unique email sends with a spam report email event."}, "doc.hubspot.unique_unsubscribes": {"name": "unique_unsubscribes", "resource_type": "doc", "package_name": "hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot.unique_unsubscribes", "block_contents": "The total number of unique email sends with a unsubscribe email event."}, "doc.hubspot.count_engagement_notes": {"name": "count_engagement_notes", "resource_type": "doc", "package_name": "hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot.count_engagement_notes", "block_contents": "The total number of related note engagements."}, "doc.hubspot.count_engagement_tasks": {"name": "count_engagement_tasks", "resource_type": "doc", "package_name": "hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot.count_engagement_tasks", "block_contents": "The total number of related task engagements."}, "doc.hubspot.count_engagement_calls": {"name": "count_engagement_calls", "resource_type": "doc", "package_name": "hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot.count_engagement_calls", "block_contents": "The total number of related call engagements."}, "doc.hubspot.count_engagement_meetings": {"name": "count_engagement_meetings", "resource_type": "doc", "package_name": "hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot.count_engagement_meetings", "block_contents": "The total number of related meeting engagements."}, "doc.hubspot.count_engagement_emails": {"name": "count_engagement_emails", "resource_type": "doc", "package_name": "hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot.count_engagement_emails", "block_contents": "The total number of related email engagements."}, "doc.hubspot.count_engagement_incoming_emails": {"name": "count_engagement_incoming_emails", "resource_type": "doc", "package_name": "hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot.count_engagement_incoming_emails", "block_contents": "The total number of related incoming email engagements."}, "doc.hubspot.count_engagement_forwarded_emails": {"name": "count_engagement_forwarded_emails", "resource_type": "doc", "package_name": "hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot.count_engagement_forwarded_emails", "block_contents": "The total number of related forwarded email engagements."}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {"model.hubspot_source.stg_hubspot__engagement_task": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__engagement_task", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__engagement_task.sql", "original_file_path": "models/stg_hubspot__engagement_task.sql", "unique_id": "model.hubspot_source.stg_hubspot__engagement_task", "fqn": ["hubspot_source", "stg_hubspot__engagement_task"], "alias": "stg_hubspot__engagement_task", "checksum": {"name": "sha256", "checksum": "13ead35496100b9e348ddbc34e93f8a956b4c4565f57d083493ab06ec1ae561b"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a TASK engagement event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean to mark rows that were deleted in the source database.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_type": {"name": "engagement_type", "description": "The type of the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "This field marks the task's time of creation and determines where the task sits on the record timeline. You can use either a Unix timestamp in milliseconds or UTC format. \nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "occurred_timestamp": {"name": "occurred_timestamp", "description": "This field marks the task's time of occurrence and determines where the task sits on the record timeline. You can use either a Unix timestamp in milliseconds or UTC format. \nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "The ID of the owner associated with the task. This field determines the user listed as the task creator on the record timeline.\nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "The ID of the team associated with the task. This field determines the team listed as the task creator on the record timeline.\nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__engagement.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434197.9068851, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__engagement_task`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_task_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__engagement_task_tmp') }}\n\n), macro as (\n\n    select\n        {% set default_cols = adapter.get_columns_in_relation(ref('stg_hubspot__engagement_task_tmp')) %}\n        {% set new_cols = fivetran_utils.remove_prefix_from_columns(columns=default_cols, \n            prefix='property_hs_',exclude=get_macro_columns(get_engagement_task_columns())) %}\n        {{\n            fivetran_utils.fill_staging_columns(source_columns=default_cols,\n                staging_columns=get_engagement_task_columns()\n            )\n        }}\n        {% if new_cols | length > 0 %} \n            ,{{ new_cols }} \n        {% endif %}\n    from base\n)\n\nselect *\nfrom macro", "language": "sql", "refs": [{"name": "stg_hubspot__engagement_task_tmp", "package": null, "version": null}, {"name": "stg_hubspot__engagement_task_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_engagement_task_columns", "macro.hubspot_source.get_macro_columns", "macro.fivetran_utils.remove_prefix_from_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__engagement_deal": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__engagement_deal", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__engagement_deal.sql", "original_file_path": "models/stg_hubspot__engagement_deal.sql", "unique_id": "model.hubspot_source.stg_hubspot__engagement_deal", "fqn": ["hubspot_source", "stg_hubspot__engagement_deal"], "alias": "stg_hubspot__engagement_deal", "checksum": {"name": "sha256", "checksum": "3e3bb038d1bbd2fd9911d73c0999eec30f45fc37412e3f93fa01396ef29f5237"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a 'link' between a deal and an engagement.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_id": {"name": "deal_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the related engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__engagement.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434197.902179, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__engagement_deal`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_deal_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__engagement_deal_tmp') }}\n\n), macro as (\n\n    select\n        {% set default_cols = adapter.get_columns_in_relation(ref('stg_hubspot__engagement_deal_tmp')) %}\n        {% set new_cols = fivetran_utils.remove_prefix_from_columns(columns=default_cols, \n            prefix='property_hs_',exclude=get_macro_columns(get_engagement_deal_columns())) %}\n        {{\n            fivetran_utils.fill_staging_columns(source_columns=default_cols,\n                staging_columns=get_engagement_deal_columns()\n            )\n        }}\n        {% if new_cols | length > 0 %} \n            ,{{ new_cols }} \n        {% endif %}\n    from base\n\n)\n\nselect *\nfrom macro", "language": "sql", "refs": [{"name": "stg_hubspot__engagement_deal_tmp", "package": null, "version": null}, {"name": "stg_hubspot__engagement_deal_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_engagement_deal_columns", "macro.hubspot_source.get_macro_columns", "macro.fivetran_utils.remove_prefix_from_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__email_event_delivered": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__email_event_delivered", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__email_event_delivered.sql", "original_file_path": "models/stg_hubspot__email_event_delivered.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event_delivered", "fqn": ["hubspot_source", "stg_hubspot__email_event_delivered"], "alias": "stg_hubspot__email_event_delivered", "checksum": {"name": "sha256", "checksum": "57cb80393a7b1f533457ba888f0e6391b40380fb1fa69cedc1a39865ef0f9089"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a DELIVERED email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "returned_response": {"name": "returned_response", "description": "The full response from the recipient's email server.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "smtp_id": {"name": "smtp_id", "description": "An ID attached to the message by HubSpot.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__email.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434197.802248, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__email_event_delivered`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_delivered_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__email_event_delivered_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__email_event_delivered_tmp')),\n                staging_columns=get_email_event_delivered_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        id as event_id,\n        response as returned_response,\n        smtp_id\n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_delivered_tmp", "package": null, "version": null}, {"name": "stg_hubspot__email_event_delivered_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_email_event_delivered_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__email_event": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__email_event", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__email_event.sql", "original_file_path": "models/stg_hubspot__email_event.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event", "fqn": ["hubspot_source", "stg_hubspot__email_event"], "alias": "stg_hubspot__email_event", "checksum": {"name": "sha256", "checksum": "37ab0c059cc4ae9e528683d7c7d17a005b797396358601192b81ab8f4406d9ac"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents an email event in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "app_id": {"name": "app_id", "description": "The ID of the app that sent the email.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "caused_by_event_id": {"name": "caused_by_event_id", "description": "The event ID which uniquely identifies the event which directly caused this event. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "caused_timestamp": {"name": "caused_timestamp", "description": "The timestamp of the event that caused this event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The created timestamp of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_campaign_id": {"name": "email_campaign_id", "description": "The ID of the related email campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_type": {"name": "event_type", "description": "The type of event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_filtered_event": {"name": "is_filtered_event", "description": "A boolean representing whether the event has been filtered out of reporting based on customer reports settings or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "obsoleted_by_event_id": {"name": "obsoleted_by_event_id", "description": "The event ID which uniquely identifies the follow-on event which makes this current event obsolete. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "obsoleted_timestamp": {"name": "obsoleted_timestamp", "description": "The timestamp of the event that made the current event obsolete.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "{{ doc(\"portal_id\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "recipient_email_address": {"name": "recipient_email_address", "description": "The email address of the contact related to the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sent_by_event_id": {"name": "sent_by_event_id", "description": "The event ID which uniquely identifies the email message's SENT event. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sent_timestamp": {"name": "sent_timestamp", "description": "The timestamp of the SENT event related to this event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__email.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434197.8198872, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__email_event`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__email_event_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__email_event_tmp')),\n                staging_columns=get_email_event_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        app_id,\n        cast(caused_by_created as {{ dbt.type_timestamp() }}) as caused_timestamp,\n        caused_by_id as caused_by_event_id,\n        cast(created as {{ dbt.type_timestamp() }}) as created_timestamp,\n        email_campaign_id,\n        filtered_event as is_filtered_event,\n        id as event_id,\n        cast(obsoleted_by_created as {{ dbt.type_timestamp() }}) as obsoleted_timestamp,\n        obsoleted_by_id as obsoleted_by_event_id,\n        portal_id,\n        recipient as recipient_email_address,\n        cast(sent_by_created as {{ dbt.type_timestamp() }}) as sent_timestamp,\n        sent_by_id as sent_by_event_id,\n        type as event_type\n    from macro\n    \n)\n\nselect *\nfrom fields\n{% if not var('hubspot_using_all_email_events',true) -%}\nwhere not coalesce(is_filtered_event, false)\n{%- endif -%}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_tmp", "package": null, "version": null}, {"name": "stg_hubspot__email_event_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_email_event_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__engagement_meeting": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__engagement_meeting", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__engagement_meeting.sql", "original_file_path": "models/stg_hubspot__engagement_meeting.sql", "unique_id": "model.hubspot_source.stg_hubspot__engagement_meeting", "fqn": ["hubspot_source", "stg_hubspot__engagement_meeting"], "alias": "stg_hubspot__engagement_meeting", "checksum": {"name": "sha256", "checksum": "bc9af79cd3181e57e40dfddea7cd10a631c8ac90c2dea999f97b8b9c67055192"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a MEETING engagement event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean to mark rows that were deleted in the source database.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_type": {"name": "engagement_type", "description": "The type of the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "This field marks the meeting's time of creation and determines where the meeting sits on the record timeline. You can use either a Unix timestamp in milliseconds or UTC format. \nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "occurred_timestamp": {"name": "occurred_timestamp", "description": "This field marks the meeting's time of occurrence and determines where the meeting sits on the record timeline. You can use either a Unix timestamp in milliseconds or UTC format. \nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "The ID of the owner associated with the meeting. This field determines the user listed as the meeting creator on the record timeline.\nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "The ID of the team associated with the meeting. This field determines the team listed as the meeting creator on the record timeline.\nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__engagement.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434197.904437, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__engagement_meeting`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_meeting_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__engagement_meeting_tmp') }}\n\n), macro as (\n\n    select\n        {% set default_cols = adapter.get_columns_in_relation(ref('stg_hubspot__engagement_meeting_tmp')) %}\n        {% set new_cols = fivetran_utils.remove_prefix_from_columns(columns=default_cols, \n            prefix='property_hs_',exclude=get_macro_columns(get_engagement_meeting_columns())) %}\n        {{\n            fivetran_utils.fill_staging_columns(source_columns=default_cols,\n                staging_columns=get_engagement_meeting_columns()\n            )\n        }}\n        {% if new_cols | length > 0 %} \n            ,{{ new_cols }} \n        {% endif %}\n    from base\n\n)\n\nselect *\nfrom macro", "language": "sql", "refs": [{"name": "stg_hubspot__engagement_meeting_tmp", "package": null, "version": null}, {"name": "stg_hubspot__engagement_meeting_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_engagement_meeting_columns", "macro.hubspot_source.get_macro_columns", "macro.fivetran_utils.remove_prefix_from_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__engagement_email": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__engagement_email", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__engagement_email.sql", "original_file_path": "models/stg_hubspot__engagement_email.sql", "unique_id": "model.hubspot_source.stg_hubspot__engagement_email", "fqn": ["hubspot_source", "stg_hubspot__engagement_email"], "alias": "stg_hubspot__engagement_email", "checksum": {"name": "sha256", "checksum": "57e213bbc51f899e61a750d7bb4b59570082440d1df33be266e70ccfb8269db1"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents an EMAIL engagement event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean to mark rows that were deleted in the source database.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_type": {"name": "engagement_type", "description": "The type of the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "This field marks the email's time of creation and determines where the email sits on the record timeline. You can use either a Unix timestamp in milliseconds or UTC format. \nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "occurred_timestamp": {"name": "occurred_timestamp", "description": "This field marks the email's time of occurrence and determines where the email sits on the record timeline. You can use either a Unix timestamp in milliseconds or UTC format. \nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "The ID of the owner associated with the email. This field determines the user listed as the email creator on the record timeline.\nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "The ID of the team associated with the email. This field determines the team listed as the email creator on the record timeline.\nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__engagement.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434197.9031968, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__engagement_email`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_email_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__engagement_email_tmp') }}\n\n), macro as (\n\n    select\n        {% set default_cols = adapter.get_columns_in_relation(ref('stg_hubspot__engagement_email_tmp')) %}\n        {% set new_cols = fivetran_utils.remove_prefix_from_columns(columns=default_cols, \n            prefix='property_hs_',exclude=get_macro_columns(get_engagement_email_columns())) %}\n        {{\n            fivetran_utils.fill_staging_columns(source_columns=default_cols,\n                staging_columns=get_engagement_email_columns()\n            )\n        }}\n        {% if new_cols | length > 0 %} \n            ,{{ new_cols }} \n        {% endif %}\n    from base\n\n)\n\nselect *\nfrom macro", "language": "sql", "refs": [{"name": "stg_hubspot__engagement_email_tmp", "package": null, "version": null}, {"name": "stg_hubspot__engagement_email_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_engagement_email_columns", "macro.hubspot_source.get_macro_columns", "macro.fivetran_utils.remove_prefix_from_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__ticket_contact": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__ticket_contact", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__ticket_contact.sql", "original_file_path": "models/stg_hubspot__ticket_contact.sql", "unique_id": "model.hubspot_source.stg_hubspot__ticket_contact", "fqn": ["hubspot_source", "stg_hubspot__ticket_contact"], "alias": "stg_hubspot__ticket_contact", "checksum": {"name": "sha256", "checksum": "cc2e171021e24a749d00c10dc35e790ab5438552e86157b4b461ad29d8cddea1"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a 'link' between a ticket and a contact.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_id": {"name": "ticket_id", "description": "The ID of the related ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__ticket.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434197.9422588, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__ticket_contact`", "raw_code": "{{ config(enabled=var('hubspot_service_enabled', False)) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__ticket_contact_tmp') }}\n\n), macro as (\n\n    select\n        {% set default_cols = adapter.get_columns_in_relation(ref('stg_hubspot__ticket_contact_tmp')) %}\n        {% set new_cols = fivetran_utils.remove_prefix_from_columns(columns=default_cols, \n            prefix='property_hs_',exclude=get_macro_columns(get_ticket_contact_columns())) %}\n        {{\n            fivetran_utils.fill_staging_columns(source_columns=default_cols,\n                staging_columns=get_ticket_contact_columns()\n            )\n        }}\n        {% if new_cols | length > 0 %} \n            ,{{ new_cols }} \n        {% endif %}\n    from base\n\n)\n\nselect *\nfrom macro", "language": "sql", "refs": [{"name": "stg_hubspot__ticket_contact_tmp", "package": null, "version": null}, {"name": "stg_hubspot__ticket_contact_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.hubspot_source.get_ticket_contact_columns", "macro.hubspot_source.get_macro_columns", "macro.fivetran_utils.remove_prefix_from_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__email_event_status_change": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__email_event_status_change", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__email_event_status_change.sql", "original_file_path": "models/stg_hubspot__email_event_status_change.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event_status_change", "fqn": ["hubspot_source", "stg_hubspot__email_event_status_change"], "alias": "stg_hubspot__email_event_status_change", "checksum": {"name": "sha256", "checksum": "500ed0a665718563ae083f34931d675641791aa36a5a29826c8bfdc1a2cecf5e"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a STATUS_CHANGE email event in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_source": {"name": "change_source", "description": "The source of the subscription change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_bounced": {"name": "is_bounced", "description": "A HubSpot employee explicitly initiated the status change to block messages to the recipient. \n(Note this usage has been deprecated in favor of dropping messages with a 'dropReason' of BLOCKED_ADDRESS.)\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "requested_by_email": {"name": "requested_by_email", "description": "The email address of the person requesting the change on behalf of the recipient. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_status": {"name": "subscription_status", "description": "The recipient's portal subscription status. \nNote that if this is 'UNSUBSCRIBED', the property 'subscriptions' is not necessarily an empty array, nor are all \nsubscriptions contained in it necessarily going to have their statuses set to 'UNSUBSCRIBED'.)\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscriptions": {"name": "subscriptions", "description": "An array of JSON objects representing the status of subscriptions for the recipient. \nEach JSON subscription object is comprised of the properties: 'id', 'status'.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__email.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434197.814092, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__email_event_status_change`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_status_change_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__email_event_status_change_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__email_event_status_change_tmp')),\n                staging_columns=get_email_event_status_change_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        bounced as is_bounced,\n        id as event_id,\n        portal_subscription_status as subscription_status,\n        requested_by as requested_by_email,\n        source as change_source,\n        subscriptions\n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_status_change_tmp", "package": null, "version": null}, {"name": "stg_hubspot__email_event_status_change_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_email_event_status_change_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__engagement_note": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__engagement_note", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__engagement_note.sql", "original_file_path": "models/stg_hubspot__engagement_note.sql", "unique_id": "model.hubspot_source.stg_hubspot__engagement_note", "fqn": ["hubspot_source", "stg_hubspot__engagement_note"], "alias": "stg_hubspot__engagement_note", "checksum": {"name": "sha256", "checksum": "71a5e39cf70b46da46e340f18031475fff304ed3a315e3ab6d635dd3424d5608"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a NOTE engagement event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean to mark rows that were deleted in the source database.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_type": {"name": "engagement_type", "description": "The type of the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "note": {"name": "note", "description": "The body of the note. The body has a limit of 65536 characters.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "This field marks the note's time of creation and determines where the note sits on the record timeline. You can use either a Unix timestamp in milliseconds or UTC format. \nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "occurred_timestamp": {"name": "occurred_timestamp", "description": "This field marks the note's time of occurrence and determines where the note sits on the record timeline. You can use either a Unix timestamp in milliseconds or UTC format. \nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "The ID of the owner associated with the note. This field determines the user listed as the note creator on the record timeline.\nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "The ID of the team associated with the note. This field determines the team listed as the note creator on the record timeline.\nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__engagement.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434197.905878, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__engagement_note`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_note_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__engagement_note_tmp') }}\n\n), macro as (\n\n    select\n        {% set default_cols = adapter.get_columns_in_relation(ref('stg_hubspot__engagement_note_tmp')) %}\n        {% set new_cols = fivetran_utils.remove_prefix_from_columns(columns=default_cols, \n            prefix='property_hs_',exclude=get_macro_columns(get_engagement_note_columns())) %}\n        {{\n            fivetran_utils.fill_staging_columns(source_columns=default_cols,\n                staging_columns=get_engagement_note_columns()\n            )\n        }}\n        {% if new_cols | length > 0 %} \n            ,{{ new_cols }} \n        {% endif %}\n    from base\n\n)\n\nselect *\nfrom macro", "language": "sql", "refs": [{"name": "stg_hubspot__engagement_note_tmp", "package": null, "version": null}, {"name": "stg_hubspot__engagement_note_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_engagement_note_columns", "macro.hubspot_source.get_macro_columns", "macro.fivetran_utils.remove_prefix_from_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__engagement_contact": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__engagement_contact", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__engagement_contact.sql", "original_file_path": "models/stg_hubspot__engagement_contact.sql", "unique_id": "model.hubspot_source.stg_hubspot__engagement_contact", "fqn": ["hubspot_source", "stg_hubspot__engagement_contact"], "alias": "stg_hubspot__engagement_contact", "checksum": {"name": "sha256", "checksum": "f76fea99c2ca11c415f248e65ed5649a90ff712b1e6532da80a4a44d23828a53"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a 'link' between a contact and an engagement.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the related engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__engagement.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434197.901438, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__engagement_contact`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_contact_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__engagement_contact_tmp') }}\n\n), macro as (\n\n    select\n        {% set default_cols = adapter.get_columns_in_relation(ref('stg_hubspot__engagement_contact_tmp')) %}\n        {% set new_cols = fivetran_utils.remove_prefix_from_columns(columns=default_cols, \n            prefix='property_hs_',exclude=get_macro_columns(get_engagement_contact_columns())) %}\n        {{\n            fivetran_utils.fill_staging_columns(source_columns=default_cols,\n                staging_columns=get_engagement_contact_columns()\n            )\n        }}\n        {% if new_cols | length > 0 %} \n            ,{{ new_cols }} \n        {% endif %}\n    from base\n\n)\n\nselect *\nfrom macro", "language": "sql", "refs": [{"name": "stg_hubspot__engagement_contact_tmp", "package": null, "version": null}, {"name": "stg_hubspot__engagement_contact_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_engagement_contact_columns", "macro.hubspot_source.get_macro_columns", "macro.fivetran_utils.remove_prefix_from_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__ticket_pipeline": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__ticket_pipeline", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__ticket_pipeline.sql", "original_file_path": "models/stg_hubspot__ticket_pipeline.sql", "unique_id": "model.hubspot_source.stg_hubspot__ticket_pipeline", "fqn": ["hubspot_source", "stg_hubspot__ticket_pipeline"], "alias": "stg_hubspot__ticket_pipeline", "checksum": {"name": "sha256", "checksum": "e8688af88a357940c8f9e2deab4093dc3400f7a20215ffb7c0a1a0dc5448eb86"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a ticket pipeline.", "columns": {"is_ticket_pipeline_deleted": {"name": "is_ticket_pipeline_deleted", "description": "{{ doc(\"is_deleted\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Boolean indicating whether the pipeline is active.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "display_order": {"name": "display_order", "description": "Used to determine the order in which the stages appear when viewed in HubSpot.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pipeline_label": {"name": "pipeline_label", "description": "The human-readable label for the stage. The label is used when showing the stage in HubSpot.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "object_type_id": {"name": "object_type_id", "description": "Reference to the object type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_pipeline_id": {"name": "ticket_pipeline_id", "description": "Reference to the pipeline.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_pipeline_created_at": {"name": "ticket_pipeline_created_at", "description": "A timestamp representing when the record was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_pipeline_updated_at": {"name": "ticket_pipeline_updated_at", "description": "A timestamp representing when the record was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__ticket.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434197.955584, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__ticket_pipeline`", "raw_code": "{{ config(enabled=var('hubspot_service_enabled', False)) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__ticket_pipeline_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__ticket_pipeline_tmp')),\n                staging_columns=get_ticket_pipeline_columns()\n            )\n        }}\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(pipeline_id as {{ dbt.type_int() }} ) as ticket_pipeline_id,\n        _fivetran_deleted as is_ticket_pipeline_deleted,\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        active as is_active,\n        display_order,\n        label as pipeline_label,\n        object_type_id,\n        created_at as ticket_pipeline_created_at,\n        updated_at as ticket_pipeline_updated_at\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_hubspot__ticket_pipeline_tmp", "package": null, "version": null}, {"name": "stg_hubspot__ticket_pipeline_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.hubspot_source.get_ticket_pipeline_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_int", "macro.dbt.type_timestamp"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__email_event_spam_report": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__email_event_spam_report", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__email_event_spam_report.sql", "original_file_path": "models/stg_hubspot__email_event_spam_report.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event_spam_report", "fqn": ["hubspot_source", "stg_hubspot__email_event_spam_report"], "alias": "stg_hubspot__email_event_spam_report", "checksum": {"name": "sha256", "checksum": "c6f6a945571c2f2cbd3f013041f9060c844f554b55a13d3982061a3f1e8051cd"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a SPAM_REPORT email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ip_address": {"name": "ip_address", "description": "{{ doc(\"email_event_ip_address\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_agent": {"name": "user_agent", "description": "{{ doc(\"email_event_user_agent\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__email.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434197.811319, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__email_event_spam_report`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_spam_report_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__email_event_spam_report_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__email_event_spam_report_tmp')),\n                staging_columns=get_email_event_spam_report_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        id as event_id,\n        ip_address,\n        user_agent\n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_spam_report_tmp", "package": null, "version": null}, {"name": "stg_hubspot__email_event_spam_report_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_email_event_spam_report_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__email_event_dropped": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__email_event_dropped", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__email_event_dropped.sql", "original_file_path": "models/stg_hubspot__email_event_dropped.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event_dropped", "fqn": ["hubspot_source", "stg_hubspot__email_event_dropped"], "alias": "stg_hubspot__email_event_dropped", "checksum": {"name": "sha256", "checksum": "57bcd7b83f492222bf9b147220ccd54a2207d909a53dbb2da49c8a15ceb6b33e"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a DROPPED email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bcc_emails": {"name": "bcc_emails", "description": "The 'bcc' field of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cc_emails": {"name": "cc_emails", "description": "The 'cc' field of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "drop_message": {"name": "drop_message", "description": "The raw message describing why the email message was dropped. This will usually provide additional details beyond 'dropReason'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "drop_reason": {"name": "drop_reason", "description": "The reason why the email message was dropped. See below for the possible values.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_subject": {"name": "email_subject", "description": "The subject line of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "from_email": {"name": "from_email", "description": "The 'from' field of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reply_to_email": {"name": "reply_to_email", "description": "The 'reply-to' field of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__email.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434197.8061109, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__email_event_dropped`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_dropped_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__email_event_dropped_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__email_event_dropped_tmp')),\n                staging_columns=get_email_event_dropped_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        bcc as bcc_emails,\n        cc as cc_emails,\n        drop_message,\n        drop_reason,\n        from_email, -- source field name = from ; alias declared in macros/get_email_event_dropped_columns.sql\n        id as event_id,\n        reply_to as reply_to_email,\n        subject as email_subject\n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_dropped_tmp", "package": null, "version": null}, {"name": "stg_hubspot__email_event_dropped_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_email_event_dropped_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__email_event_forward": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__email_event_forward", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__email_event_forward.sql", "original_file_path": "models/stg_hubspot__email_event_forward.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event_forward", "fqn": ["hubspot_source", "stg_hubspot__email_event_forward"], "alias": "stg_hubspot__email_event_forward", "checksum": {"name": "sha256", "checksum": "d4eccb85e8409a16834145d08b028902bd6dad86620579866468492f67e3cddb"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a FORWARD email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "browser": {"name": "browser", "description": "{{ doc(\"email_event_browser\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "geo_location": {"name": "geo_location", "description": "{{ doc(\"email_event_location\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ip_address": {"name": "ip_address", "description": "{{ doc(\"email_event_ip_address\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_agent": {"name": "user_agent", "description": "{{ doc(\"email_event_user_agent\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__email.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434197.807055, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__email_event_forward`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_forward_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__email_event_forward_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__email_event_forward_tmp')),\n                staging_columns=get_email_event_forward_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        browser,\n        id as event_id,\n        ip_address,\n        location as geo_location,\n        user_agent\n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_forward_tmp", "package": null, "version": null}, {"name": "stg_hubspot__email_event_forward_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_email_event_forward_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__ticket_deal": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__ticket_deal", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__ticket_deal.sql", "original_file_path": "models/stg_hubspot__ticket_deal.sql", "unique_id": "model.hubspot_source.stg_hubspot__ticket_deal", "fqn": ["hubspot_source", "stg_hubspot__ticket_deal"], "alias": "stg_hubspot__ticket_deal", "checksum": {"name": "sha256", "checksum": "4a1fd329ac12796f5248554414442d6028339f7a00b803e0a67b1b229a6d5607"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a 'link' between a ticket and a deal.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_id": {"name": "ticket_id", "description": "The ID of the related ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_id": {"name": "deal_id", "description": "The ID of the related deal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__ticket.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434197.9430091, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__ticket_deal`", "raw_code": "{{ config(enabled=(var('hubspot_service_enabled', false) and var('hubspot_ticket_deal_enabled', false))) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__ticket_deal_tmp') }}\n\n), macro as (\n\n    select\n        {% set default_cols = adapter.get_columns_in_relation(ref('stg_hubspot__ticket_deal_tmp')) %}\n        {% set new_cols = fivetran_utils.remove_prefix_from_columns(columns=default_cols, \n            prefix='property_hs_',exclude=get_macro_columns(get_ticket_deal_columns())) %}\n        {{\n            fivetran_utils.fill_staging_columns(source_columns=default_cols,\n                staging_columns=get_ticket_deal_columns()\n            )\n        }}\n        {% if new_cols | length > 0 %} \n            ,{{ new_cols }} \n        {% endif %}\n    from base\n\n)\n\nselect *\nfrom macro", "language": "sql", "refs": [{"name": "stg_hubspot__ticket_deal_tmp", "package": null, "version": null}, {"name": "stg_hubspot__ticket_deal_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.hubspot_source.get_ticket_deal_columns", "macro.hubspot_source.get_macro_columns", "macro.fivetran_utils.remove_prefix_from_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__email_event_bounce": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__email_event_bounce", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__email_event_bounce.sql", "original_file_path": "models/stg_hubspot__email_event_bounce.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event_bounce", "fqn": ["hubspot_source", "stg_hubspot__email_event_bounce"], "alias": "stg_hubspot__email_event_bounce", "checksum": {"name": "sha256", "checksum": "671d9fd3b7f60ddbbd22dbbfa1bd080c78d4228d72c850f6212582f1ba4c4356"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a BOUNCE email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bounce_category": {"name": "bounce_category", "description": "The best-guess of the type of bounce encountered. \nIf an appropriate category couldn't be determined, this property is omitted. See below for the possible values. \nNote that this is a derived value, and may be modified at any time to improve the accuracy of classification.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "returned_response": {"name": "returned_response", "description": "The full response from the recipient's email server.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "returned_status": {"name": "returned_status", "description": "The status code returned from the recipient's email server.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__email.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434197.794019, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__email_event_bounce`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_bounce_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__email_event_bounce_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__email_event_bounce_tmp')),\n                staging_columns=get_email_event_bounce_columns()\n            )\n        }}\n    from base\n    \n), fields as (\n\n    select\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        category as bounce_category,\n        id as event_id,\n        response as returned_response,\n        status as returned_status\n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_bounce_tmp", "package": null, "version": null}, {"name": "stg_hubspot__email_event_bounce_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_email_event_bounce_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__ticket_engagement": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__ticket_engagement", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__ticket_engagement.sql", "original_file_path": "models/stg_hubspot__ticket_engagement.sql", "unique_id": "model.hubspot_source.stg_hubspot__ticket_engagement", "fqn": ["hubspot_source", "stg_hubspot__ticket_engagement"], "alias": "stg_hubspot__ticket_engagement", "checksum": {"name": "sha256", "checksum": "46a78502445c1868aaf2192d933782992a1fa010baccca885c8e4e7b325a49e6"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a 'link' between a ticket and an engagement.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_id": {"name": "ticket_id", "description": "The ID of the related ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the related deal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__ticket.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434197.943788, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__ticket_engagement`", "raw_code": "{{ config(enabled=var('hubspot_service_enabled', False)) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__ticket_engagement_tmp') }}\n\n), macro as (\n\n    select\n        {% set default_cols = adapter.get_columns_in_relation(ref('stg_hubspot__ticket_engagement_tmp')) %}\n        {% set new_cols = fivetran_utils.remove_prefix_from_columns(columns=default_cols, \n            prefix='property_hs_',exclude=get_macro_columns(get_ticket_engagement_columns())) %}\n        {{\n            fivetran_utils.fill_staging_columns(source_columns=default_cols,\n                staging_columns=get_ticket_engagement_columns()\n            )\n        }}\n        {% if new_cols | length > 0 %} \n            ,{{ new_cols }} \n        {% endif %}\n    from base\n\n)\n\nselect *\nfrom macro", "language": "sql", "refs": [{"name": "stg_hubspot__ticket_engagement_tmp", "package": null, "version": null}, {"name": "stg_hubspot__ticket_engagement_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.hubspot_source.get_ticket_engagement_columns", "macro.hubspot_source.get_macro_columns", "macro.fivetran_utils.remove_prefix_from_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__ticket_pipeline_stage": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__ticket_pipeline_stage", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__ticket_pipeline_stage.sql", "original_file_path": "models/stg_hubspot__ticket_pipeline_stage.sql", "unique_id": "model.hubspot_source.stg_hubspot__ticket_pipeline_stage", "fqn": ["hubspot_source", "stg_hubspot__ticket_pipeline_stage"], "alias": "stg_hubspot__ticket_pipeline_stage", "checksum": {"name": "sha256", "checksum": "c7f68a6e572d49bd8f0b702db2b91bf73b82e3eed6a4e2945ba751417c5e965d"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a ticket pipeline stage.", "columns": {"is_ticket_pipeline_stage_deleted": {"name": "is_ticket_pipeline_stage_deleted", "description": "{{ doc(\"is_deleted\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Boolean indicating whether the pipeline stage is active.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "display_order": {"name": "display_order", "description": "Used to determine the order in which the stages appear when viewed in HubSpot.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_closed": {"name": "is_closed", "description": "Boolean indicating if the pipeline stage is closed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pipeline_stage_label": {"name": "pipeline_stage_label", "description": "The human-readable label for the stage. The label is used when showing the stage in HubSpot.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_pipeline_id": {"name": "ticket_pipeline_id", "description": "The ID of the pipeline.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_pipeline_stage_id": {"name": "ticket_pipeline_stage_id", "description": "The ID of the pipeline stage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_state": {"name": "ticket_state", "description": "State of the ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_pipeline_stage_created_at": {"name": "ticket_pipeline_stage_created_at", "description": "A timestamp representing when the record was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_pipeline_stage_updated_at": {"name": "ticket_pipeline_stage_updated_at", "description": "A timestamp representing when the record was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__ticket.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434197.952968, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__ticket_pipeline_stage`", "raw_code": "{{ config(enabled=var('hubspot_service_enabled', False)) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__ticket_pipeline_stage_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__ticket_pipeline_stage_tmp')),\n                staging_columns=get_ticket_pipeline_stage_columns()\n            )\n        }}\n\n    from base\n),\n\nfinal as (\n\n    select\n        _fivetran_deleted as is_ticket_pipeline_stage_deleted,\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        active as is_active,\n        display_order,\n        is_closed,\n        label as pipeline_stage_label,\n        cast(pipeline_id as {{ dbt.type_int() }} ) as ticket_pipeline_id,\n        cast(stage_id as {{ dbt.type_int() }} ) as ticket_pipeline_stage_id,\n        ticket_state,\n        created_at as ticket_pipeline_stage_created_at,\n        updated_at as ticket_pipeline_stage_updated_at\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_hubspot__ticket_pipeline_stage_tmp", "package": null, "version": null}, {"name": "stg_hubspot__ticket_pipeline_stage_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.hubspot_source.get_ticket_pipeline_stage_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp", "macro.dbt.type_int"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__engagement_company": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__engagement_company", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__engagement_company.sql", "original_file_path": "models/stg_hubspot__engagement_company.sql", "unique_id": "model.hubspot_source.stg_hubspot__engagement_company", "fqn": ["hubspot_source", "stg_hubspot__engagement_company"], "alias": "stg_hubspot__engagement_company", "checksum": {"name": "sha256", "checksum": "65b755efb0c315c02001f64c794ec448d48903826ffe3ff3a59e1378dbe2efd0"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a 'link' between a company and an engagement.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_id": {"name": "company_id", "description": "The ID of the related company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the related engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__engagement.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434197.900681, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__engagement_company`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_company_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__engagement_company_tmp') }}\n\n), macro as (\n\n    select \n        {% set default_cols = adapter.get_columns_in_relation(ref('stg_hubspot__engagement_company_tmp')) %}\n        {% set new_cols = fivetran_utils.remove_prefix_from_columns(columns=default_cols, \n            prefix='property_hs_',exclude=get_macro_columns(get_engagement_company_columns())) %}\n        {{\n            fivetran_utils.fill_staging_columns(source_columns=default_cols,\n                staging_columns=get_engagement_company_columns()\n            )\n        }}\n        {% if new_cols | length > 0 %} \n            ,{{ new_cols }} \n        {% endif %}\n    from base\n)\n\nselect *\nfrom macro", "language": "sql", "refs": [{"name": "stg_hubspot__engagement_company_tmp", "package": null, "version": null}, {"name": "stg_hubspot__engagement_company_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_engagement_company_columns", "macro.hubspot_source.get_macro_columns", "macro.fivetran_utils.remove_prefix_from_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__email_event_deferred": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__email_event_deferred", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__email_event_deferred.sql", "original_file_path": "models/stg_hubspot__email_event_deferred.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event_deferred", "fqn": ["hubspot_source", "stg_hubspot__email_event_deferred"], "alias": "stg_hubspot__email_event_deferred", "checksum": {"name": "sha256", "checksum": "5c080e559db29896f09bc8d0197610bc5c1ba579e9707e89d6e3525d8e58a4f7"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a DEFERRED email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "attempt_number": {"name": "attempt_number", "description": "The delivery attempt number.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "returned_response": {"name": "returned_response", "description": "The full response from the recipient's email server.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__email.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434197.8008058, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__email_event_deferred`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_deferred_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__email_event_deferred_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__email_event_deferred_tmp')),\n                staging_columns=get_email_event_deferred_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        attempt as attempt_number,\n        id as event_id,\n        response as returned_response\n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_deferred_tmp", "package": null, "version": null}, {"name": "stg_hubspot__email_event_deferred_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_email_event_deferred_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__email_event_click": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__email_event_click", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__email_event_click.sql", "original_file_path": "models/stg_hubspot__email_event_click.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event_click", "fqn": ["hubspot_source", "stg_hubspot__email_event_click"], "alias": "stg_hubspot__email_event_click", "checksum": {"name": "sha256", "checksum": "16a3df01bd62140fbd741c41e45bea6e3cf005c1852b4685d8d675d3df7ff8fa"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a CLICK email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "browser": {"name": "browser", "description": "{{ doc(\"email_event_browser\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "click_url": {"name": "click_url", "description": "The URL within the message that the recipient clicked.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "geo_location": {"name": "geo_location", "description": "{{ doc(\"email_event_location\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ip_address": {"name": "ip_address", "description": "{{ doc(\"email_event_ip_address\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "referer_url": {"name": "referer_url", "description": "The URL of the webpage that linked to the URL clicked. Whether this is provided, and what its value is, is determined by the recipient's email client.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_agent": {"name": "user_agent", "description": "{{ doc(\"email_event_user_agent\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__email.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434197.79932, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__email_event_click`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_click_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__email_event_click_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__email_event_click_tmp')),\n                staging_columns=get_email_event_click_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        browser,\n        id as event_id,\n        ip_address,\n        location as geo_location,\n        referer as referer_url,\n        url as click_url,\n        user_agent\n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_click_tmp", "package": null, "version": null}, {"name": "stg_hubspot__email_event_click_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_email_event_click_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__engagement_call": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__engagement_call", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__engagement_call.sql", "original_file_path": "models/stg_hubspot__engagement_call.sql", "unique_id": "model.hubspot_source.stg_hubspot__engagement_call", "fqn": ["hubspot_source", "stg_hubspot__engagement_call"], "alias": "stg_hubspot__engagement_call", "checksum": {"name": "sha256", "checksum": "845dd40c12901536fe9f0e98ce49faf56879207f3734807073c92f225713491e"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a CALL engagement event. All source `property_hs_*` fields", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean to mark rows that were deleted in the source database.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_type": {"name": "engagement_type", "description": "The type of the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "This field marks the call's time of creation and determines where the call sits on the record timeline. You can use either a Unix timestamp in milliseconds or UTC format. \nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "occurred_timestamp": {"name": "occurred_timestamp", "description": "This field marks the call's time of occurrence and determines where the call sits on the record timeline. You can use either a Unix timestamp in milliseconds or UTC format. \nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "The ID of the owner associated with the call. This field determines the user listed as the call creator on the record timeline.\nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "The ID of the team associated with the call. This field determines the team listed as the call creator on the record timeline.\nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__engagement.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434197.899837, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__engagement_call`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_call_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__engagement_call_tmp') }}\n\n), macro as (\n\n    select\n        {% set default_cols = adapter.get_columns_in_relation(ref('stg_hubspot__engagement_call_tmp')) %}\n        {% set new_cols = fivetran_utils.remove_prefix_from_columns(columns=default_cols, \n            prefix='property_hs_',exclude=get_macro_columns(get_engagement_call_columns())) %}\n        {{\n            fivetran_utils.fill_staging_columns(source_columns=default_cols,\n                staging_columns=get_engagement_call_columns()\n            )\n        }}\n        {% if new_cols | length > 0 %} \n            ,{{ new_cols }} \n        {% endif %}\n    from base\n\n)\n\nselect *\nfrom macro", "language": "sql", "refs": [{"name": "stg_hubspot__engagement_call_tmp", "package": null, "version": null}, {"name": "stg_hubspot__engagement_call_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_engagement_call_columns", "macro.hubspot_source.get_macro_columns", "macro.fivetran_utils.remove_prefix_from_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__engagement": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__engagement", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__engagement.sql", "original_file_path": "models/stg_hubspot__engagement.sql", "unique_id": "model.hubspot_source.stg_hubspot__engagement", "fqn": ["hubspot_source", "stg_hubspot__engagement"], "alias": "stg_hubspot__engagement", "checksum": {"name": "sha256", "checksum": "296e1f06efa0f834f31878eb6dd7e8585c15eb53ccc44fd04f7ed71b81787f82"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents an engagement", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_type": {"name": "engagement_type", "description": "One of NOTE, EMAIL, TASK, MEETING, or CALL, the type of the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Whether the engagement is currently being shown in the UI.\nPLEASE NOTE - This field will only be populated for pre HubSpot v3 API versions. This field is only included to allow for backwards compatibility between HubSpot API versions. This field will be deprecated in the near future.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "occurred_timestamp": {"name": "occurred_timestamp", "description": "A timestamp in representing the time that the engagement should appear in the timeline.\nPLEASE NOTE - This field will only be populated for pre HubSpot v3 API versions. This field is only included to allow for backwards compatibility between HubSpot API versions. This field will be deprecated in the near future.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "This field marks the call's time of creation and determines where the call sits on the record timeline. You can use either a Unix timestamp in milliseconds or UTC format. \nPLEASE NOTE: This field will only be populated for pre HubSpot v3 API versions. This field is only included to allow for backwards compatibility between HubSpot API versions. This field will be deprecated in the near future.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "The ID of the engagement's owner.\nPLEASE NOTE - This field will only be populated for pre HubSpot v3 API versions. This field is only included to allow for backwards compatibility between HubSpot API versions. This field will be deprecated in the near future.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "{{ doc(\"portal_id\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__engagement.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434197.907895, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__engagement`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__engagement_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__engagement_tmp')),\n                staging_columns=get_engagement_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        id as engagement_id,\n        created_timestamp,\n        owner_id,\n        occurred_timestamp,\n        portal_id,\n        engagement_type,\n        is_active\n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__engagement_tmp", "package": null, "version": null}, {"name": "stg_hubspot__engagement_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_engagement_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__contact_merge_audit": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__contact_merge_audit", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__contact_merge_audit.sql", "original_file_path": "models/stg_hubspot__contact_merge_audit.sql", "unique_id": "model.hubspot_source.stg_hubspot__contact_merge_audit", "fqn": ["hubspot_source", "stg_hubspot__contact_merge_audit"], "alias": "stg_hubspot__contact_merge_audit", "checksum": {"name": "sha256", "checksum": "24a493f53e2ee0a9c53f4906635c32992e3e9c19971caee2cd8cf4f00ef5bcd4"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record contains a contact merge event and the contacts effected by the merge.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "canonical_vid": {"name": "canonical_vid", "description": "The contact ID of the contact which the vid_to_merge contact was merged into.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "entity_id": {"name": "entity_id", "description": "The ID of the related entity.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "The contact's first name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "The contact's last name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "num_properties_moved": {"name": "num_properties_moved", "description": "The number of properties which were removed from the merged contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "timestamp_at": {"name": "timestamp_at", "description": "Timestamp of when the contacts were merged.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "The ID of the user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vid_to_merge": {"name": "vid_to_merge", "description": "The ID of the contact which was merged.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__contact.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434197.774345, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__contact_merge_audit`", "raw_code": "{{ config(enabled=(var('hubspot_marketing_enabled', true) and var('hubspot_contact_merge_audit_enabled', false))) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__contact_merge_audit_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__contact_merge_audit_tmp')),\n                staging_columns=get_contact_merge_audit_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        canonical_vid,\n        contact_id,\n        entity_id,\n        first_name,\n        last_name,\n        num_properties_moved,\n        cast(\n        {%- if target.type == 'redshift' %}\n        \"timestamp\"\n        {%- else %} \n        timestamp {%- endif %}\n        as {{ dbt.type_timestamp() }}) as timestamp_at,\n        user_id,\n        vid_to_merge,\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced\n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__contact_merge_audit_tmp", "package": null, "version": null}, {"name": "stg_hubspot__contact_merge_audit_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.hubspot_source.get_contact_merge_audit_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__ticket_company": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__ticket_company", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__ticket_company.sql", "original_file_path": "models/stg_hubspot__ticket_company.sql", "unique_id": "model.hubspot_source.stg_hubspot__ticket_company", "fqn": ["hubspot_source", "stg_hubspot__ticket_company"], "alias": "stg_hubspot__ticket_company", "checksum": {"name": "sha256", "checksum": "3d1d0df1761a6a02fbf3bc7126bd7e34815064c87e8d88b00ba3697eab9c7dfd"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a 'link' between a ticket and company.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_id": {"name": "ticket_id", "description": "The ID of the related ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_id": {"name": "company_id", "description": "The ID of the related company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__ticket.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434197.9415, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__ticket_company`", "raw_code": "{{ config(enabled=var('hubspot_service_enabled', False)) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__ticket_company_tmp') }}\n\n), macro as (\n\n    select\n        {% set default_cols = adapter.get_columns_in_relation(ref('stg_hubspot__ticket_company_tmp')) %}\n        {% set new_cols = fivetran_utils.remove_prefix_from_columns(columns=default_cols, \n            prefix='property_hs_',exclude=get_macro_columns(get_ticket_company_columns())) %}\n        {{\n            fivetran_utils.fill_staging_columns(source_columns=default_cols,\n                staging_columns=get_ticket_company_columns()\n            )\n        }}\n        {% if new_cols | length > 0 %} \n            ,{{ new_cols }} \n        {% endif %}\n    from base\n\n)\n\nselect *\nfrom macro", "language": "sql", "refs": [{"name": "stg_hubspot__ticket_company_tmp", "package": null, "version": null}, {"name": "stg_hubspot__ticket_company_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.hubspot_source.get_ticket_company_columns", "macro.hubspot_source.get_macro_columns", "macro.fivetran_utils.remove_prefix_from_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__email_campaign": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__email_campaign", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__email_campaign.sql", "original_file_path": "models/stg_hubspot__email_campaign.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_campaign", "fqn": ["hubspot_source", "stg_hubspot__email_campaign"], "alias": "stg_hubspot__email_campaign", "checksum": {"name": "sha256", "checksum": "1b83c3c11cfc619842ed7b2d9552656afa484bc9692c796396339c6a8b673498"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents an email campaign in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "app_id": {"name": "app_id", "description": "The app ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "app_name": {"name": "app_name", "description": "The app name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "content_id": {"name": "content_id", "description": "The ID of the content.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_campaign_id": {"name": "email_campaign_id", "description": "The ID of the email campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_campaign_name": {"name": "email_campaign_name", "description": "The name of the email campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_campaign_sub_type": {"name": "email_campaign_sub_type", "description": "The email campaign sub-type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_campaign_subject": {"name": "email_campaign_subject", "description": "The subject of the email campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_campaign_type": {"name": "email_campaign_type", "description": "The email campaign type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "num_included": {"name": "num_included", "description": "The number of messages included as part of the email campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "num_queued": {"name": "num_queued", "description": "The number of messages queued as part of the email campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__email.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434197.824528, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__email_campaign`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__email_campaign_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__email_campaign_tmp')),\n                staging_columns=get_email_campaign_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        app_id,\n        app_name,\n        content_id,\n        id as email_campaign_id,\n        name as email_campaign_name,\n        num_included,\n        num_queued,\n        sub_type as email_campaign_sub_type,\n        subject as email_campaign_subject,\n        type as email_campaign_type\n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__email_campaign_tmp", "package": null, "version": null}, {"name": "stg_hubspot__email_campaign_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_email_campaign_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__email_event_print": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__email_event_print", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__email_event_print.sql", "original_file_path": "models/stg_hubspot__email_event_print.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event_print", "fqn": ["hubspot_source", "stg_hubspot__email_event_print"], "alias": "stg_hubspot__email_event_print", "checksum": {"name": "sha256", "checksum": "6a13b2210fdb5f229744329c16125a2444fcf405ce11f0821eb54cc0ddf3fa5f"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a PRINT email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "browser": {"name": "browser", "description": "{{ doc(\"email_event_browser\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "geo_location": {"name": "geo_location", "description": "{{ doc(\"email_event_location\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ip_address": {"name": "ip_address", "description": "{{ doc(\"email_event_ip_address\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_agent": {"name": "user_agent", "description": "{{ doc(\"email_event_user_agent\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__email.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434197.80937, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__email_event_print`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_print_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__email_event_print_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__email_event_print_tmp')),\n                staging_columns=get_email_event_print_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        browser,\n        id as event_id,\n        ip_address,\n        location as geo_location,\n        user_agent\n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_print_tmp", "package": null, "version": null}, {"name": "stg_hubspot__email_event_print_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_email_event_print_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__ticket_property_history": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__ticket_property_history", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__ticket_property_history.sql", "original_file_path": "models/stg_hubspot__ticket_property_history.sql", "unique_id": "model.hubspot_source.stg_hubspot__ticket_property_history", "fqn": ["hubspot_source", "stg_hubspot__ticket_property_history"], "alias": "stg_hubspot__ticket_property_history", "checksum": {"name": "sha256", "checksum": "42d5efd1f9d02d5625e245e9634b829b9c8a0717e602c48cac6066394489d0b8"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a change to ticket record in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_start": {"name": "_fivetran_start", "description": "The (UTC DATETIME) to keep track of the time when a record is first created or modified in the source database.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_source": {"name": "change_source", "description": "{{ doc(\"history_source\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_source_id": {"name": "change_source_id", "description": "{{ doc(\"history_source_id\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_timestamp": {"name": "change_timestamp", "description": "{{ doc(\"history_timestamp\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_id": {"name": "ticket_id", "description": "The ID of the related ticket record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "field_name": {"name": "field_name", "description": "{{ doc(\"history_name\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "new_value": {"name": "new_value", "description": "{{ doc(\"history_value\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__ticket.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434197.944791, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__ticket_property_history`", "raw_code": "{{ config(enabled=var('hubspot_service_enabled', False)) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__ticket_property_history_tmp') }}\n\n), macro as (\n\n    select\n        {% set default_cols = adapter.get_columns_in_relation(ref('stg_hubspot__ticket_property_history_tmp')) %}\n        {% set new_cols = fivetran_utils.remove_prefix_from_columns(columns=default_cols, \n            prefix='property_hs_',exclude=get_macro_columns(get_ticket_property_history_columns())) %}\n        {{\n            fivetran_utils.fill_staging_columns(source_columns=default_cols,\n                staging_columns=get_ticket_property_history_columns()\n            )\n        }}\n        {% if new_cols | length > 0 %} \n            ,{{ new_cols }} \n        {% endif %}\n        from base\n\n)\n\nselect *\nfrom macro", "language": "sql", "refs": [{"name": "stg_hubspot__ticket_property_history_tmp", "package": null, "version": null}, {"name": "stg_hubspot__ticket_property_history_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.hubspot_source.get_ticket_property_history_columns", "macro.hubspot_source.get_macro_columns", "macro.fivetran_utils.remove_prefix_from_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__email_event_open": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__email_event_open", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__email_event_open.sql", "original_file_path": "models/stg_hubspot__email_event_open.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event_open", "fqn": ["hubspot_source", "stg_hubspot__email_event_open"], "alias": "stg_hubspot__email_event_open", "checksum": {"name": "sha256", "checksum": "a0bd3e1a3d51ee0c5a375d55982c1e4a2c9ac7f40f0a31ab4ac2d6b2d331edf2"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a OPEN email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "browser": {"name": "browser", "description": "{{ doc(\"email_event_browser\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "duration_open": {"name": "duration_open", "description": "If provided and nonzero, the approximate number of milliseconds the user had opened the email.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "geo_location": {"name": "geo_location", "description": "{{ doc(\"email_event_location\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ip_address": {"name": "ip_address", "description": "{{ doc(\"email_event_ip_address\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_agent": {"name": "user_agent", "description": "{{ doc(\"email_event_user_agent\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__email.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434197.808424, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__email_event_open`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_open_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__email_event_open_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__email_event_open_tmp')),\n                staging_columns=get_email_event_open_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        browser,\n        duration as duration_open,\n        id as event_id,\n        ip_address,\n        location as geo_location,\n        user_agent\n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_open_tmp", "package": null, "version": null}, {"name": "stg_hubspot__email_event_open_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_email_event_open_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__email_event_sent": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__email_event_sent", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__email_event_sent.sql", "original_file_path": "models/stg_hubspot__email_event_sent.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event_sent", "fqn": ["hubspot_source", "stg_hubspot__email_event_sent"], "alias": "stg_hubspot__email_event_sent", "checksum": {"name": "sha256", "checksum": "ed1e29f01e4798084ef7df929267165aa73f2c29ed3c3aa39cc7c3d154beb1a2"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a SENT email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bcc_emails": {"name": "bcc_emails", "description": "The 'cc' field of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cc_emails": {"name": "cc_emails", "description": "The 'bcc' field of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_subject": {"name": "email_subject", "description": "The subject line of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "from_email": {"name": "from_email", "description": "The 'from' field of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reply_to_email": {"name": "reply_to_email", "description": "The 'reply-to' field of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__email.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434197.810422, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__email_event_sent`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_sent_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__email_event_sent_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__email_event_sent_tmp')),\n                staging_columns=get_email_event_sent_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        bcc as bcc_emails,\n        cc as cc_emails,\n        from_email, -- source field name = from ; alias declared in macros/get_email_event_sent_columns.sql\n        id as event_id,\n        reply_to as reply_to_email,\n        subject as email_subject\n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_sent_tmp", "package": null, "version": null}, {"name": "stg_hubspot__email_event_sent_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_email_event_sent_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__ticket": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__ticket", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__ticket.sql", "original_file_path": "models/stg_hubspot__ticket.sql", "unique_id": "model.hubspot_source.stg_hubspot__ticket", "fqn": ["hubspot_source", "stg_hubspot__ticket"], "alias": "stg_hubspot__ticket", "checksum": {"name": "sha256", "checksum": "0b2bbc1b942645b3af3d2338dd6a215c058ad2ecde00904a4b27232208428b69"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a ticket in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_id": {"name": "ticket_id", "description": "ID of the ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_ticket_deleted": {"name": "is_ticket_deleted", "description": "{{ doc(\"is_deleted\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "closed_at": {"name": "closed_at", "description": "The date the ticket was closed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The date the ticket was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_agent_reply_at": {"name": "first_agent_reply_at", "description": "the date for the first agent reply on the ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_pipeline_id": {"name": "ticket_pipeline_id", "description": "The ID of the ticket's pipeline.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_pipeline_stage_id": {"name": "ticket_pipeline_stage_id", "description": "The ID of the ticket's pipeline stage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_priority": {"name": "ticket_priority", "description": "The priority of the ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_category": {"name": "ticket_category", "description": "The category of the ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "The ID of the deal's owner.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_subject": {"name": "ticket_subject", "description": "Short summary of ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_content": {"name": "ticket_content", "description": "Text in body of the ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__ticket.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434197.949672, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__ticket`", "raw_code": "{{ config(enabled=var('hubspot_service_enabled', False)) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__ticket_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__ticket_tmp')),\n                staging_columns=get_ticket_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n\n{% if var('hubspot__pass_through_all_columns', false) %}\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__ticket_tmp')),\n                staging_columns=get_ticket_columns()\n            )\n        }}\n        {% if all_passthrough_column_check('stg_hubspot__ticket_tmp',get_ticket_columns()) > 0 %}\n        -- just pass everything through if extra columns are present, but ensure required columns are present.\n        ,{{  \n            fivetran_utils.remove_prefix_from_columns(\n                columns=adapter.get_columns_in_relation(ref('stg_hubspot__ticket_tmp')), \n                prefix='property_', exclude=get_macro_columns(get_ticket_columns())) \n        }}\n        {% endif %}\n    from base\n\n{% else %}\n        -- just default columns + explicitly configured passthrough columns\n        -- a few columns below are aliased within the macros/get_ticket_columns.sql macro\n        ticket_id,\n        is_ticket_deleted,\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        cast(closed_at as {{ dbt.type_timestamp() }}) as closed_at,\n        cast(created_at as {{ dbt.type_timestamp() }}) as created_at,\n        first_agent_reply_at,\n        ticket_pipeline_id,\n        ticket_pipeline_stage_id,\n        ticket_category,\n        ticket_priority,\n        owner_id,\n        ticket_subject,\n        ticket_content\n\n        --The below macro adds the fields defined within your hubspot__ticket_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('hubspot__ticket_pass_through_columns') }}\n\n        -- The below macro add the ability to create calculated fields using the hubspot__ticket_calculated_fields variable.\n        {{ fivetran_utils.calculated_fields('hubspot__ticket_calculated_fields') }}\n        \n    from macro\n{% endif %}\n\n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__ticket_tmp", "package": null, "version": null}, {"name": "stg_hubspot__ticket_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.hubspot_source.get_ticket_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp", "macro.fivetran_utils.fill_pass_through_columns", "macro.fivetran_utils.calculated_fields"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__email_event_dropped_tmp": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__email_event_dropped_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__email_event_dropped_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__email_event_dropped_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event_dropped_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__email_event_dropped_tmp"], "alias": "stg_hubspot__email_event_dropped_tmp", "checksum": {"name": "sha256", "checksum": "75d9864bfd36863b5684d14452f06edb2d5b6f55073bb3ce87222ad3b9ad568c"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434196.621563, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__email_event_dropped_tmp`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_dropped_enabled'])) }}\n\nselect *\nfrom {{ var('email_event_dropped') }}", "language": "sql", "refs": [], "sources": [["hubspot", "email_event_dropped"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__email_event_sent_tmp": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__email_event_sent_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__email_event_sent_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__email_event_sent_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event_sent_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__email_event_sent_tmp"], "alias": "stg_hubspot__email_event_sent_tmp", "checksum": {"name": "sha256", "checksum": "bc8bd2c8714ea036adae113b58a155a0cbabeaaa775f929d04c0a39261a158ac"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434196.6302679, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__email_event_sent_tmp`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_sent_enabled'])) }}\n\nselect *\nfrom {{ var('email_event_sent') }}", "language": "sql", "refs": [], "sources": [["hubspot", "email_event_sent"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__ticket_company_tmp": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__ticket_company_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__ticket_company_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__ticket_company_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__ticket_company_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__ticket_company_tmp"], "alias": "stg_hubspot__ticket_company_tmp", "checksum": {"name": "sha256", "checksum": "2750aa369c26bf624c0b7b4149424b18b8c47e3418e2278e0197be755b8fb719"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434196.6501, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__ticket_company_tmp`", "raw_code": "{{ config(enabled=var('hubspot_service_enabled', False)) }}\n\nselect *\nfrom {{ var('ticket_company') }}", "language": "sql", "refs": [], "sources": [["hubspot", "ticket_company"]], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__ticket_tmp": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__ticket_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__ticket_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__ticket_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__ticket_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__ticket_tmp"], "alias": "stg_hubspot__ticket_tmp", "checksum": {"name": "sha256", "checksum": "2e188e61ddd6146d4560c63cc84857ce0688f723f8eb307a6874e3628367fa11"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434196.710424, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__ticket_tmp`", "raw_code": "{{ config(enabled=var('hubspot_service_enabled', False)) }}\n\nselect *\nfrom {{ var('ticket') }}", "language": "sql", "refs": [], "sources": [["hubspot", "ticket"]], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__ticket_property_history_tmp": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__ticket_property_history_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__ticket_property_history_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__ticket_property_history_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__ticket_property_history_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__ticket_property_history_tmp"], "alias": "stg_hubspot__ticket_property_history_tmp", "checksum": {"name": "sha256", "checksum": "67714ac39dba14de0c32f07d45277dd5d37018d5cb17d2ac9ccb653356230d87"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434196.7211761, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__ticket_property_history_tmp`", "raw_code": "{{ config(enabled=var('hubspot_service_enabled', False)) }}\n\nselect *\nfrom {{ var('ticket_property_history') }}", "language": "sql", "refs": [], "sources": [["hubspot", "ticket_property_history"]], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__ticket_pipeline_tmp": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__ticket_pipeline_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__ticket_pipeline_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__ticket_pipeline_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__ticket_pipeline_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__ticket_pipeline_tmp"], "alias": "stg_hubspot__ticket_pipeline_tmp", "checksum": {"name": "sha256", "checksum": "a3de9915ced981b97e915972f856d8ed2c74750e69eac7b12d19a2fe50a4b343"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434196.730647, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__ticket_pipeline_tmp`", "raw_code": "{{ config(enabled=var('hubspot_service_enabled', False)) }}\n\nselect * \nfrom {{ var('ticket_pipeline') }}", "language": "sql", "refs": [], "sources": [["hubspot", "ticket_pipeline"]], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__engagement_company_tmp": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__engagement_company_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__engagement_company_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__engagement_company_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__engagement_company_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__engagement_company_tmp"], "alias": "stg_hubspot__engagement_company_tmp", "checksum": {"name": "sha256", "checksum": "11b7f70b28b11da33f675786b187213badc78de76d2fb628962a146e3bf557e3"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434196.741235, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__engagement_company_tmp`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_company_enabled'])) }}\n\nselect *\nfrom {{ var('engagement_company') }}", "language": "sql", "refs": [], "sources": [["hubspot", "engagement_company"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__email_event_status_change_tmp": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__email_event_status_change_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__email_event_status_change_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__email_event_status_change_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event_status_change_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__email_event_status_change_tmp"], "alias": "stg_hubspot__email_event_status_change_tmp", "checksum": {"name": "sha256", "checksum": "2e8c6b4f58a33a8e20574640a24a36adb6bec401c38fafeaa6a82f444eb4a347"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434196.760763, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__email_event_status_change_tmp`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_status_change_enabled'])) }}\n\nselect *\nfrom {{ var('email_event_status_change') }}", "language": "sql", "refs": [], "sources": [["hubspot", "email_event_status_change"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__engagement_note_tmp": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__engagement_note_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__engagement_note_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__engagement_note_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__engagement_note_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__engagement_note_tmp"], "alias": "stg_hubspot__engagement_note_tmp", "checksum": {"name": "sha256", "checksum": "33a6c69534580a30d3e1f376589600e1012b2c14ca05a863df5e28edc3ee2041"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434196.770856, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__engagement_note_tmp`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_note_enabled'])) }}\n\nselect *\nfrom {{ var('engagement_note') }}", "language": "sql", "refs": [], "sources": [["hubspot", "engagement_note"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__ticket_contact_tmp": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__ticket_contact_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__ticket_contact_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__ticket_contact_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__ticket_contact_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__ticket_contact_tmp"], "alias": "stg_hubspot__ticket_contact_tmp", "checksum": {"name": "sha256", "checksum": "783bb68db2395da8ff9a122ca813d8c8e936c5299e0fe74d9db290538f65e332"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434196.780392, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__ticket_contact_tmp`", "raw_code": "{{ config(enabled=var('hubspot_service_enabled', False)) }}\n\nselect *\nfrom {{ var('ticket_contact') }}", "language": "sql", "refs": [], "sources": [["hubspot", "ticket_contact"]], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__contact_merge_audit_tmp": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__contact_merge_audit_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__contact_merge_audit_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__contact_merge_audit_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__contact_merge_audit_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__contact_merge_audit_tmp"], "alias": "stg_hubspot__contact_merge_audit_tmp", "checksum": {"name": "sha256", "checksum": "dc8f1c944350dda68447e8f3c2c1f7f21dc3bdf3eb1600b933afd6052b04b531"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434196.80067, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__contact_merge_audit_tmp`", "raw_code": "{{ config(enabled=(var('hubspot_marketing_enabled', true) and var('hubspot_contact_merge_audit_enabled', false))) }}\n\nselect *\nfrom {{ var('contact_merge_audit') }}", "language": "sql", "refs": [], "sources": [["hubspot", "contact_merge_audit"]], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__engagement_deal_tmp": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__engagement_deal_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__engagement_deal_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__engagement_deal_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__engagement_deal_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__engagement_deal_tmp"], "alias": "stg_hubspot__engagement_deal_tmp", "checksum": {"name": "sha256", "checksum": "62c1a24d11dbc742a9a6d6c80bd80fd71cb87304e6875ca8dac6002a1d34a35f"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434196.809433, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__engagement_deal_tmp`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_deal_enabled'])) }}\n\nselect *\nfrom {{ var('engagement_deal') }}", "language": "sql", "refs": [], "sources": [["hubspot", "engagement_deal"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__email_event_print_tmp": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__email_event_print_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__email_event_print_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__email_event_print_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event_print_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__email_event_print_tmp"], "alias": "stg_hubspot__email_event_print_tmp", "checksum": {"name": "sha256", "checksum": "8c6a4c733705fa5fd3299f40a21bbe2974554b51c4f4e10a451a51de21385de5"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434196.8185668, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__email_event_print_tmp`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_print_enabled'])) }}\n\nselect *\nfrom {{ var('email_event_print') }}", "language": "sql", "refs": [], "sources": [["hubspot", "email_event_print"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__email_event_tmp": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__email_event_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__email_event_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__email_event_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__email_event_tmp"], "alias": "stg_hubspot__email_event_tmp", "checksum": {"name": "sha256", "checksum": "f9a2a558cc6eff598f33b55f9b732a042d939a4fdc1e5e30e89ae825c8698453"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434196.8391502, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__email_event_tmp`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled'])) }}\n\nselect *\nfrom {{ var('email_event') }}", "language": "sql", "refs": [], "sources": [["hubspot", "email_event"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__email_event_click_tmp": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__email_event_click_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__email_event_click_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__email_event_click_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event_click_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__email_event_click_tmp"], "alias": "stg_hubspot__email_event_click_tmp", "checksum": {"name": "sha256", "checksum": "1fd3b415892c552b1a990340199850d53c1b36edb7eea4b8558c8ff40c7550f5"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434196.859415, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__email_event_click_tmp`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_click_enabled'])) }}\n\nselect *\nfrom {{ var('email_event_click') }}", "language": "sql", "refs": [], "sources": [["hubspot", "email_event_click"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__engagement_contact_tmp": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__engagement_contact_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__engagement_contact_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__engagement_contact_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__engagement_contact_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__engagement_contact_tmp"], "alias": "stg_hubspot__engagement_contact_tmp", "checksum": {"name": "sha256", "checksum": "248fbddbe58fddf1d5ef630499b8987fabfc48587fa792c42b9779cc8d03d969"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434196.868621, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__engagement_contact_tmp`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_contact_enabled'])) }}\n\nselect *\nfrom {{ var('engagement_contact') }}", "language": "sql", "refs": [], "sources": [["hubspot", "engagement_contact"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__engagement_meeting_tmp": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__engagement_meeting_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__engagement_meeting_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__engagement_meeting_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__engagement_meeting_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__engagement_meeting_tmp"], "alias": "stg_hubspot__engagement_meeting_tmp", "checksum": {"name": "sha256", "checksum": "a65a2b5705a955c1909df71673b7f9bb3ae72195321e2ee7fc3d7f923f9cea43"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434196.890149, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__engagement_meeting_tmp`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_meeting_enabled'])) }}\n\nselect *\nfrom {{ var('engagement_meeting') }}", "language": "sql", "refs": [], "sources": [["hubspot", "engagement_meeting"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__engagement_tmp": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__engagement_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__engagement_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__engagement_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__engagement_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__engagement_tmp"], "alias": "stg_hubspot__engagement_tmp", "checksum": {"name": "sha256", "checksum": "3e059e027d408813043a7f2f1fddf6c63b2a7f304ba6bfa35b6490c8f63f8752"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434196.900356, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__engagement_tmp`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled'])) }}\n\nselect *\nfrom {{ var('engagement') }}", "language": "sql", "refs": [], "sources": [["hubspot", "engagement"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__email_event_delivered_tmp": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__email_event_delivered_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__email_event_delivered_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__email_event_delivered_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event_delivered_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__email_event_delivered_tmp"], "alias": "stg_hubspot__email_event_delivered_tmp", "checksum": {"name": "sha256", "checksum": "3684de6ccfe6f78717820188830ac654a0f634a2408b3831958299192a2bd02b"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434196.909782, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__email_event_delivered_tmp`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_delivered_enabled'])) }}\n\nselect *\nfrom {{ var('email_event_delivered') }}", "language": "sql", "refs": [], "sources": [["hubspot", "email_event_delivered"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__engagement_email_tmp": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__engagement_email_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__engagement_email_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__engagement_email_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__engagement_email_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__engagement_email_tmp"], "alias": "stg_hubspot__engagement_email_tmp", "checksum": {"name": "sha256", "checksum": "2ed50fc7b5c9591b1d6f43f818c6942db2704ade9eded8f846ed3c3939534597"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434196.9203541, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__engagement_email_tmp`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_email_enabled'])) }}\n\nselect *\nfrom {{ var('engagement_email') }}", "language": "sql", "refs": [], "sources": [["hubspot", "engagement_email"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__email_event_forward_tmp": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__email_event_forward_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__email_event_forward_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__email_event_forward_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event_forward_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__email_event_forward_tmp"], "alias": "stg_hubspot__email_event_forward_tmp", "checksum": {"name": "sha256", "checksum": "0987a536fbc831a127be286541f8f2e129b05627b61a42c7b5b468b2e396d533"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434196.9300249, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__email_event_forward_tmp`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_forward_enabled'])) }}\n\nselect *\nfrom {{ var('email_event_forward') }}", "language": "sql", "refs": [], "sources": [["hubspot", "email_event_forward"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__email_event_spam_report_tmp": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__email_event_spam_report_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__email_event_spam_report_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__email_event_spam_report_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event_spam_report_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__email_event_spam_report_tmp"], "alias": "stg_hubspot__email_event_spam_report_tmp", "checksum": {"name": "sha256", "checksum": "23ab7d533323e9fa30f14021c0b3a75f9286a1b2548710ebfefd7801518a6a2e"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434196.940604, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__email_event_spam_report_tmp`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_spam_report_enabled'])) }}\n\nselect *\nfrom {{ var('email_event_spam_report') }}", "language": "sql", "refs": [], "sources": [["hubspot", "email_event_spam_report"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__ticket_engagement_tmp": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__ticket_engagement_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__ticket_engagement_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__ticket_engagement_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__ticket_engagement_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__ticket_engagement_tmp"], "alias": "stg_hubspot__ticket_engagement_tmp", "checksum": {"name": "sha256", "checksum": "10414405797fd08e9fe3d9147cf885a8aaadadaffcc7f5ee582b640938a3d7e1"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434196.949467, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__ticket_engagement_tmp`", "raw_code": "{{ config(enabled=var('hubspot_service_enabled', False)) }}\n\nselect *\nfrom {{ var('ticket_engagement') }}", "language": "sql", "refs": [], "sources": [["hubspot", "ticket_engagement"]], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__email_event_bounce_tmp": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__email_event_bounce_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__email_event_bounce_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__email_event_bounce_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event_bounce_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__email_event_bounce_tmp"], "alias": "stg_hubspot__email_event_bounce_tmp", "checksum": {"name": "sha256", "checksum": "0c40128e617a87678f4d0960989f803a1f09d944b1825957034add2518cf67ec"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434196.959532, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__email_event_bounce_tmp`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_bounce_enabled'])) }}\n\nselect *\nfrom {{ var('email_event_bounce') }}", "language": "sql", "refs": [], "sources": [["hubspot", "email_event_bounce"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__engagement_call_tmp": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__engagement_call_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__engagement_call_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__engagement_call_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__engagement_call_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__engagement_call_tmp"], "alias": "stg_hubspot__engagement_call_tmp", "checksum": {"name": "sha256", "checksum": "26bcbc83ca56742fbf8777fb190bfd1537fd7efd13b18395a8fb4682fe5f0e43"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434196.9689221, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__engagement_call_tmp`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_call_enabled'])) }}\n\nselect *\nfrom {{ var('engagement_call') }}", "language": "sql", "refs": [], "sources": [["hubspot", "engagement_call"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__ticket_pipeline_stage_tmp": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__ticket_pipeline_stage_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__ticket_pipeline_stage_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__ticket_pipeline_stage_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__ticket_pipeline_stage_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__ticket_pipeline_stage_tmp"], "alias": "stg_hubspot__ticket_pipeline_stage_tmp", "checksum": {"name": "sha256", "checksum": "32c23709e02778c7c74907d998eaa8973b1eaf67457935b8ad3af7192b4b3557"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434196.97729, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__ticket_pipeline_stage_tmp`", "raw_code": "{{ config(enabled=var('hubspot_service_enabled', False)) }}\n\nselect * \nfrom {{ var('ticket_pipeline_stage') }}", "language": "sql", "refs": [], "sources": [["hubspot", "ticket_pipeline_stage"]], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__engagement_task_tmp": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__engagement_task_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__engagement_task_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__engagement_task_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__engagement_task_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__engagement_task_tmp"], "alias": "stg_hubspot__engagement_task_tmp", "checksum": {"name": "sha256", "checksum": "7fc87a3a456d6457f392d1e7da823b23cb36b8e9597ae1c4c7de1bdc278c949e"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434196.997138, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__engagement_task_tmp`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_task_enabled'])) }}\n\nselect *\nfrom {{ var('engagement_task') }}", "language": "sql", "refs": [], "sources": [["hubspot", "engagement_task"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__email_event_open_tmp": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__email_event_open_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__email_event_open_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__email_event_open_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event_open_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__email_event_open_tmp"], "alias": "stg_hubspot__email_event_open_tmp", "checksum": {"name": "sha256", "checksum": "54e7e1cf6aa550083bea13385b26ed3d236e641cebce7166efc1827695fe3892"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434197.0063622, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__email_event_open_tmp`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_open_enabled'])) }}\n\nselect *\nfrom {{ var('email_event_open') }}", "language": "sql", "refs": [], "sources": [["hubspot", "email_event_open"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__email_event_deferred_tmp": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__email_event_deferred_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__email_event_deferred_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__email_event_deferred_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event_deferred_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__email_event_deferred_tmp"], "alias": "stg_hubspot__email_event_deferred_tmp", "checksum": {"name": "sha256", "checksum": "9f2223037c65b68da3914d6bd5ddda5d7bc48443d641e673b3eb8efd48fc39cb"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434197.025293, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__email_event_deferred_tmp`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_deferred_enabled'])) }}\n\nselect *\nfrom {{ var('email_event_deferred') }}", "language": "sql", "refs": [], "sources": [["hubspot", "email_event_deferred"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__email_campaign_tmp": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__email_campaign_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__email_campaign_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__email_campaign_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_campaign_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__email_campaign_tmp"], "alias": "stg_hubspot__email_campaign_tmp", "checksum": {"name": "sha256", "checksum": "b1737f69abaa2c4f7d29751c0b2f936f4028c6034ea0c6367bca28d493830d35"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434197.03473, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__email_campaign_tmp`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled'])) }}\n\nselect *\nfrom {{ var('email_campaign') }}", "language": "sql", "refs": [], "sources": [["hubspot", "email_campaign"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__ticket_deal_tmp": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_hubspot", "name": "stg_hubspot__ticket_deal_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__ticket_deal_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__ticket_deal_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__ticket_deal_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__ticket_deal_tmp"], "alias": "stg_hubspot__ticket_deal_tmp", "checksum": {"name": "sha256", "checksum": "a1d9a32a350c131b57aa730f2b38a56a0873fa8cc3f3ef9b546a9cfeb4d874cd"}, "config": {"enabled": false, "alias": null, "schema": "stg_hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_hubspot", "enabled": false}, "created_at": 1696434197.043218, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_hubspot`.`stg_hubspot__ticket_deal_tmp`", "raw_code": "{{ config(enabled=(var('hubspot_service_enabled', false) and var('hubspot_ticket_deal_enabled', false))) }}\n\nselect *\nfrom {{ var('ticket_deal') }}", "language": "sql", "refs": [], "sources": [["hubspot", "ticket_deal"]], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot.hubspot__engagements": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_hubspot", "name": "hubspot__engagements", "resource_type": "model", "package_name": "hubspot", "path": "sales/hubspot__engagements.sql", "original_file_path": "models/sales/hubspot__engagements.sql", "unique_id": "model.hubspot.hubspot__engagements", "fqn": ["hubspot", "sales", "hubspot__engagements"], "alias": "hubspot__engagements", "checksum": {"name": "sha256", "checksum": "287fb9ef6ed072e803731e55ddc15089e166966a5ff55f33c79edc0c0c5ab4a8"}, "config": {"enabled": false, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents an engagement", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "activity_type": {"name": "activity_type", "description": "The engagement's activity type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "A timestamp representing when the engagement was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_type": {"name": "engagement_type", "description": "One of NOTE, EMAIL, TASK, MEETING, or CALL, the type of the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Whether the engagement is currently being shown in the UI.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_updated_timestamp": {"name": "last_updated_timestamp", "description": "A timestamp in representing when the engagement was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "occurred_timestamp": {"name": "occurred_timestamp", "description": "A timestamp in representing the time that the engagement should appear in the timeline.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "The ID of the engagement's owner.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "{{ doc(\"portal_id\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_ids": {"name": "contact_ids", "description": "List of contacts related to the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_ids": {"name": "deal_ids", "description": "List of deals related to the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_ids": {"name": "company_ids", "description": "List of companies related to the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot://models/sales/sales.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": false}, "created_at": 1696434198.251112, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_hubspot`.`hubspot__engagements`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled'])) }}\n\nwith engagements as (\n\n    select *\n    from {{ var('engagement') }}\n\n{% if fivetran_utils.enabled_vars(['hubspot_engagement_contact_enabled']) %}\n\n), contacts as (\n\n    select *\n    from {{ var('engagement_contact') }}\n\n), contacts_agg as (\n\n    select \n        engagement_id,\n        {{ fivetran_utils.array_agg('contact_id') }} as contact_ids\n    from contacts\n    group by 1\n\n{% endif %}\n\n{% if fivetran_utils.enabled_vars(['hubspot_engagement_deal_enabled']) %}\n\n), deals as (\n\n    select *\n    from {{ var('engagement_deal') }}\n \n), deals_agg as (\n\n    select \n        engagement_id,\n        {{ fivetran_utils.array_agg('deal_id') }} as deal_ids\n    from deals\n    group by 1\n\n{% endif %}\n\n{% if fivetran_utils.enabled_vars(['hubspot_engagement_company_enabled']) %}\n\n), companies as (\n\n    select *\n    from {{ var('engagement_company') }}\n\n), companies_agg as (\n\n    select \n        engagement_id,\n        {{ fivetran_utils.array_agg('company_id') }} as company_ids\n    from companies\n    group by 1\n\n{% endif %}\n\n), joined as (\n\n    select \n        {% if fivetran_utils.enabled_vars(['hubspot_engagement_contact_enabled']) %} contacts_agg.contact_ids, {% endif %}\n        {% if fivetran_utils.enabled_vars(['hubspot_engagement_deal_enabled']) %} deals_agg.deal_ids, {% endif %}\n        {% if fivetran_utils.enabled_vars(['hubspot_engagement_company_enabled']) %} companies_agg.company_ids, {% endif %}\n        engagements.*\n    from engagements\n    {% if fivetran_utils.enabled_vars(['hubspot_engagement_contact_enabled']) %} left join contacts_agg using (engagement_id) {% endif %}\n    {% if fivetran_utils.enabled_vars(['hubspot_engagement_deal_enabled']) %} left join deals_agg using (engagement_id) {% endif %}\n    {% if fivetran_utils.enabled_vars(['hubspot_engagement_company_enabled']) %} left join companies_agg using (engagement_id) {% endif %}\n\n)\n\nselect *\nfrom joined", "language": "sql", "refs": [{"name": "stg_hubspot__engagement", "package": null, "version": null}, {"name": "stg_hubspot__engagement_contact", "package": null, "version": null}, {"name": "stg_hubspot__engagement_deal", "package": null, "version": null}, {"name": "stg_hubspot__engagement_company", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.fivetran_utils.array_agg"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot.hubspot__engagement_tasks": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_hubspot", "name": "hubspot__engagement_tasks", "resource_type": "model", "package_name": "hubspot", "path": "sales/engagement_events/hubspot__engagement_tasks.sql", "original_file_path": "models/sales/engagement_events/hubspot__engagement_tasks.sql", "unique_id": "model.hubspot.hubspot__engagement_tasks", "fqn": ["hubspot", "sales", "engagement_events", "hubspot__engagement_tasks"], "alias": "hubspot__engagement_tasks", "checksum": {"name": "sha256", "checksum": "f4cfbea6bae98a1aab23f4c7f9f1d2176527c8120cd273c1cf77996969f99ad3"}, "config": {"enabled": false, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a TASK engagement event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Whether the engagement is currently being shown in the UI.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "A timestamp representing when the engagement was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "occurred_timestamp": {"name": "occurred_timestamp", "description": "A timestamp in representing the time that the engagement should appear in the timeline.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "The ID of the engagement's owner.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_ids": {"name": "contact_ids", "description": "List of contacts related to the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_ids": {"name": "deal_ids", "description": "List of deals related to the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_ids": {"name": "company_ids", "description": "List of companies related to the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot://models/sales/engagement_events/engagement_events.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": false}, "created_at": 1696434198.301156, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_hubspot`.`hubspot__engagement_tasks`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_task_enabled','hubspot_engagement_enabled'])) }}\n\n{{ engagements_joined(ref('stg_hubspot__engagement_task')) }}", "language": "sql", "refs": [{"name": "stg_hubspot__engagement_task", "package": null, "version": null}, {"name": "hubspot__engagements", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot.engagements_joined"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot.hubspot__engagement_notes": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_hubspot", "name": "hubspot__engagement_notes", "resource_type": "model", "package_name": "hubspot", "path": "sales/engagement_events/hubspot__engagement_notes.sql", "original_file_path": "models/sales/engagement_events/hubspot__engagement_notes.sql", "unique_id": "model.hubspot.hubspot__engagement_notes", "fqn": ["hubspot", "sales", "engagement_events", "hubspot__engagement_notes"], "alias": "hubspot__engagement_notes", "checksum": {"name": "sha256", "checksum": "18bc3e71db1da403e9b9ecd48206912fede55048f3dfe55bb21393868b5c1b2b"}, "config": {"enabled": false, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a NOTE engagement event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "note": {"name": "note", "description": "The body of the note. The body has a limit of 65536 characters.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Whether the engagement is currently being shown in the UI.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "A timestamp representing when the engagement was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "occurred_timestamp": {"name": "occurred_timestamp", "description": "A timestamp in representing the time that the engagement should appear in the timeline.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "The ID of the engagement's owner.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_ids": {"name": "contact_ids", "description": "List of contacts related to the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_ids": {"name": "deal_ids", "description": "List of deals related to the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_ids": {"name": "company_ids", "description": "List of companies related to the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot://models/sales/engagement_events/engagement_events.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": false}, "created_at": 1696434198.299773, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_hubspot`.`hubspot__engagement_notes`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_note_enabled','hubspot_engagement_enabled'])) }}\n\n{{ engagements_joined(ref('stg_hubspot__engagement_note')) }}", "language": "sql", "refs": [{"name": "stg_hubspot__engagement_note", "package": null, "version": null}, {"name": "hubspot__engagements", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot.engagements_joined"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot.hubspot__engagement_calls": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_hubspot", "name": "hubspot__engagement_calls", "resource_type": "model", "package_name": "hubspot", "path": "sales/engagement_events/hubspot__engagement_calls.sql", "original_file_path": "models/sales/engagement_events/hubspot__engagement_calls.sql", "unique_id": "model.hubspot.hubspot__engagement_calls", "fqn": ["hubspot", "sales", "engagement_events", "hubspot__engagement_calls"], "alias": "hubspot__engagement_calls", "checksum": {"name": "sha256", "checksum": "a3a04b6df9dcc60ccf86b6d97c9afdc54cc055dfe032dc7ceb160cc7aa26088c"}, "config": {"enabled": false, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a CALL engagement event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Whether the engagement is currently being shown in the UI.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "A timestamp representing when the engagement was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "occurred_timestamp": {"name": "occurred_timestamp", "description": "A timestamp in representing the time that the engagement should appear in the timeline.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "The ID of the engagement's owner.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_ids": {"name": "contact_ids", "description": "List of contacts related to the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_ids": {"name": "deal_ids", "description": "List of deals related to the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_ids": {"name": "company_ids", "description": "List of companies related to the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot://models/sales/engagement_events/engagement_events.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": false}, "created_at": 1696434198.296076, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_hubspot`.`hubspot__engagement_calls`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_call_enabled','hubspot_engagement_enabled'])) }}\n\n{{ engagements_joined(ref('stg_hubspot__engagement_call')) }}", "language": "sql", "refs": [{"name": "stg_hubspot__engagement_call", "package": null, "version": null}, {"name": "hubspot__engagements", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot.engagements_joined"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot.hubspot__engagement_emails": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_hubspot", "name": "hubspot__engagement_emails", "resource_type": "model", "package_name": "hubspot", "path": "sales/engagement_events/hubspot__engagement_emails.sql", "original_file_path": "models/sales/engagement_events/hubspot__engagement_emails.sql", "unique_id": "model.hubspot.hubspot__engagement_emails", "fqn": ["hubspot", "sales", "engagement_events", "hubspot__engagement_emails"], "alias": "hubspot__engagement_emails", "checksum": {"name": "sha256", "checksum": "9d77782ec4a7625fc66abd4c874ddfa9d557c150f378b3164aa660f3d15d0c95"}, "config": {"enabled": false, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents an EMAIL engagement event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Whether the engagement is currently being shown in the UI.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "A timestamp representing when the engagement was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "occurred_timestamp": {"name": "occurred_timestamp", "description": "A timestamp in representing the time that the engagement should appear in the timeline.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "The ID of the engagement's owner.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_ids": {"name": "contact_ids", "description": "List of contacts related to the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_ids": {"name": "deal_ids", "description": "List of deals related to the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_ids": {"name": "company_ids", "description": "List of companies related to the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot://models/sales/engagement_events/engagement_events.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": false}, "created_at": 1696434198.2974029, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_hubspot`.`hubspot__engagement_emails`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_email_enabled','hubspot_engagement_enabled'])) }}\n\n{{ engagements_joined(ref('stg_hubspot__engagement_email')) }}", "language": "sql", "refs": [{"name": "stg_hubspot__engagement_email", "package": null, "version": null}, {"name": "hubspot__engagements", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot.engagements_joined"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot.hubspot__engagement_meetings": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_hubspot", "name": "hubspot__engagement_meetings", "resource_type": "model", "package_name": "hubspot", "path": "sales/engagement_events/hubspot__engagement_meetings.sql", "original_file_path": "models/sales/engagement_events/hubspot__engagement_meetings.sql", "unique_id": "model.hubspot.hubspot__engagement_meetings", "fqn": ["hubspot", "sales", "engagement_events", "hubspot__engagement_meetings"], "alias": "hubspot__engagement_meetings", "checksum": {"name": "sha256", "checksum": "98da9fab5d91c24b85eb0a717dbf38e1d7103f5df17a5c3115d92e58d6b79477"}, "config": {"enabled": false, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a MEETING engagement event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Whether the engagement is currently being shown in the UI.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "A timestamp representing when the engagement was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "occurred_timestamp": {"name": "occurred_timestamp", "description": "A timestamp in representing the time that the engagement should appear in the timeline.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "The ID of the engagement's owner.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_ids": {"name": "contact_ids", "description": "List of contacts related to the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_ids": {"name": "deal_ids", "description": "List of deals related to the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_ids": {"name": "company_ids", "description": "List of companies related to the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot://models/sales/engagement_events/engagement_events.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": false}, "created_at": 1696434198.298582, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_hubspot`.`hubspot__engagement_meetings`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_meeting_enabled','hubspot_engagement_enabled'])) }}\n\n{{ engagements_joined(ref('stg_hubspot__engagement_meeting')) }}", "language": "sql", "refs": [{"name": "stg_hubspot__engagement_meeting", "package": null, "version": null}, {"name": "hubspot__engagements", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot.engagements_joined"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot.hubspot__email_sends": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_hubspot", "name": "hubspot__email_sends", "resource_type": "model", "package_name": "hubspot", "path": "marketing/hubspot__email_sends.sql", "original_file_path": "models/marketing/hubspot__email_sends.sql", "unique_id": "model.hubspot.hubspot__email_sends", "fqn": ["hubspot", "marketing", "hubspot__email_sends"], "alias": "hubspot__email_sends", "checksum": {"name": "sha256", "checksum": "1eb48b5c443cbef4644238a4ca46094889f92cee2ab9c18e8ed33e67d00ebb50"}, "config": {"enabled": false, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a SENT email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_contact_deleted": {"name": "is_contact_deleted", "description": "{{ doc(\"is_deleted\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bcc_emails": {"name": "bcc_emails", "description": "The 'cc' field of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cc_emails": {"name": "cc_emails", "description": "The 'bcc' field of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_subject": {"name": "email_subject", "description": "The subject line of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "from_email": {"name": "from_email", "description": "The 'from' field of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reply_to_email": {"name": "reply_to_email", "description": "The 'reply-to' field of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The created timestamp of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_campaign_id": {"name": "email_campaign_id", "description": "The ID of the related email campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "recipient_email_address": {"name": "recipient_email_address", "description": "The email address of the contact related to the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_send_timestamp": {"name": "email_send_timestamp", "description": "The timestamp of the SENT event related to this event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_send_id": {"name": "email_send_id", "description": "The event ID which uniquely identifies the email message's SENT event. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bounces": {"name": "bounces", "description": "{{ doc('bounces') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "{{ doc('clicks') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deferrals": {"name": "deferrals", "description": "{{ doc('deferrals') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deliveries": {"name": "deliveries", "description": "{{ doc('deliveries') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "drops": {"name": "drops", "description": "{{ doc('drops') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "forwards": {"name": "forwards", "description": "{{ doc('forwards') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opens": {"name": "opens", "description": "{{ doc('opens') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prints": {"name": "prints", "description": "{{ doc('prints') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "spam_reports": {"name": "spam_reports", "description": "{{ doc('spam_reports') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unsubscribes": {"name": "unsubscribes", "description": "{{ doc('unsubscribes') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "was_bounced": {"name": "was_bounced", "description": "Whether the email was bounced.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "was_clicked": {"name": "was_clicked", "description": "Whether the email was clicked.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "was_deferred": {"name": "was_deferred", "description": "Whether the email was deferred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "was_delivered": {"name": "was_delivered", "description": "Whether the email was delivered.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "was_forwarded": {"name": "was_forwarded", "description": "Whether the email was forwarded.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "was_opened": {"name": "was_opened", "description": "Whether the email was opened.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "was_printed": {"name": "was_printed", "description": "Whether the email was printed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "was_spam_reported": {"name": "was_spam_reported", "description": "Whether the email was spam reported.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "was_unsubcribed": {"name": "was_unsubcribed", "description": "Whether the email was unsubcribed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot://models/marketing/marketing.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": false}, "created_at": 1696434198.3429859, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_hubspot`.`hubspot__email_sends`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled'])) }}\n\nwith sends as (\n\n    select *\n    from {{ ref('hubspot__email_event_sent') }}\n\n), metrics as (\n\n    select *\n    from {{ ref('int_hubspot__email_event_aggregates') }}\n\n), joined as (\n\n    select\n        sends.*,\n        coalesce(metrics.bounces,0) as bounces,\n        coalesce(metrics.clicks,0) as clicks,\n        coalesce(metrics.deferrals,0) as deferrals,\n        coalesce(metrics.deliveries,0) as deliveries,\n        coalesce(metrics.drops,0) as drops,\n        coalesce(metrics.forwards,0) as forwards,\n        coalesce(metrics.opens,0) as opens,\n        coalesce(metrics.prints,0) as prints,\n        coalesce(metrics.spam_reports,0) as spam_reports\n    from sends\n    left join metrics using (email_send_id)\n\n), booleans as (\n\n    select \n        *,\n        bounces > 0 as was_bounced,\n        clicks > 0 as was_clicked,\n        deferrals > 0 as was_deferred,\n        deliveries > 0 as was_delivered,\n        forwards > 0 as was_forwarded,\n        opens > 0 as was_opened,\n        prints > 0 as was_printed,\n        spam_reports > 0 as was_spam_reported\n    from joined\n\n{% if fivetran_utils.enabled_vars(['hubspot_email_event_status_change_enabled']) %}\n\n), unsubscribes as (\n\n    select *\n    from {{ ref('int_hubspot__email_aggregate_status_change') }}\n\n), unsubscribes_joined as (\n\n    select \n        booleans.*,\n        coalesce(unsubscribes.unsubscribes,0) as unsubscribes,\n        coalesce(unsubscribes.unsubscribes,0) > 0 as was_unsubcribed\n    from booleans\n    left join unsubscribes using (email_send_id)\n\n)\n\nselect *\nfrom unsubscribes_joined\n\n{% else %}\n\n)\n\nselect *\nfrom booleans\n\n{% endif %}", "language": "sql", "refs": [{"name": "hubspot__email_event_sent", "package": null, "version": null}, {"name": "int_hubspot__email_event_aggregates", "package": null, "version": null}, {"name": "int_hubspot__email_aggregate_status_change", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot.hubspot__email_campaigns": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_hubspot", "name": "hubspot__email_campaigns", "resource_type": "model", "package_name": "hubspot", "path": "marketing/hubspot__email_campaigns.sql", "original_file_path": "models/marketing/hubspot__email_campaigns.sql", "unique_id": "model.hubspot.hubspot__email_campaigns", "fqn": ["hubspot", "marketing", "hubspot__email_campaigns"], "alias": "hubspot__email_campaigns", "checksum": {"name": "sha256", "checksum": "35e0e809140bd2a917f8d08f461298ea2a7e8968d160714f13334fea8c204578"}, "config": {"enabled": false, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents an email campaign in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "app_id": {"name": "app_id", "description": "The app ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "app_name": {"name": "app_name", "description": "The app name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "content_id": {"name": "content_id", "description": "The ID of the content.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_campaign_id": {"name": "email_campaign_id", "description": "The ID of the email campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_campaign_name": {"name": "email_campaign_name", "description": "The name of the email campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_campaign_sub_type": {"name": "email_campaign_sub_type", "description": "The email campaign sub-type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_campaign_subject": {"name": "email_campaign_subject", "description": "The subject of the email campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_campaign_type": {"name": "email_campaign_type", "description": "The email campaign type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "num_included": {"name": "num_included", "description": "The number of messages included as part of the email campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "num_queued": {"name": "num_queued", "description": "The number of messages queued as part of the email campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_bounces": {"name": "total_bounces", "description": "{{ doc('bounces') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_clicks": {"name": "total_clicks", "description": "{{ doc('clicks') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_deferrals": {"name": "total_deferrals", "description": "{{ doc('deferrals') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_deliveries": {"name": "total_deliveries", "description": "{{ doc('deliveries') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_drops": {"name": "total_drops", "description": "{{ doc('drops') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_forwards": {"name": "total_forwards", "description": "{{ doc('forwards') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_opens": {"name": "total_opens", "description": "{{ doc('opens') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_prints": {"name": "total_prints", "description": "{{ doc('prints') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_spam_reports": {"name": "total_spam_reports", "description": "{{ doc('spam_reports') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_unsubscribes": {"name": "total_unsubscribes", "description": "{{ doc('unsubscribes') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_unique_bounces": {"name": "total_unique_bounces", "description": "{{ doc('unique_bounces') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_unique_clicks": {"name": "total_unique_clicks", "description": "{{ doc('unique_clicks') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_unique_deferrals": {"name": "total_unique_deferrals", "description": "{{ doc('unique_deferrals') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_unique_deliveries": {"name": "total_unique_deliveries", "description": "{{ doc('unique_deliveries') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_unique_drops": {"name": "total_unique_drops", "description": "{{ doc('unique_drops') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_unique_forwards": {"name": "total_unique_forwards", "description": "{{ doc('unique_forwards') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_unique_opens": {"name": "total_unique_opens", "description": "{{ doc('unique_opens') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_unique_prints": {"name": "total_unique_prints", "description": "{{ doc('unique_prints') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_unique_spam_reports": {"name": "total_unique_spam_reports", "description": "{{ doc('unique_spam_reports') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_unique_unsubscribes": {"name": "total_unique_unsubscribes", "description": "{{ doc('unique_unsubscribes') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot://models/marketing/marketing.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": false}, "created_at": 1696434198.352865, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_hubspot`.`hubspot__email_campaigns`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled'])) }}\n\n\nwith campaigns as (\n\n    select *\n    from {{ ref('stg_hubspot__email_campaign') }}\n\n), email_sends as (\n\n    select *\n    from {{ ref('hubspot__email_sends') }}\n\n), email_metrics as (\n    {% set email_metrics = adjust_email_metrics('hubspot__email_sends', 'email_metrics') %}\n    select \n        email_campaign_id,\n        {% for metric in email_metrics %}\n        sum(email_sends.{{ metric }}) as total_{{ metric }},\n        count(distinct case when email_sends.{{ metric }} > 0 then email_send_id end) as total_unique_{{ metric }}\n        {% if not loop.last %},{% endif %}\n        {% endfor %}\n    from email_sends\n    group by 1\n\n), joined as (\n\n    select \n        campaigns.*,\n        {% for metric in email_metrics %}\n        coalesce(email_metrics.total_{{ metric }}, 0) as total_{{ metric }},\n        coalesce(email_metrics.total_unique_{{ metric }}, 0) as total_unique_{{ metric }}\n        {% if not loop.last %},{% endif %}\n        {% endfor %}\n    from campaigns\n    left join email_metrics\n        on campaigns.email_campaign_id = email_metrics.email_campaign_id\n\n)\n\nselect *\nfrom joined", "language": "sql", "refs": [{"name": "stg_hubspot__email_campaign", "package": null, "version": null}, {"name": "hubspot__email_sends", "package": null, "version": null}, {"name": "hubspot__email_sends", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot.adjust_email_metrics"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot.hubspot__email_event_dropped": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_hubspot", "name": "hubspot__email_event_dropped", "resource_type": "model", "package_name": "hubspot", "path": "marketing/email_events/hubspot__email_event_dropped.sql", "original_file_path": "models/marketing/email_events/hubspot__email_event_dropped.sql", "unique_id": "model.hubspot.hubspot__email_event_dropped", "fqn": ["hubspot", "marketing", "email_events", "hubspot__email_event_dropped"], "alias": "hubspot__email_event_dropped", "checksum": {"name": "sha256", "checksum": "9db280fae885521922e3335072d40d3652dbce7de52ac8d53bb8849255b1a7bf"}, "config": {"enabled": false, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a DROPPED email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_contact_deleted": {"name": "is_contact_deleted", "description": "{{ doc(\"is_deleted\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bcc_emails": {"name": "bcc_emails", "description": "The 'bcc' field of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cc_emails": {"name": "cc_emails", "description": "The 'cc' field of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "drop_message": {"name": "drop_message", "description": "The raw message describing why the email message was dropped. This will usually provide additional details beyond 'dropReason'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "drop_reason": {"name": "drop_reason", "description": "The reason why the email message was dropped. See below for the possible values.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_subject": {"name": "email_subject", "description": "The subject line of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "from_email": {"name": "from_email", "description": "The 'from' field of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reply_to_email": {"name": "reply_to_email", "description": "The 'reply-to' field of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The created timestamp of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_campaign_id": {"name": "email_campaign_id", "description": "The ID of the related email campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "recipient_email_address": {"name": "recipient_email_address", "description": "The email address of the contact related to the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_send_timestamp": {"name": "email_send_timestamp", "description": "The timestamp of the SENT event related to this event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_send_id": {"name": "email_send_id", "description": "The event ID which uniquely identifies the email message's SENT event. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot://models/marketing/email_events/email_events.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": false}, "created_at": 1696434198.379118, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_hubspot`.`hubspot__email_event_dropped`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_dropped_enabled'])) }}\n\n{{ email_events_joined(var('email_event_dropped')) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_dropped", "package": null, "version": null}, {"name": "stg_hubspot__email_event", "package": null, "version": null}, {"name": "int_hubspot__contact_merge_adjust", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot.email_events_joined"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot.hubspot__email_event_deferred": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_hubspot", "name": "hubspot__email_event_deferred", "resource_type": "model", "package_name": "hubspot", "path": "marketing/email_events/hubspot__email_event_deferred.sql", "original_file_path": "models/marketing/email_events/hubspot__email_event_deferred.sql", "unique_id": "model.hubspot.hubspot__email_event_deferred", "fqn": ["hubspot", "marketing", "email_events", "hubspot__email_event_deferred"], "alias": "hubspot__email_event_deferred", "checksum": {"name": "sha256", "checksum": "21fed29e600a6ab8cf2ed92245ae1890edffd68c2609673addbfd37880f4f02b"}, "config": {"enabled": false, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a DEFERRED email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_contact_deleted": {"name": "is_contact_deleted", "description": "{{ doc(\"is_deleted\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "attempt_number": {"name": "attempt_number", "description": "The delivery attempt number.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "returned_response": {"name": "returned_response", "description": "The full response from the recipient's email server.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The created timestamp of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_campaign_id": {"name": "email_campaign_id", "description": "The ID of the related email campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "recipient_email_address": {"name": "recipient_email_address", "description": "The email address of the contact related to the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_send_timestamp": {"name": "email_send_timestamp", "description": "The timestamp of the SENT event related to this event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_send_id": {"name": "email_send_id", "description": "The event ID which uniquely identifies the email message's SENT event. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot://models/marketing/email_events/email_events.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": false}, "created_at": 1696434198.3762581, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_hubspot`.`hubspot__email_event_deferred`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_deferred_enabled'])) }}\n\n{{ email_events_joined(var('email_event_deferred')) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_deferred", "package": null, "version": null}, {"name": "stg_hubspot__email_event", "package": null, "version": null}, {"name": "int_hubspot__contact_merge_adjust", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot.email_events_joined"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot.hubspot__email_event_spam_report": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_hubspot", "name": "hubspot__email_event_spam_report", "resource_type": "model", "package_name": "hubspot", "path": "marketing/email_events/hubspot__email_event_spam_report.sql", "original_file_path": "models/marketing/email_events/hubspot__email_event_spam_report.sql", "unique_id": "model.hubspot.hubspot__email_event_spam_report", "fqn": ["hubspot", "marketing", "email_events", "hubspot__email_event_spam_report"], "alias": "hubspot__email_event_spam_report", "checksum": {"name": "sha256", "checksum": "ff144be07b2e2a466f3dbf5ed2d3b97f4cbb9080d369fbc04d5bde57b65964df"}, "config": {"enabled": false, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a SPAM_REPORT email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_contact_deleted": {"name": "is_contact_deleted", "description": "{{ doc(\"is_deleted\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ip_address": {"name": "ip_address", "description": "{{ doc(\"email_event_ip_address\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_agent": {"name": "user_agent", "description": "{{ doc(\"email_event_user_agent\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The created timestamp of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_campaign_id": {"name": "email_campaign_id", "description": "The ID of the related email campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "recipient_email_address": {"name": "recipient_email_address", "description": "The email address of the contact related to the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_send_timestamp": {"name": "email_send_timestamp", "description": "The timestamp of the SENT event related to this event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_send_id": {"name": "email_send_id", "description": "The event ID which uniquely identifies the email message's SENT event. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot://models/marketing/email_events/email_events.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": false}, "created_at": 1696434198.388006, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_hubspot`.`hubspot__email_event_spam_report`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_spam_report_enabled'])) }}\n\n{{ email_events_joined(var('email_event_spam_report')) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_spam_report", "package": null, "version": null}, {"name": "stg_hubspot__email_event", "package": null, "version": null}, {"name": "int_hubspot__contact_merge_adjust", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot.email_events_joined"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot.hubspot__email_event_opens": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_hubspot", "name": "hubspot__email_event_opens", "resource_type": "model", "package_name": "hubspot", "path": "marketing/email_events/hubspot__email_event_opens.sql", "original_file_path": "models/marketing/email_events/hubspot__email_event_opens.sql", "unique_id": "model.hubspot.hubspot__email_event_opens", "fqn": ["hubspot", "marketing", "email_events", "hubspot__email_event_opens"], "alias": "hubspot__email_event_opens", "checksum": {"name": "sha256", "checksum": "aba80489d4916d6105413d9974c562b0289f0788b45806048634728a518f5063"}, "config": {"enabled": false, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a OPEN email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_contact_deleted": {"name": "is_contact_deleted", "description": "{{ doc(\"is_deleted\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "browser": {"name": "browser", "description": "{{ doc(\"email_event_browser\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "duration_open": {"name": "duration_open", "description": "If provided and nonzero, the approximate number of milliseconds the user had opened the email.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "geo_location": {"name": "geo_location", "description": "{{ doc(\"email_event_location\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ip_address": {"name": "ip_address", "description": "{{ doc(\"email_event_ip_address\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_agent": {"name": "user_agent", "description": "{{ doc(\"email_event_user_agent\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The created timestamp of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_campaign_id": {"name": "email_campaign_id", "description": "The ID of the related email campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "recipient_email_address": {"name": "recipient_email_address", "description": "The email address of the contact related to the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_send_timestamp": {"name": "email_send_timestamp", "description": "The timestamp of the SENT event related to this event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_send_id": {"name": "email_send_id", "description": "The event ID which uniquely identifies the email message's SENT event. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot://models/marketing/email_events/email_events.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": false}, "created_at": 1696434198.382038, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_hubspot`.`hubspot__email_event_opens`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_open_enabled'])) }}\n\n{{ email_events_joined(var('email_event_open')) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_open", "package": null, "version": null}, {"name": "stg_hubspot__email_event", "package": null, "version": null}, {"name": "int_hubspot__contact_merge_adjust", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot.email_events_joined"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot.hubspot__email_event_delivered": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_hubspot", "name": "hubspot__email_event_delivered", "resource_type": "model", "package_name": "hubspot", "path": "marketing/email_events/hubspot__email_event_delivered.sql", "original_file_path": "models/marketing/email_events/hubspot__email_event_delivered.sql", "unique_id": "model.hubspot.hubspot__email_event_delivered", "fqn": ["hubspot", "marketing", "email_events", "hubspot__email_event_delivered"], "alias": "hubspot__email_event_delivered", "checksum": {"name": "sha256", "checksum": "a0bf3a4ea55c05767c8e023e60bc7d5ada0bb60bf1425376a74c6af9d5610f80"}, "config": {"enabled": false, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a DELIVERED email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_contact_deleted": {"name": "is_contact_deleted", "description": "{{ doc(\"is_deleted\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "returned_response": {"name": "returned_response", "description": "The full response from the recipient's email server.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "smtp_id": {"name": "smtp_id", "description": "An ID attached to the message by HubSpot.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The created timestamp of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_campaign_id": {"name": "email_campaign_id", "description": "The ID of the related email campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "recipient_email_address": {"name": "recipient_email_address", "description": "The email address of the contact related to the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_send_timestamp": {"name": "email_send_timestamp", "description": "The timestamp of the SENT event related to this event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_send_id": {"name": "email_send_id", "description": "The event ID which uniquely identifies the email message's SENT event. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot://models/marketing/email_events/email_events.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": false}, "created_at": 1696434198.3777668, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_hubspot`.`hubspot__email_event_delivered`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_delivered_enabled'])) }}\n\n{{ email_events_joined(var('email_event_delivered')) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_delivered", "package": null, "version": null}, {"name": "stg_hubspot__email_event", "package": null, "version": null}, {"name": "int_hubspot__contact_merge_adjust", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot.email_events_joined"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot.hubspot__email_event_status_change": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_hubspot", "name": "hubspot__email_event_status_change", "resource_type": "model", "package_name": "hubspot", "path": "marketing/email_events/hubspot__email_event_status_change.sql", "original_file_path": "models/marketing/email_events/hubspot__email_event_status_change.sql", "unique_id": "model.hubspot.hubspot__email_event_status_change", "fqn": ["hubspot", "marketing", "email_events", "hubspot__email_event_status_change"], "alias": "hubspot__email_event_status_change", "checksum": {"name": "sha256", "checksum": "877fbfc520033497432cddf34df419233cce3b916eb27a3384837fb2b6077ad3"}, "config": {"enabled": false, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a STATUS_CHANGE email event in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_contact_deleted": {"name": "is_contact_deleted", "description": "{{ doc(\"is_deleted\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_source": {"name": "change_source", "description": "The source of the subscription change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_bounced": {"name": "is_bounced", "description": "A HubSpot employee explicitly initiated the status change to block messages to the recipient. \n(Note this usage has been deprecated in favor of dropping messages with a 'dropReason' of BLOCKED_ADDRESS.)\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "requested_by_email": {"name": "requested_by_email", "description": "The email address of the person requesting the change on behalf of the recipient. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_status": {"name": "subscription_status", "description": "The recipient's portal subscription status. \nNote that if this is 'UNSUBSCRIBED', the property 'subscriptions' is not necessarily an empty array, nor are all \nsubscriptions contained in it necessarily going to have their statuses set to 'UNSUBSCRIBED'.)\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscriptions": {"name": "subscriptions", "description": "An array of JSON objects representing the status of subscriptions for the recipient. \nEach JSON subscription object is comprised of the properties: 'id', 'status'.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The created timestamp of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_campaign_id": {"name": "email_campaign_id", "description": "The ID of the related email campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "recipient_email_address": {"name": "recipient_email_address", "description": "The email address of the contact related to the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_send_timestamp": {"name": "email_send_timestamp", "description": "The timestamp of the SENT event related to this event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_send_id": {"name": "email_send_id", "description": "The event ID which uniquely identifies the email message's SENT event. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot://models/marketing/email_events/email_events.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": false}, "created_at": 1696434198.3894012, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_hubspot`.`hubspot__email_event_status_change`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_status_change_enabled'])) }}\n\n{{ email_events_joined(var('email_event_status_change')) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_status_change", "package": null, "version": null}, {"name": "stg_hubspot__email_event", "package": null, "version": null}, {"name": "int_hubspot__contact_merge_adjust", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot.email_events_joined"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot.hubspot__email_event_sent": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_hubspot", "name": "hubspot__email_event_sent", "resource_type": "model", "package_name": "hubspot", "path": "marketing/email_events/hubspot__email_event_sent.sql", "original_file_path": "models/marketing/email_events/hubspot__email_event_sent.sql", "unique_id": "model.hubspot.hubspot__email_event_sent", "fqn": ["hubspot", "marketing", "email_events", "hubspot__email_event_sent"], "alias": "hubspot__email_event_sent", "checksum": {"name": "sha256", "checksum": "d1178a91839f9f32bd6d11ae880ffa99dd2ebbc3680ad949d028aea275f070e4"}, "config": {"enabled": false, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a SENT email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_contact_deleted": {"name": "is_contact_deleted", "description": "{{ doc(\"is_deleted\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bcc_emails": {"name": "bcc_emails", "description": "The 'cc' field of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cc_emails": {"name": "cc_emails", "description": "The 'bcc' field of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_subject": {"name": "email_subject", "description": "The subject line of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "from_email": {"name": "from_email", "description": "The 'from' field of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reply_to_email": {"name": "reply_to_email", "description": "The 'reply-to' field of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The created timestamp of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_campaign_id": {"name": "email_campaign_id", "description": "The ID of the related email campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "recipient_email_address": {"name": "recipient_email_address", "description": "The email address of the contact related to the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_send_timestamp": {"name": "email_send_timestamp", "description": "The timestamp of the SENT event related to this event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_send_id": {"name": "email_send_id", "description": "The event ID which uniquely identifies the email message's SENT event. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot://models/marketing/email_events/email_events.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": false}, "created_at": 1696434198.386672, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_hubspot`.`hubspot__email_event_sent`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_sent_enabled'])) }}\n\n{{ email_events_joined(var('email_event_sent')) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_sent", "package": null, "version": null}, {"name": "stg_hubspot__email_event", "package": null, "version": null}, {"name": "int_hubspot__contact_merge_adjust", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot.email_events_joined"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot.hubspot__email_event_print": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_hubspot", "name": "hubspot__email_event_print", "resource_type": "model", "package_name": "hubspot", "path": "marketing/email_events/hubspot__email_event_print.sql", "original_file_path": "models/marketing/email_events/hubspot__email_event_print.sql", "unique_id": "model.hubspot.hubspot__email_event_print", "fqn": ["hubspot", "marketing", "email_events", "hubspot__email_event_print"], "alias": "hubspot__email_event_print", "checksum": {"name": "sha256", "checksum": "f704a54b54554e3c6de87df4d1d2162c3b870f2693f9f422325fdbb3d9f009d7"}, "config": {"enabled": false, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a PRINT email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_contact_deleted": {"name": "is_contact_deleted", "description": "{{ doc(\"is_deleted\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "browser": {"name": "browser", "description": "{{ doc(\"email_event_browser\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "geo_location": {"name": "geo_location", "description": "{{ doc(\"email_event_location\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ip_address": {"name": "ip_address", "description": "{{ doc(\"email_event_ip_address\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_agent": {"name": "user_agent", "description": "{{ doc(\"email_event_user_agent\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The created timestamp of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_campaign_id": {"name": "email_campaign_id", "description": "The ID of the related email campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "recipient_email_address": {"name": "recipient_email_address", "description": "The email address of the contact related to the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_send_timestamp": {"name": "email_send_timestamp", "description": "The timestamp of the SENT event related to this event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_send_id": {"name": "email_send_id", "description": "The event ID which uniquely identifies the email message's SENT event. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot://models/marketing/email_events/email_events.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": false}, "created_at": 1696434198.383747, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_hubspot`.`hubspot__email_event_print`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_print_enabled'])) }}\n\n{{ email_events_joined(var('email_event_print')) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_print", "package": null, "version": null}, {"name": "stg_hubspot__email_event", "package": null, "version": null}, {"name": "int_hubspot__contact_merge_adjust", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot.email_events_joined"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot.hubspot__email_event_clicks": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_hubspot", "name": "hubspot__email_event_clicks", "resource_type": "model", "package_name": "hubspot", "path": "marketing/email_events/hubspot__email_event_clicks.sql", "original_file_path": "models/marketing/email_events/hubspot__email_event_clicks.sql", "unique_id": "model.hubspot.hubspot__email_event_clicks", "fqn": ["hubspot", "marketing", "email_events", "hubspot__email_event_clicks"], "alias": "hubspot__email_event_clicks", "checksum": {"name": "sha256", "checksum": "4bf574d2286d34210c35025fa04875d1d4f1e0ab43cfaea0387675cfbc1b39d6"}, "config": {"enabled": false, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a CLICK email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_contact_deleted": {"name": "is_contact_deleted", "description": "{{ doc(\"is_deleted\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "browser": {"name": "browser", "description": "{{ doc(\"email_event_browser\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "click_url": {"name": "click_url", "description": "The URL within the message that the recipient clicked.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "geo_location": {"name": "geo_location", "description": "{{ doc(\"email_event_location\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ip_address": {"name": "ip_address", "description": "{{ doc(\"email_event_ip_address\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "referer_url": {"name": "referer_url", "description": "The URL of the webpage that linked to the URL clicked. Whether this is provided, and what its value is, is determined by the recipient's email client.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_agent": {"name": "user_agent", "description": "{{ doc(\"email_event_user_agent\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The created timestamp of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_campaign_id": {"name": "email_campaign_id", "description": "The ID of the related email campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "recipient_email_address": {"name": "recipient_email_address", "description": "The email address of the contact related to the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_send_timestamp": {"name": "email_send_timestamp", "description": "The timestamp of the SENT event related to this event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_send_id": {"name": "email_send_id", "description": "The event ID which uniquely identifies the email message's SENT event. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot://models/marketing/email_events/email_events.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": false}, "created_at": 1696434198.3751261, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_hubspot`.`hubspot__email_event_clicks`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_click_enabled'])) }}\n\n{{ email_events_joined(var('email_event_click')) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_click", "package": null, "version": null}, {"name": "stg_hubspot__email_event", "package": null, "version": null}, {"name": "int_hubspot__contact_merge_adjust", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot.email_events_joined"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot.hubspot__email_event_forward": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_hubspot", "name": "hubspot__email_event_forward", "resource_type": "model", "package_name": "hubspot", "path": "marketing/email_events/hubspot__email_event_forward.sql", "original_file_path": "models/marketing/email_events/hubspot__email_event_forward.sql", "unique_id": "model.hubspot.hubspot__email_event_forward", "fqn": ["hubspot", "marketing", "email_events", "hubspot__email_event_forward"], "alias": "hubspot__email_event_forward", "checksum": {"name": "sha256", "checksum": "5a2e3978e5b098a1e2a5a469c47d0eb79c5af03225ea9076ef5d0048b6b9c775"}, "config": {"enabled": false, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a FORWARD email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_contact_deleted": {"name": "is_contact_deleted", "description": "{{ doc(\"is_deleted\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "browser": {"name": "browser", "description": "{{ doc(\"email_event_browser\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "geo_location": {"name": "geo_location", "description": "{{ doc(\"email_event_location\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ip_address": {"name": "ip_address", "description": "{{ doc(\"email_event_ip_address\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_agent": {"name": "user_agent", "description": "{{ doc(\"email_event_user_agent\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The created timestamp of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_campaign_id": {"name": "email_campaign_id", "description": "The ID of the related email campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "recipient_email_address": {"name": "recipient_email_address", "description": "The email address of the contact related to the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_send_timestamp": {"name": "email_send_timestamp", "description": "The timestamp of the SENT event related to this event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_send_id": {"name": "email_send_id", "description": "The event ID which uniquely identifies the email message's SENT event. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot://models/marketing/email_events/email_events.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": false}, "created_at": 1696434198.380494, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_hubspot`.`hubspot__email_event_forward`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_forward_enabled'])) }}\n\n{{ email_events_joined(var('email_event_forward')) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_forward", "package": null, "version": null}, {"name": "stg_hubspot__email_event", "package": null, "version": null}, {"name": "int_hubspot__contact_merge_adjust", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot.email_events_joined"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot.hubspot__email_event_bounce": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_hubspot", "name": "hubspot__email_event_bounce", "resource_type": "model", "package_name": "hubspot", "path": "marketing/email_events/hubspot__email_event_bounce.sql", "original_file_path": "models/marketing/email_events/hubspot__email_event_bounce.sql", "unique_id": "model.hubspot.hubspot__email_event_bounce", "fqn": ["hubspot", "marketing", "email_events", "hubspot__email_event_bounce"], "alias": "hubspot__email_event_bounce", "checksum": {"name": "sha256", "checksum": "994e1d2ef6b46304a20dfc45fd515fc0ee546b02502626d794aa525d1e51d709"}, "config": {"enabled": false, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a BOUNCE email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_contact_deleted": {"name": "is_contact_deleted", "description": "{{ doc(\"is_deleted\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bounce_category": {"name": "bounce_category", "description": "The best-guess of the type of bounce encountered. \nIf an appropriate category couldn't be determined, this property is omitted. See below for the possible values. \nNote that this is a derived value, and may be modified at any time to improve the accuracy of classification.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "returned_response": {"name": "returned_response", "description": "The full response from the recipient's email server.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "returned_status": {"name": "returned_status", "description": "The status code returned from the recipient's email server.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The created timestamp of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_campaign_id": {"name": "email_campaign_id", "description": "The ID of the related email campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "recipient_email_address": {"name": "recipient_email_address", "description": "The email address of the contact related to the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_send_timestamp": {"name": "email_send_timestamp", "description": "The timestamp of the SENT event related to this event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_send_id": {"name": "email_send_id", "description": "The event ID which uniquely identifies the email message's SENT event. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot://models/marketing/email_events/email_events.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": false}, "created_at": 1696434198.3738172, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_hubspot`.`hubspot__email_event_bounce`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_bounce_enabled'])) }}\n\n{{ email_events_joined(var('email_event_bounce')) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_bounce", "package": null, "version": null}, {"name": "stg_hubspot__email_event", "package": null, "version": null}, {"name": "int_hubspot__contact_merge_adjust", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot.email_events_joined"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot.int_hubspot__engagement_metrics__by_contact": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_hubspot", "name": "int_hubspot__engagement_metrics__by_contact", "resource_type": "model", "package_name": "hubspot", "path": "marketing/intermediate/int_hubspot__engagement_metrics__by_contact.sql", "original_file_path": "models/marketing/intermediate/int_hubspot__engagement_metrics__by_contact.sql", "unique_id": "model.hubspot.int_hubspot__engagement_metrics__by_contact", "fqn": ["hubspot", "marketing", "intermediate", "int_hubspot__engagement_metrics__by_contact"], "alias": "int_hubspot__engagement_metrics__by_contact", "checksum": {"name": "sha256", "checksum": "83eba876405c4e286e4ac25814521432fed4bedb2cd0c2a3ece56692fbc5cb76"}, "config": {"enabled": false, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"contact_id": {"name": "contact_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot://models/marketing/intermediate/intermediate.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "schema": "hubspot", "enabled": false}, "created_at": 1696434198.438987, "config_call_dict": {"enabled": false}, "relation_name": null, "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_contact_enabled'])) }}\n\nwith engagements as (\n\n    select *\n    from {{ ref('hubspot__engagements') }}\n\n), engagement_contacts as (\n\n    select *\n    from {{ var('engagement_contact') }}\n\n), engagement_contacts_joined as (\n\n    select\n        engagements.engagement_type,\n        engagement_contacts.contact_id\n    from engagements\n    inner join engagement_contacts\n        using (engagement_id)\n\n), engagement_contacts_agg as (\n\n    {{ engagements_aggregated('engagement_contacts_joined', 'contact_id') }}\n\n)\n\nselect *\nfrom engagement_contacts_agg", "language": "sql", "refs": [{"name": "hubspot__engagements", "package": null, "version": null}, {"name": "stg_hubspot__engagement_contact", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot.engagements_aggregated"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot.int_hubspot__email_event_aggregates": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_hubspot", "name": "int_hubspot__email_event_aggregates", "resource_type": "model", "package_name": "hubspot", "path": "marketing/intermediate/int_hubspot__email_event_aggregates.sql", "original_file_path": "models/marketing/intermediate/int_hubspot__email_event_aggregates.sql", "unique_id": "model.hubspot.int_hubspot__email_event_aggregates", "fqn": ["hubspot", "marketing", "intermediate", "int_hubspot__email_event_aggregates"], "alias": "int_hubspot__email_event_aggregates", "checksum": {"name": "sha256", "checksum": "c0a91a82af153e1cef4c6056ef7dc9386dc907a3806fc053a47db4c600d7d5ef"}, "config": {"enabled": false, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"email_send_id": {"name": "email_send_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot://models/marketing/intermediate/intermediate.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "schema": "hubspot", "enabled": false}, "created_at": 1696434198.438278, "config_call_dict": {"enabled": false}, "relation_name": null, "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled'])) }}\n\nwith events as (\n\n    select *\n    from {{ var('email_event') }}\n\n), aggregates as (\n\n    select\n        sent_by_event_id as email_send_id,\n        count(case when event_type = 'OPEN' then sent_by_event_id end) as opens,\n        count(case when event_type = 'SENT' then sent_by_event_id end) as sends,\n        count(case when event_type = 'DELIVERED' then sent_by_event_id end) as deliveries,\n        count(case when event_type = 'DROPPED' then sent_by_event_id end) as drops,\n        count(case when event_type = 'CLICK' then sent_by_event_id end) as clicks,\n        count(case when event_type = 'FORWARD' then sent_by_event_id end) as forwards,\n        count(case when event_type = 'DEFERRED' then sent_by_event_id end) as deferrals,\n        count(case when event_type = 'BOUNCE' then sent_by_event_id end) as bounces,\n        count(case when event_type = 'SPAMREPORT' then sent_by_event_id end) as spam_reports,\n        count(case when event_type = 'PRINT' then sent_by_event_id end) as prints\n    from events\n    where sent_by_event_id is not null\n    group by 1\n\n)\n\nselect *\nfrom aggregates", "language": "sql", "refs": [{"name": "stg_hubspot__email_event", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot.int_hubspot__email_aggregate_status_change": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_hubspot", "name": "int_hubspot__email_aggregate_status_change", "resource_type": "model", "package_name": "hubspot", "path": "marketing/intermediate/int_hubspot__email_aggregate_status_change.sql", "original_file_path": "models/marketing/intermediate/int_hubspot__email_aggregate_status_change.sql", "unique_id": "model.hubspot.int_hubspot__email_aggregate_status_change", "fqn": ["hubspot", "marketing", "intermediate", "int_hubspot__email_aggregate_status_change"], "alias": "int_hubspot__email_aggregate_status_change", "checksum": {"name": "sha256", "checksum": "b25d4aec8009cfce0f82ee3ffbdea172a672452e80791d28c6444a22c2405dae"}, "config": {"enabled": false, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"email_send_id": {"name": "email_send_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot://models/marketing/intermediate/intermediate.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "schema": "hubspot", "enabled": false}, "created_at": 1696434198.436841, "config_call_dict": {"enabled": false}, "relation_name": null, "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_status_change_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('hubspot__email_event_status_change') }}\n\n), aggregates as (\n\n    select\n        email_campaign_id,\n        email_send_id,\n        count(case when subscription_status = 'UNSUBSCRIBED' then 1 end) as unsubscribes\n    from base\n    where email_send_id is not null\n    group by 1,2\n\n)\n\nselect *\nfrom aggregates", "language": "sql", "refs": [{"name": "hubspot__email_event_status_change", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot.int_hubspot__email_metrics__by_contact_list": [{"database": "dbt-package-testing", "schema": "zz_dbt_renee_hubspot", "name": "int_hubspot__email_metrics__by_contact_list", "resource_type": "model", "package_name": "hubspot", "path": "marketing/intermediate/int_hubspot__email_metrics__by_contact_list.sql", "original_file_path": "models/marketing/intermediate/int_hubspot__email_metrics__by_contact_list.sql", "unique_id": "model.hubspot.int_hubspot__email_metrics__by_contact_list", "fqn": ["hubspot", "marketing", "intermediate", "int_hubspot__email_metrics__by_contact_list"], "alias": "int_hubspot__email_metrics__by_contact_list", "checksum": {"name": "sha256", "checksum": "1564c391cee8ebbb5a2d5b106c5b70101135712794a4c9ebc0da61a772eddc7d"}, "config": {"enabled": false, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"contact_list_id": {"name": "contact_list_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot://models/marketing/intermediate/intermediate.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": false}, "created_at": 1696434198.437574, "config_call_dict": {"enabled": false, "materialized": "table"}, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_hubspot`.`int_hubspot__email_metrics__by_contact_list`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_contact_list_member_enabled']), materialized='table') }}\n\nwith email_sends as (\n\n    select *\n    from {{ ref('hubspot__email_sends') }}\n\n), contact_list_member as (\n\n    select *\n    from {{ var('contact_list_member') }}\n\n), joined as (\n\n    select\n        email_sends.*,\n        contact_list_member.contact_list_id\n    from email_sends\n    left join contact_list_member\n        using (contact_id)\n    where contact_list_member.contact_list_id is not null\n\n), email_metrics as (\n    {% set email_metrics = adjust_email_metrics('hubspot__email_sends', 'email_metrics') %}\n    select \n        contact_list_id,\n        {% for metric in email_metrics %}\n        sum({{ metric }}) as total_{{ metric }},\n        count(distinct case when {{ metric }} > 0 then email_send_id end) as total_unique_{{ metric }}\n        {% if not loop.last %},{% endif %}\n        {% endfor %}\n    from joined\n    group by 1\n\n)\n\nselect *\nfrom email_metrics", "language": "sql", "refs": [{"name": "hubspot__email_sends", "package": null, "version": null}, {"name": "stg_hubspot__contact_list_member", "package": null, "version": null}, {"name": "hubspot__email_sends", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot.adjust_email_metrics"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "source.hubspot_source.hubspot.contact_merge_audit": [{"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "contact_merge_audit", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.contact_merge_audit", "fqn": ["hubspot_source", "hubspot", "contact_merge_audit"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "contact_merge_audit", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "DEPRECATED FOR NON-BIGQUERY USERS (will be deprecated on BigQuery as well). Each record contains a contact merge event and the contacts effected by the merge.\n", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "canonical_vid": {"name": "canonical_vid", "description": "The contact ID of the contact which the vid_to_merge contact was merged into.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "entity_id": {"name": "entity_id", "description": "The ID of the related entity.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "The contact's first name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "The contact's last name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "num_properties_moved": {"name": "num_properties_moved", "description": "The number of properties which were removed from the merged contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "Timestamp of when the contacts were merged.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "The ID of the user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vid_to_merge": {"name": "vid_to_merge", "description": "The ID of the contact which was merged.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": false}, "patch_path": null, "unrendered_config": {"enabled": false}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`contact_merge_audit`", "created_at": 1696434198.489268}], "source.hubspot_source.hubspot.email_campaign": [{"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "email_campaign", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.email_campaign", "fqn": ["hubspot_source", "hubspot", "email_campaign"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "email_campaign", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents an email campaign in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "app_id": {"name": "app_id", "description": "The app ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "app_name": {"name": "app_name", "description": "The app name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "content_id": {"name": "content_id", "description": "The ID of the content.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the email campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the email campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "num_included": {"name": "num_included", "description": "The number of messages included as part of the email campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "num_queued": {"name": "num_queued", "description": "The number of messages queued as part of the email campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sub_type": {"name": "sub_type", "description": "The email campaign sub-type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subject": {"name": "subject", "description": "The subject of the email campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "The email campaign type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": false}, "patch_path": null, "unrendered_config": {"enabled": false}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`email_campaign`", "created_at": 1696434198.493711}], "source.hubspot_source.hubspot.email_event": [{"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "email_event", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.email_event", "fqn": ["hubspot_source", "hubspot", "email_event"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "email_event", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 84, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents an email event in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "app_id": {"name": "app_id", "description": "The ID of the app that sent the email.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "caused_by_created": {"name": "caused_by_created", "description": "The timestamp of the event that caused this event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "caused_by_id": {"name": "caused_by_id", "description": "The event ID which uniquely identifies the event which directly caused this event. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created": {"name": "created", "description": "The created timestamp of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_campaign_id": {"name": "email_campaign_id", "description": "The ID of the related email campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "filtered_event": {"name": "filtered_event", "description": "A boolean representing whether the event has been filtered out of reporting based on customer reports settings or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "obsoleted_by_created": {"name": "obsoleted_by_created", "description": "The timestamp of the event that made the current event obsolete.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "obsoleted_by_id": {"name": "obsoleted_by_id", "description": "The event ID which uniquely identifies the follow-on event which makes this current event obsolete. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "{{ doc(\"portal_id\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "recipient": {"name": "recipient", "description": "The email address of the contact related to the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sent_by_created": {"name": "sent_by_created", "description": "The timestamp of the SENT event related to this event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sent_by_id": {"name": "sent_by_id", "description": "The event ID which uniquely identifies the email message's SENT event. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": false}, "patch_path": null, "unrendered_config": {"enabled": false}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`email_event`", "created_at": 1696434198.494136}], "source.hubspot_source.hubspot.email_event_bounce": [{"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "email_event_bounce", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.email_event_bounce", "fqn": ["hubspot_source", "hubspot", "email_event_bounce"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "email_event_bounce", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a BOUNCE email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "category": {"name": "category", "description": "The best-guess of the type of bounce encountered.\nIf an appropriate category couldn't be determined, this property is omitted. See below for the possible values.\nNote that this is a derived value, and may be modified at any time to improve the accuracy of classification.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "response": {"name": "response", "description": "The full response from the recipient's email server.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "The status code returned from the recipient's email server.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": false}, "patch_path": null, "unrendered_config": {"enabled": false}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`email_event_bounce`", "created_at": 1696434198.494497}], "source.hubspot_source.hubspot.email_event_click": [{"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "email_event_click", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.email_event_click", "fqn": ["hubspot_source", "hubspot", "email_event_click"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "email_event_click", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a CLICK email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "browser": {"name": "browser", "description": "{{ doc(\"email_event_browser\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ip_address": {"name": "ip_address", "description": "{{ doc(\"email_event_ip_address\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "location": {"name": "location", "description": "{{ doc(\"email_event_location\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "referer": {"name": "referer", "description": "The URL of the webpage that linked to the URL clicked. Whether this is provided, and what its value is, is determined by the recipient's email client.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "url": {"name": "url", "description": "The URL within the message that the recipient clicked.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_agent": {"name": "user_agent", "description": "{{ doc(\"email_event_user_agent\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": false}, "patch_path": null, "unrendered_config": {"enabled": false}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`email_event_click`", "created_at": 1696434198.494851}], "source.hubspot_source.hubspot.email_event_deferred": [{"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "email_event_deferred", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.email_event_deferred", "fqn": ["hubspot_source", "hubspot", "email_event_deferred"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "email_event_deferred", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a DEFERRED email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "attempt": {"name": "attempt", "description": "The delivery attempt number.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "response": {"name": "response", "description": "The full response from the recipient's email server.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": false}, "patch_path": null, "unrendered_config": {"enabled": false}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`email_event_deferred`", "created_at": 1696434198.495164}], "source.hubspot_source.hubspot.email_event_delivered": [{"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "email_event_delivered", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.email_event_delivered", "fqn": ["hubspot_source", "hubspot", "email_event_delivered"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "email_event_delivered", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a DELIVERED email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "response": {"name": "response", "description": "The full response from the recipient's email server.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "smtp_id": {"name": "smtp_id", "description": "An ID attached to the message by HubSpot.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": false}, "patch_path": null, "unrendered_config": {"enabled": false}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`email_event_delivered`", "created_at": 1696434198.495477}], "source.hubspot_source.hubspot.email_event_dropped": [{"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "email_event_dropped", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.email_event_dropped", "fqn": ["hubspot_source", "hubspot", "email_event_dropped"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "email_event_dropped", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a DROPPED email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bcc": {"name": "bcc", "description": "The 'bcc' field of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cc": {"name": "cc", "description": "The 'cc' field of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "drop_message": {"name": "drop_message", "description": "The raw message describing why the email message was dropped. This will usually provide additional details beyond 'dropReason'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "drop_reason": {"name": "drop_reason", "description": "The reason why the email message was dropped. See below for the possible values.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "from": {"name": "from", "description": "The 'from' field of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reply_to": {"name": "reply_to", "description": "The 'reply-to' field of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subject": {"name": "subject", "description": "The subject line of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": false}, "patch_path": null, "unrendered_config": {"enabled": false}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`email_event_dropped`", "created_at": 1696434198.495797}], "source.hubspot_source.hubspot.email_event_forward": [{"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "email_event_forward", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.email_event_forward", "fqn": ["hubspot_source", "hubspot", "email_event_forward"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "email_event_forward", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a FORWARD email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "browser": {"name": "browser", "description": "{{ doc(\"email_event_browser\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ip_address": {"name": "ip_address", "description": "{{ doc(\"email_event_ip_address\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "location": {"name": "location", "description": "{{ doc(\"email_event_location\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_agent": {"name": "user_agent", "description": "{{ doc(\"email_event_user_agent\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": false}, "patch_path": null, "unrendered_config": {"enabled": false}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`email_event_forward`", "created_at": 1696434198.4961972}], "source.hubspot_source.hubspot.email_event_open": [{"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "email_event_open", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.email_event_open", "fqn": ["hubspot_source", "hubspot", "email_event_open"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "email_event_open", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a OPEN email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "browser": {"name": "browser", "description": "{{ doc(\"email_event_browser\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "duration": {"name": "duration", "description": "If provided and nonzero, the approximate number of milliseconds the user had opened the email.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ip_address": {"name": "ip_address", "description": "{{ doc(\"email_event_ip_address\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "location": {"name": "location", "description": "{{ doc(\"email_event_location\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_agent": {"name": "user_agent", "description": "{{ doc(\"email_event_user_agent\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": false}, "patch_path": null, "unrendered_config": {"enabled": false}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`email_event_open`", "created_at": 1696434198.496511}], "source.hubspot_source.hubspot.email_event_print": [{"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "email_event_print", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.email_event_print", "fqn": ["hubspot_source", "hubspot", "email_event_print"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "email_event_print", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a PRINT email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "browser": {"name": "browser", "description": "{{ doc(\"email_event_browser\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ip_address": {"name": "ip_address", "description": "{{ doc(\"email_event_ip_address\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "location": {"name": "location", "description": "{{ doc(\"email_event_location\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_agent": {"name": "user_agent", "description": "{{ doc(\"email_event_user_agent\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": false}, "patch_path": null, "unrendered_config": {"enabled": false}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`email_event_print`", "created_at": 1696434198.4968178}], "source.hubspot_source.hubspot.email_event_sent": [{"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "email_event_sent", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.email_event_sent", "fqn": ["hubspot_source", "hubspot", "email_event_sent"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "email_event_sent", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a SENT email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bcc": {"name": "bcc", "description": "The 'cc' field of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cc": {"name": "cc", "description": "The 'bcc' field of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "from": {"name": "from", "description": "The 'from' field of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reply_to": {"name": "reply_to", "description": "The 'reply-to' field of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subject": {"name": "subject", "description": "The subject line of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": false}, "patch_path": null, "unrendered_config": {"enabled": false}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`email_event_sent`", "created_at": 1696434198.497128}], "source.hubspot_source.hubspot.email_event_spam_report": [{"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "email_event_spam_report", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.email_event_spam_report", "fqn": ["hubspot_source", "hubspot", "email_event_spam_report"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "email_event_spam_report", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a SPAM_REPORT email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ip_address": {"name": "ip_address", "description": "{{ doc(\"email_event_ip_address\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_agent": {"name": "user_agent", "description": "{{ doc(\"email_event_user_agent\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": false}, "patch_path": null, "unrendered_config": {"enabled": false}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`email_event_spam_report`", "created_at": 1696434198.497427}], "source.hubspot_source.hubspot.email_event_status_change": [{"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "email_event_status_change", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.email_event_status_change", "fqn": ["hubspot_source", "hubspot", "email_event_status_change"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "email_event_status_change", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a STATUS_CHANGE email event in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bounced": {"name": "bounced", "description": "A HubSpot employee explicitly initiated the status change to block messages to the recipient.\n(Note this usage has been deprecated in favor of dropping messages with a 'dropReason' of BLOCKED_ADDRESS.)\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "portal_subscription_status": {"name": "portal_subscription_status", "description": "The recipient's portal subscription status.\nNote that if this is 'UNSUBSCRIBED', the property 'subscriptions' is not necessarily an empty array, nor are all\nsubscriptions contained in it necessarily going to have their statuses set to 'UNSUBSCRIBED'.)\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "requested_by": {"name": "requested_by", "description": "The email address of the person requesting the change on behalf of the recipient. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source": {"name": "source", "description": "The source of the subscription change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscriptions": {"name": "subscriptions", "description": "An array of JSON objects representing the status of subscriptions for the recipient.\nEach JSON subscription object is comprised of the properties: 'id', 'status'.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": false}, "patch_path": null, "unrendered_config": {"enabled": false}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`email_event_status_change`", "created_at": 1696434198.497739}], "source.hubspot_source.hubspot.engagement": [{"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "engagement", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.engagement", "fqn": ["hubspot_source", "hubspot", "engagement"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "engagement", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents an engagement", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active": {"name": "active", "description": "Whether the engagement is currently being shown in the UI.\nPLEASE NOTE: This field will not be populated for connectors utilizing the HubSpot v3 API version. This field will be deprecated in a future release.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "A timestamp representing when the engagement was created.\nPLEASE NOTE: This field will not be populated for connectors utilizing the HubSpot v3 API version. This field will be deprecated in a future release.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "The ID of the engagement's owner.\nPLEASE NOTE: This field will not be populated for connectors utilizing the HubSpot v3 API version. This field will be deprecated in a future release.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "{{ doc(\"portal_id\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "A timestamp in representing the time that the engagement should appear in the timeline.\nPLEASE NOTE: This field will not be populated for connectors utilizing the HubSpot v3 API version. This field will be deprecated in a future release.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "One of NOTE, EMAIL, TASK, MEETING, or CALL, the type of the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": false}, "patch_path": null, "unrendered_config": {"enabled": false}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`engagement`", "created_at": 1696434198.4987369}], "source.hubspot_source.hubspot.engagement_call": [{"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "engagement_call", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.engagement_call", "fqn": ["hubspot_source", "hubspot", "engagement_call"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "engagement_call", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a CALL engagement event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean to mark rows that were deleted in the source database.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_hs_createdate": {"name": "property_hs_createdate", "description": "This field marks the call's time of creation and determines where the call sits on the record timeline. You can use either a Unix timestamp in milliseconds or UTC format. \nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "This field marks the call's time of occurrence and determines where the call sits on the record timeline. You can use either a Unix timestamp in milliseconds or UTC format. \nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_hubspot_owner_id": {"name": "property_hubspot_owner_id", "description": "The ID of the owner associated with the call. This field determines the user listed as the call creator on the record timeline.\nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_hubspot_team_id": {"name": "property_hubspot_team_id", "description": "The ID of the team associated with the call. This field determines the team listed as the call creator on the record timeline.\nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": false}, "patch_path": null, "unrendered_config": {"enabled": false}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`engagement_call`", "created_at": 1696434198.499068}], "source.hubspot_source.hubspot.engagement_company": [{"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "engagement_company", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.engagement_company", "fqn": ["hubspot_source", "hubspot", "engagement_company"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "engagement_company", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a 'link' between a company and an engagement.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_id": {"name": "company_id", "description": "The ID of the related company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the related engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": false}, "patch_path": null, "unrendered_config": {"enabled": false}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`engagement_company`", "created_at": 1696434198.499368}], "source.hubspot_source.hubspot.engagement_contact": [{"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "engagement_contact", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.engagement_contact", "fqn": ["hubspot_source", "hubspot", "engagement_contact"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "engagement_contact", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a 'link' between a contact and an engagement.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the related engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": false}, "patch_path": null, "unrendered_config": {"enabled": false}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`engagement_contact`", "created_at": 1696434198.499667}], "source.hubspot_source.hubspot.engagement_deal": [{"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "engagement_deal", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.engagement_deal", "fqn": ["hubspot_source", "hubspot", "engagement_deal"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "engagement_deal", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a 'link' between a deal and an engagement.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_id": {"name": "deal_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the related engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": false}, "patch_path": null, "unrendered_config": {"enabled": false}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`engagement_deal`", "created_at": 1696434198.499964}], "source.hubspot_source.hubspot.engagement_email": [{"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "engagement_email", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.engagement_email", "fqn": ["hubspot_source", "hubspot", "engagement_email"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "engagement_email", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents an EMAIL engagement event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_hs_createdate": {"name": "property_hs_createdate", "description": "This field marks the email's time of creation and determines where the email sits on the record timeline. You can use either a Unix timestamp in milliseconds or UTC format. \nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "This field marks the email's time of occurrence and determines where the email sits on the record timeline. You can use either a Unix timestamp in milliseconds or UTC format. \nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_hubspot_owner_id": {"name": "property_hubspot_owner_id", "description": "The ID of the owner associated with the email. This field determines the user listed as the email creator on the record timeline.\nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_hubspot_team_id": {"name": "property_hubspot_team_id", "description": "The ID of the team associated with the email. This field determines the team listed as the email creator on the record timeline.\nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": false}, "patch_path": null, "unrendered_config": {"enabled": false}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`engagement_email`", "created_at": 1696434198.500275}], "source.hubspot_source.hubspot.engagement_meeting": [{"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "engagement_meeting", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.engagement_meeting", "fqn": ["hubspot_source", "hubspot", "engagement_meeting"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "engagement_meeting", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a MEETING engagement event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_hs_createdate": {"name": "property_hs_createdate", "description": "This field marks the meeting's time of creation and determines where the meeting sits on the record timeline. You can use either a Unix timestamp in milliseconds or UTC format. \nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "This field marks the meeting's time of occurrence and determines where the meeting sits on the record timeline. You can use either a Unix timestamp in milliseconds or UTC format. \nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_hubspot_owner_id": {"name": "property_hubspot_owner_id", "description": "The ID of the owner associated with the meeting. This field determines the user listed as the meeting creator on the record timeline.\nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_hubspot_team_id": {"name": "property_hubspot_team_id", "description": "The ID of the team associated with the meeting. This field determines the team listed as the meeting creator on the record timeline.\nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": false}, "patch_path": null, "unrendered_config": {"enabled": false}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`engagement_meeting`", "created_at": 1696434198.501355}], "source.hubspot_source.hubspot.engagement_note": [{"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "engagement_note", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.engagement_note", "fqn": ["hubspot_source", "hubspot", "engagement_note"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "engagement_note", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a NOTE engagement event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "body": {"name": "body", "description": "The body of the note. The body has a limit of 65536 characters.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_hs_createdate": {"name": "property_hs_createdate", "description": "This field marks the note's time of creation and determines where the note sits on the record timeline. You can use either a Unix timestamp in milliseconds or UTC format. \nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "This field marks the note's time of occurrence and determines where the note sits on the record timeline. You can use either a Unix timestamp in milliseconds or UTC format. \nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_hubspot_owner_id": {"name": "property_hubspot_owner_id", "description": "The ID of the owner associated with the note. This field determines the user listed as the note creator on the record timeline.\nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_hubspot_team_id": {"name": "property_hubspot_team_id", "description": "The ID of the team associated with the note. This field determines the team listed as the note creator on the record timeline.\nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": false}, "patch_path": null, "unrendered_config": {"enabled": false}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`engagement_note`", "created_at": 1696434198.5016682}], "source.hubspot_source.hubspot.engagement_task": [{"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "engagement_task", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.engagement_task", "fqn": ["hubspot_source", "hubspot", "engagement_task"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "engagement_task", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a TASK engagement event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_hs_createdate": {"name": "property_hs_createdate", "description": "This field marks the task's time of creation and determines where the task sits on the record timeline. You can use either a Unix timestamp in milliseconds or UTC format. \nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "This field marks the task's time of occurrence and determines where the task sits on the record timeline. You can use either a Unix timestamp in milliseconds or UTC format. \nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_hubspot_owner_id": {"name": "property_hubspot_owner_id", "description": "The ID of the owner associated with the task. This field determines the user listed as the task creator on the record timeline.\nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_hubspot_team_id": {"name": "property_hubspot_team_id", "description": "The ID of the team associated with the task. This field determines the team listed as the task creator on the record timeline.\nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": false}, "patch_path": null, "unrendered_config": {"enabled": false}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`engagement_task`", "created_at": 1696434198.501973}], "source.hubspot_source.hubspot.ticket_company": [{"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "ticket_company", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.ticket_company", "fqn": ["hubspot_source", "hubspot", "ticket_company"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "ticket_company", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a 'link' between a ticket and company.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_id": {"name": "ticket_id", "description": "The ID of the related ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_id": {"name": "company_id", "description": "The ID of the related company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": false}, "patch_path": null, "unrendered_config": {"enabled": false}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`ticket_company`", "created_at": 1696434198.502901}], "source.hubspot_source.hubspot.ticket_contact": [{"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "ticket_contact", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.ticket_contact", "fqn": ["hubspot_source", "hubspot", "ticket_contact"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "ticket_contact", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a 'link' between a ticket and a contact.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_id": {"name": "ticket_id", "description": "The ID of the related ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": false}, "patch_path": null, "unrendered_config": {"enabled": false}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`ticket_contact`", "created_at": 1696434198.5031989}], "source.hubspot_source.hubspot.ticket_deal": [{"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "ticket_deal", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.ticket_deal", "fqn": ["hubspot_source", "hubspot", "ticket_deal"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "ticket_deal", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a 'link' between a ticket and a deal.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_id": {"name": "ticket_id", "description": "The ID of the related ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_id": {"name": "deal_id", "description": "The ID of the related deal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": false}, "patch_path": null, "unrendered_config": {"enabled": false}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`ticket_deal`", "created_at": 1696434198.5034938}], "source.hubspot_source.hubspot.ticket_engagement": [{"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "ticket_engagement", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.ticket_engagement", "fqn": ["hubspot_source", "hubspot", "ticket_engagement"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "ticket_engagement", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a 'link' between a ticket and an engagement.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_id": {"name": "ticket_id", "description": "The ID of the related ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the related deal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": false}, "patch_path": null, "unrendered_config": {"enabled": false}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`ticket_engagement`", "created_at": 1696434198.503789}], "source.hubspot_source.hubspot.ticket_pipeline_stage": [{"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "ticket_pipeline_stage", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.ticket_pipeline_stage", "fqn": ["hubspot_source", "hubspot", "ticket_pipeline_stage"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "ticket_pipeline_stage", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a ticket pipeline stage.", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "{{ doc(\"_fivetran_deleted\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active": {"name": "active", "description": "Boolean indicating whether the pipeline stage is active.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "display_order": {"name": "display_order", "description": "Used to determine the order in which the stages appear when viewed in HubSpot.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_closed": {"name": "is_closed", "description": "Boolean indicating if the pipeline stage is closed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "label": {"name": "label", "description": "The human-readable label for the stage. The label is used when showing the stage in HubSpot.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pipeline_id": {"name": "pipeline_id", "description": "The ID of the pipeline.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stage_id": {"name": "stage_id", "description": "The ID of the pipeline stage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_state": {"name": "ticket_state", "description": "State of the ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "A timestamp representing when the record was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "A timestamp representing when the record was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": false}, "patch_path": null, "unrendered_config": {"enabled": false}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`ticket_pipeline_stage`", "created_at": 1696434198.504113}], "source.hubspot_source.hubspot.ticket_pipeline": [{"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "ticket_pipeline", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.ticket_pipeline", "fqn": ["hubspot_source", "hubspot", "ticket_pipeline"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "ticket_pipeline", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a ticket pipeline.", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "{{ doc(\"_fivetran_deleted\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active": {"name": "active", "description": "Boolean indicating whether the pipeline is active.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "display_order": {"name": "display_order", "description": "Used to determine the order in which the stages appear when viewed in HubSpot.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "label": {"name": "label", "description": "The human-readable label for the stage. The label is used when showing the stage in HubSpot.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "object_type_id": {"name": "object_type_id", "description": "Reference to the object type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pipeline_id": {"name": "pipeline_id", "description": "Reference to the pipeline.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "A timestamp representing when the record was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "A timestamp representing when the record was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": false}, "patch_path": null, "unrendered_config": {"enabled": false}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`ticket_pipeline`", "created_at": 1696434198.504433}], "source.hubspot_source.hubspot.ticket_property_history": [{"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "ticket_property_history", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.ticket_property_history", "fqn": ["hubspot_source", "hubspot", "ticket_property_history"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "ticket_property_history", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a change to ticket record in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source": {"name": "source", "description": "{{ doc(\"history_source\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_id": {"name": "source_id", "description": "{{ doc(\"history_source_id\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "timestamp_instant": {"name": "timestamp_instant", "description": "{{ doc(\"history_timestamp\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_id": {"name": "ticket_id", "description": "The ID of the related ticket record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "{{ doc(\"history_name\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "value": {"name": "value", "description": "{{ doc(\"history_value\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": false}, "patch_path": null, "unrendered_config": {"enabled": false}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`ticket_property_history`", "created_at": 1696434198.504756}], "source.hubspot_source.hubspot.ticket": [{"database": "singular-vector-135519", "schema": "hubspot_v3_part2", "name": "ticket", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.ticket", "fqn": ["hubspot_source", "hubspot", "ticket"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "ticket", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a ticket in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "ID of the ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Whether the record was deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "{{ doc(\"portal_id\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_closed_date": {"name": "property_closed_date", "description": "The date the ticket was closed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_createdate": {"name": "property_createdate", "description": "The date the ticket was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_first_agent_reply_date": {"name": "property_first_agent_reply_date", "description": "the date for the first agent reply on the ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_hs_pipeline": {"name": "property_hs_pipeline", "description": "The ID of the ticket's pipeline.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_hs_pipeline_stage": {"name": "property_hs_pipeline_stage", "description": "The ID of the ticket's pipeline stage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_hs_ticket_priority": {"name": "property_hs_ticket_priority", "description": "The priority of the ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_hs_ticket_category": {"name": "property_hs_ticket_category", "description": "The category of the ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_hubspot_owner_id": {"name": "property_hubspot_owner_id", "description": "The ID of the deal's owner.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_subject": {"name": "property_subject", "description": "Short summary of ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_content": {"name": "property_content", "description": "Text in body of the ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": false}, "patch_path": null, "unrendered_config": {"enabled": false}, "relation_name": "`singular-vector-135519`.`hubspot_v3_part2`.`ticket`", "created_at": 1696434198.505216}]}, "parent_map": {"model.hubspot_source.stg_hubspot__company_property_history": ["model.hubspot_source.stg_hubspot__company_property_history_tmp"], "model.hubspot_source.stg_hubspot__owner": ["model.hubspot_source.stg_hubspot__owner_tmp"], "model.hubspot_source.stg_hubspot__contact_list_member": ["model.hubspot_source.stg_hubspot__contact_list_member_tmp"], "model.hubspot_source.stg_hubspot__contact": ["model.hubspot_source.stg_hubspot__contact_tmp"], "model.hubspot_source.stg_hubspot__deal": ["model.hubspot_source.stg_hubspot__deal_tmp"], "model.hubspot_source.stg_hubspot__deal_pipeline": ["model.hubspot_source.stg_hubspot__deal_pipeline_tmp"], "model.hubspot_source.stg_hubspot__deal_company": ["model.hubspot_source.stg_hubspot__deal_company_tmp"], "model.hubspot_source.stg_hubspot__contact_list": ["model.hubspot_source.stg_hubspot__contact_list_tmp"], "model.hubspot_source.stg_hubspot__deal_pipeline_stage": ["model.hubspot_source.stg_hubspot__deal_pipeline_stage_tmp"], "model.hubspot_source.stg_hubspot__deal_stage": ["model.hubspot_source.stg_hubspot__deal_stage_tmp"], "model.hubspot_source.stg_hubspot__deal_property_history": ["model.hubspot_source.stg_hubspot__deal_property_history_tmp"], "model.hubspot_source.stg_hubspot__company": ["model.hubspot_source.stg_hubspot__company_tmp"], "model.hubspot_source.stg_hubspot__deal_contact": ["model.hubspot_source.stg_hubspot__deal_contact_tmp"], "model.hubspot_source.stg_hubspot__contact_property_history": ["model.hubspot_source.stg_hubspot__contact_property_history_tmp"], "model.hubspot_source.stg_hubspot__contact_property_history_tmp": ["source.hubspot_source.hubspot.contact_property_history"], "model.hubspot_source.stg_hubspot__deal_tmp": ["source.hubspot_source.hubspot.deal"], "model.hubspot_source.stg_hubspot__deal_contact_tmp": ["source.hubspot_source.hubspot.deal_contact"], "model.hubspot_source.stg_hubspot__contact_list_member_tmp": ["source.hubspot_source.hubspot.contact_list_member"], "model.hubspot_source.stg_hubspot__owner_tmp": ["source.hubspot_source.hubspot.owner"], "model.hubspot_source.stg_hubspot__deal_stage_tmp": ["source.hubspot_source.hubspot.deal_stage"], "model.hubspot_source.stg_hubspot__deal_pipeline_tmp": ["source.hubspot_source.hubspot.deal_pipeline"], "model.hubspot_source.stg_hubspot__contact_tmp": ["source.hubspot_source.hubspot.contact"], "model.hubspot_source.stg_hubspot__deal_company_tmp": ["source.hubspot_source.hubspot.deal_company"], "model.hubspot_source.stg_hubspot__company_property_history_tmp": ["source.hubspot_source.hubspot.company_property_history"], "model.hubspot_source.stg_hubspot__company_tmp": ["source.hubspot_source.hubspot.company"], "model.hubspot_source.stg_hubspot__contact_list_tmp": ["source.hubspot_source.hubspot.contact_list"], "model.hubspot_source.stg_hubspot__deal_pipeline_stage_tmp": ["source.hubspot_source.hubspot.deal_pipeline_stage"], "model.hubspot_source.stg_hubspot__deal_property_history_tmp": ["source.hubspot_source.hubspot.deal_property_history"], "model.hubspot.hubspot__companies": ["model.hubspot_source.stg_hubspot__company"], "model.hubspot.hubspot__deals": ["model.hubspot.int_hubspot__deals_enhanced"], "model.hubspot.hubspot__deal_stages": ["model.hubspot.int_hubspot__deals_enhanced", "model.hubspot_source.stg_hubspot__deal_pipeline", "model.hubspot_source.stg_hubspot__deal_pipeline_stage", "model.hubspot_source.stg_hubspot__deal_stage"], "model.hubspot.hubspot__deal_history": ["model.hubspot_source.stg_hubspot__deal_property_history"], "model.hubspot.hubspot__company_history": ["model.hubspot_source.stg_hubspot__company_property_history"], "model.hubspot.int_hubspot__deals_enhanced": ["model.hubspot_source.stg_hubspot__deal", "model.hubspot_source.stg_hubspot__deal_pipeline", "model.hubspot_source.stg_hubspot__deal_pipeline_stage", "model.hubspot_source.stg_hubspot__owner"], "model.hubspot.hubspot__contact_lists": ["model.hubspot_source.stg_hubspot__contact_list"], "model.hubspot.hubspot__contacts": ["model.hubspot.int_hubspot__contact_merge_adjust"], "model.hubspot.hubspot__contact_history": ["model.hubspot_source.stg_hubspot__contact_property_history"], "model.hubspot.int_hubspot__contact_merge_adjust": ["model.hubspot_source.stg_hubspot__contact"], "test.hubspot_source.unique_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id.ba90fa6113": ["model.hubspot_source.stg_hubspot__deal_pipeline_stage"], "test.hubspot_source.not_null_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id.d53656553e": ["model.hubspot_source.stg_hubspot__deal_pipeline_stage"], "test.hubspot_source.unique_stg_hubspot__deal_pipeline_deal_pipeline_id.dff6c45403": ["model.hubspot_source.stg_hubspot__deal_pipeline"], "test.hubspot_source.not_null_stg_hubspot__deal_pipeline_deal_pipeline_id.8a0e3cd7a3": ["model.hubspot_source.stg_hubspot__deal_pipeline"], "test.hubspot_source.not_null_stg_hubspot__deal_deal_id.ff48693e20": ["model.hubspot_source.stg_hubspot__deal"], "test.hubspot_source.unique_stg_hubspot__deal_deal_id.ac1628ac69": ["model.hubspot_source.stg_hubspot__deal"], "test.hubspot_source.dbt_utils_unique_combination_of_columns_stg_hubspot__deal_company_company_id__deal_id__type_id.59d48f3923": ["model.hubspot_source.stg_hubspot__deal_company"], "test.hubspot_source.dbt_utils_unique_combination_of_columns_stg_hubspot__deal_contact_contact_id__deal_id__type_id.37de71798b": ["model.hubspot_source.stg_hubspot__deal_contact"], "test.hubspot_source.unique_stg_hubspot__contact_list_contact_list_id.036739c1b0": ["model.hubspot_source.stg_hubspot__contact_list"], "test.hubspot_source.not_null_stg_hubspot__contact_list_contact_list_id.ff8e4cc29a": ["model.hubspot_source.stg_hubspot__contact_list"], "test.hubspot_source.unique_stg_hubspot__contact_contact_id.b9135eb03a": ["model.hubspot_source.stg_hubspot__contact"], "test.hubspot_source.not_null_stg_hubspot__contact_contact_id.9f112f8944": ["model.hubspot_source.stg_hubspot__contact"], "test.hubspot_source.unique_stg_hubspot__email_event_bounce_event_id.0341ffa8e9": [], "test.hubspot_source.not_null_stg_hubspot__email_event_bounce_event_id.71b13d26d3": [], "test.hubspot_source.unique_stg_hubspot__email_event_click_event_id.da8d8487a1": [], "test.hubspot_source.not_null_stg_hubspot__email_event_click_event_id.8a1be931c5": [], "test.hubspot_source.unique_stg_hubspot__email_event_deferred_event_id.2f779e2912": [], "test.hubspot_source.not_null_stg_hubspot__email_event_deferred_event_id.80293078e0": [], "test.hubspot_source.unique_stg_hubspot__email_event_delivered_event_id.f818bf03fc": [], "test.hubspot_source.not_null_stg_hubspot__email_event_delivered_event_id.87c8eb3f20": [], "test.hubspot_source.unique_stg_hubspot__email_event_dropped_event_id.40706bbf71": [], "test.hubspot_source.not_null_stg_hubspot__email_event_dropped_event_id.c92d449f52": [], "test.hubspot_source.unique_stg_hubspot__email_event_forward_event_id.7f133d2dd1": [], "test.hubspot_source.not_null_stg_hubspot__email_event_forward_event_id.b9a8bf63b3": [], "test.hubspot_source.unique_stg_hubspot__email_event_open_event_id.3a369549b1": [], "test.hubspot_source.not_null_stg_hubspot__email_event_open_event_id.a2e658fe16": [], "test.hubspot_source.unique_stg_hubspot__email_event_print_event_id.40a8ccd3f3": [], "test.hubspot_source.not_null_stg_hubspot__email_event_print_event_id.94d4e09b3b": [], "test.hubspot_source.unique_stg_hubspot__email_event_sent_event_id.122cb22272": [], "test.hubspot_source.not_null_stg_hubspot__email_event_sent_event_id.cf77d9f15d": [], "test.hubspot_source.unique_stg_hubspot__email_event_spam_report_event_id.448320447a": [], "test.hubspot_source.not_null_stg_hubspot__email_event_spam_report_event_id.2a56aced8f": [], "test.hubspot_source.unique_stg_hubspot__email_event_status_change_event_id.13105203e0": [], "test.hubspot_source.not_null_stg_hubspot__email_event_status_change_event_id.c5e80297b1": [], "test.hubspot_source.unique_stg_hubspot__email_event_event_id.734683460d": [], "test.hubspot_source.not_null_stg_hubspot__email_event_event_id.4f287f3531": [], "test.hubspot_source.unique_stg_hubspot__email_campaign_email_campaign_id.9820d33f2e": [], "test.hubspot_source.not_null_stg_hubspot__email_campaign_email_campaign_id.79921899a6": [], "test.hubspot_source.not_null_stg_hubspot__engagement_call_engagement_id.5ceb3917bf": [], "test.hubspot_source.unique_stg_hubspot__engagement_call_engagement_id.43b4413603": [], "test.hubspot_source.not_null_stg_hubspot__engagement_email_engagement_id.175561ecca": [], "test.hubspot_source.unique_stg_hubspot__engagement_email_engagement_id.5eeb06dcfc": [], "test.hubspot_source.not_null_stg_hubspot__engagement_meeting_engagement_id.18dd11dc28": [], "test.hubspot_source.unique_stg_hubspot__engagement_meeting_engagement_id.70721fb830": [], "test.hubspot_source.not_null_stg_hubspot__engagement_note_engagement_id.244059891e": [], "test.hubspot_source.unique_stg_hubspot__engagement_note_engagement_id.e2eaf5256e": [], "test.hubspot_source.not_null_stg_hubspot__engagement_task_engagement_id.0bbd752d82": [], "test.hubspot_source.unique_stg_hubspot__engagement_task_engagement_id.0f578bc80c": [], "test.hubspot_source.not_null_stg_hubspot__engagement_engagement_id.b26f4d328f": [], "test.hubspot_source.unique_stg_hubspot__engagement_engagement_id.4f054187b0": [], "test.hubspot_source.unique_stg_hubspot__ticket_ticket_id.78c6fbfcaf": [], "test.hubspot_source.not_null_stg_hubspot__ticket_ticket_id.299e7c4c53": [], "test.hubspot_source.unique_stg_hubspot__company_company_id.394a2a4ba0": ["model.hubspot_source.stg_hubspot__company"], "test.hubspot_source.not_null_stg_hubspot__company_company_id.0d0a080d43": ["model.hubspot_source.stg_hubspot__company"], "test.hubspot.unique_hubspot__deals_deal_id.d728fe5f71": ["model.hubspot.hubspot__deals"], "test.hubspot.unique_hubspot__deal_stages_deal_stage_id.7fd3732373": ["model.hubspot.hubspot__deal_stages"], "test.hubspot.not_null_hubspot__companies_company_id.687ec98e97": ["model.hubspot.hubspot__companies"], "test.hubspot.not_null_hubspot__engagements_engagement_id.59b32bc0d7": [], "test.hubspot.unique_hubspot__engagements_engagement_id.01d5c3ee5d": [], "test.hubspot.unique_hubspot__company_history_id.f1af964b1f": ["model.hubspot.hubspot__company_history"], "test.hubspot.not_null_hubspot__company_history_id.33035793ff": ["model.hubspot.hubspot__company_history"], "test.hubspot.dbt_utils_unique_combination_of_columns_hubspot__company_history_company_id__field_name__valid_to.654ef778b1": ["model.hubspot.hubspot__company_history"], "test.hubspot.unique_hubspot__deal_history_id.1cb93fca79": ["model.hubspot.hubspot__deal_history"], "test.hubspot.not_null_hubspot__deal_history_id.a1c6cd6a75": ["model.hubspot.hubspot__deal_history"], "test.hubspot.dbt_utils_unique_combination_of_columns_hubspot__deal_history_deal_id__field_name__valid_to.f55c724804": ["model.hubspot.hubspot__deal_history"], "test.hubspot.not_null_hubspot__engagement_calls_engagement_id.00f8d8357f": [], "test.hubspot.unique_hubspot__engagement_calls_engagement_id.972572ce6c": [], "test.hubspot.not_null_hubspot__engagement_emails_engagement_id.13a39d1e09": [], "test.hubspot.unique_hubspot__engagement_emails_engagement_id.b18e2acbde": [], "test.hubspot.not_null_hubspot__engagement_meetings_engagement_id.83a791c3df": [], "test.hubspot.unique_hubspot__engagement_meetings_engagement_id.3098aabcd1": [], "test.hubspot.not_null_hubspot__engagement_notes_engagement_id.76434ac965": [], "test.hubspot.unique_hubspot__engagement_notes_engagement_id.c9864b5001": [], "test.hubspot.not_null_hubspot__engagement_tasks_engagement_id.67738794ae": [], "test.hubspot.unique_hubspot__engagement_tasks_engagement_id.754d36b939": [], "test.hubspot.not_null_hubspot__email_sends_event_id.9fc8a8bef3": [], "test.hubspot.unique_hubspot__email_campaigns_email_campaign_id.2470fabe62": [], "test.hubspot.not_null_hubspot__email_campaigns_email_campaign_id.6b2d6f43c0": [], "test.hubspot.not_null_hubspot__contacts_contact_id.e28e88dce3": ["model.hubspot.hubspot__contacts"], "test.hubspot.not_null_hubspot__contact_lists_contact_list_id.3bde1bb891": ["model.hubspot.hubspot__contact_lists"], "test.hubspot.not_null_hubspot__email_event_bounce_event_id.39d8daa6f5": [], "test.hubspot.not_null_hubspot__email_event_clicks_event_id.f603501ca0": [], "test.hubspot.not_null_hubspot__email_event_deferred_event_id.2c6decaa91": [], "test.hubspot.not_null_hubspot__email_event_delivered_event_id.0609870be3": [], "test.hubspot.not_null_hubspot__email_event_dropped_event_id.5cfe4eeb95": [], "test.hubspot.not_null_hubspot__email_event_forward_event_id.417a73da08": [], "test.hubspot.not_null_hubspot__email_event_opens_event_id.a9fe279ee1": [], "test.hubspot.not_null_hubspot__email_event_print_event_id.9dac8a147e": [], "test.hubspot.not_null_hubspot__email_event_sent_event_id.5507dcc5b9": [], "test.hubspot.not_null_hubspot__email_event_spam_report_event_id.5ddca8771a": [], "test.hubspot.not_null_hubspot__email_event_status_change_event_id.a1737e44b3": [], "test.hubspot.unique_hubspot__contact_history_id.aef69ae1ec": ["model.hubspot.hubspot__contact_history"], "test.hubspot.not_null_hubspot__contact_history_id.eaae22e088": ["model.hubspot.hubspot__contact_history"], "test.hubspot.dbt_utils_unique_combination_of_columns_hubspot__contact_history_contact_id__field_name__valid_to.42ccfb8329": ["model.hubspot.hubspot__contact_history"], "test.hubspot.unique_int_hubspot__email_aggregate_status_change_email_send_id.7c03e87c05": [], "test.hubspot.not_null_int_hubspot__email_aggregate_status_change_email_send_id.16bf74a3bc": [], "test.hubspot.unique_int_hubspot__email_metrics__by_contact_list_contact_list_id.095d72d5b8": [], "test.hubspot.not_null_int_hubspot__email_metrics__by_contact_list_contact_list_id.1d3cf4caf2": [], "test.hubspot.unique_int_hubspot__email_event_aggregates_email_send_id.4deec238f9": [], "test.hubspot.not_null_int_hubspot__email_event_aggregates_email_send_id.ac29e6997a": [], "test.hubspot.unique_int_hubspot__engagement_metrics__by_contact_contact_id.1c156b64ed": [], "test.hubspot.not_null_int_hubspot__engagement_metrics__by_contact_contact_id.4a800df06b": [], "source.hubspot_source.hubspot.calendar_event": [], "source.hubspot_source.hubspot.company": [], "source.hubspot_source.hubspot.company_property_history": [], "source.hubspot_source.hubspot.contact": [], "source.hubspot_source.hubspot.contact_form_submission": [], "source.hubspot_source.hubspot.contact_list": [], "source.hubspot_source.hubspot.contact_list_member": [], "source.hubspot_source.hubspot.contact_property_history": [], "source.hubspot_source.hubspot.deal": [], "source.hubspot_source.hubspot.deal_stage": [], "source.hubspot_source.hubspot.deal_company": [], "source.hubspot_source.hubspot.deal_contact": [], "source.hubspot_source.hubspot.deal_pipeline": [], "source.hubspot_source.hubspot.deal_pipeline_stage": [], "source.hubspot_source.hubspot.deal_property_history": [], "source.hubspot_source.hubspot.email_subscription": [], "source.hubspot_source.hubspot.email_subscription_change": [], "source.hubspot_source.hubspot.engagement_email_cc": [], "source.hubspot_source.hubspot.engagement_email_to": [], "source.hubspot_source.hubspot.form": [], "source.hubspot_source.hubspot.owner": []}, "child_map": {"model.hubspot_source.stg_hubspot__company_property_history": ["model.hubspot.hubspot__company_history"], "model.hubspot_source.stg_hubspot__owner": ["model.hubspot.int_hubspot__deals_enhanced"], "model.hubspot_source.stg_hubspot__contact_list_member": [], "model.hubspot_source.stg_hubspot__contact": ["model.hubspot.int_hubspot__contact_merge_adjust", "test.hubspot_source.not_null_stg_hubspot__contact_contact_id.9f112f8944", "test.hubspot_source.unique_stg_hubspot__contact_contact_id.b9135eb03a"], "model.hubspot_source.stg_hubspot__deal": ["model.hubspot.int_hubspot__deals_enhanced", "test.hubspot_source.not_null_stg_hubspot__deal_deal_id.ff48693e20", "test.hubspot_source.unique_stg_hubspot__deal_deal_id.ac1628ac69"], "model.hubspot_source.stg_hubspot__deal_pipeline": ["model.hubspot.hubspot__deal_stages", "model.hubspot.int_hubspot__deals_enhanced", "test.hubspot_source.not_null_stg_hubspot__deal_pipeline_deal_pipeline_id.8a0e3cd7a3", "test.hubspot_source.unique_stg_hubspot__deal_pipeline_deal_pipeline_id.dff6c45403"], "model.hubspot_source.stg_hubspot__deal_company": ["test.hubspot_source.dbt_utils_unique_combination_of_columns_stg_hubspot__deal_company_company_id__deal_id__type_id.59d48f3923"], "model.hubspot_source.stg_hubspot__contact_list": ["model.hubspot.hubspot__contact_lists", "test.hubspot_source.not_null_stg_hubspot__contact_list_contact_list_id.ff8e4cc29a", "test.hubspot_source.unique_stg_hubspot__contact_list_contact_list_id.036739c1b0"], "model.hubspot_source.stg_hubspot__deal_pipeline_stage": ["model.hubspot.hubspot__deal_stages", "model.hubspot.int_hubspot__deals_enhanced", "test.hubspot_source.not_null_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id.d53656553e", "test.hubspot_source.unique_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id.ba90fa6113"], "model.hubspot_source.stg_hubspot__deal_stage": ["model.hubspot.hubspot__deal_stages"], "model.hubspot_source.stg_hubspot__deal_property_history": ["model.hubspot.hubspot__deal_history"], "model.hubspot_source.stg_hubspot__company": ["model.hubspot.hubspot__companies", "test.hubspot_source.not_null_stg_hubspot__company_company_id.0d0a080d43", "test.hubspot_source.unique_stg_hubspot__company_company_id.394a2a4ba0"], "model.hubspot_source.stg_hubspot__deal_contact": ["test.hubspot_source.dbt_utils_unique_combination_of_columns_stg_hubspot__deal_contact_contact_id__deal_id__type_id.37de71798b"], "model.hubspot_source.stg_hubspot__contact_property_history": ["model.hubspot.hubspot__contact_history"], "model.hubspot_source.stg_hubspot__contact_property_history_tmp": ["model.hubspot_source.stg_hubspot__contact_property_history"], "model.hubspot_source.stg_hubspot__deal_tmp": ["model.hubspot_source.stg_hubspot__deal"], "model.hubspot_source.stg_hubspot__deal_contact_tmp": ["model.hubspot_source.stg_hubspot__deal_contact"], "model.hubspot_source.stg_hubspot__contact_list_member_tmp": ["model.hubspot_source.stg_hubspot__contact_list_member"], "model.hubspot_source.stg_hubspot__owner_tmp": ["model.hubspot_source.stg_hubspot__owner"], "model.hubspot_source.stg_hubspot__deal_stage_tmp": ["model.hubspot_source.stg_hubspot__deal_stage"], "model.hubspot_source.stg_hubspot__deal_pipeline_tmp": ["model.hubspot_source.stg_hubspot__deal_pipeline"], "model.hubspot_source.stg_hubspot__contact_tmp": ["model.hubspot_source.stg_hubspot__contact"], "model.hubspot_source.stg_hubspot__deal_company_tmp": ["model.hubspot_source.stg_hubspot__deal_company"], "model.hubspot_source.stg_hubspot__company_property_history_tmp": ["model.hubspot_source.stg_hubspot__company_property_history"], "model.hubspot_source.stg_hubspot__company_tmp": ["model.hubspot_source.stg_hubspot__company"], "model.hubspot_source.stg_hubspot__contact_list_tmp": ["model.hubspot_source.stg_hubspot__contact_list"], "model.hubspot_source.stg_hubspot__deal_pipeline_stage_tmp": ["model.hubspot_source.stg_hubspot__deal_pipeline_stage"], "model.hubspot_source.stg_hubspot__deal_property_history_tmp": ["model.hubspot_source.stg_hubspot__deal_property_history"], "model.hubspot.hubspot__companies": ["test.hubspot.not_null_hubspot__companies_company_id.687ec98e97"], "model.hubspot.hubspot__deals": ["test.hubspot.unique_hubspot__deals_deal_id.d728fe5f71"], "model.hubspot.hubspot__deal_stages": ["test.hubspot.unique_hubspot__deal_stages_deal_stage_id.7fd3732373"], "model.hubspot.hubspot__deal_history": ["test.hubspot.dbt_utils_unique_combination_of_columns_hubspot__deal_history_deal_id__field_name__valid_to.f55c724804", "test.hubspot.not_null_hubspot__deal_history_id.a1c6cd6a75", "test.hubspot.unique_hubspot__deal_history_id.1cb93fca79"], "model.hubspot.hubspot__company_history": ["test.hubspot.dbt_utils_unique_combination_of_columns_hubspot__company_history_company_id__field_name__valid_to.654ef778b1", "test.hubspot.not_null_hubspot__company_history_id.33035793ff", "test.hubspot.unique_hubspot__company_history_id.f1af964b1f"], "model.hubspot.int_hubspot__deals_enhanced": ["model.hubspot.hubspot__deal_stages", "model.hubspot.hubspot__deals"], "model.hubspot.hubspot__contact_lists": ["test.hubspot.not_null_hubspot__contact_lists_contact_list_id.3bde1bb891"], "model.hubspot.hubspot__contacts": ["test.hubspot.not_null_hubspot__contacts_contact_id.e28e88dce3"], "model.hubspot.hubspot__contact_history": ["test.hubspot.dbt_utils_unique_combination_of_columns_hubspot__contact_history_contact_id__field_name__valid_to.42ccfb8329", "test.hubspot.not_null_hubspot__contact_history_id.eaae22e088", "test.hubspot.unique_hubspot__contact_history_id.aef69ae1ec"], "model.hubspot.int_hubspot__contact_merge_adjust": ["model.hubspot.hubspot__contacts"], "test.hubspot_source.unique_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id.ba90fa6113": [], "test.hubspot_source.not_null_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id.d53656553e": [], "test.hubspot_source.unique_stg_hubspot__deal_pipeline_deal_pipeline_id.dff6c45403": [], "test.hubspot_source.not_null_stg_hubspot__deal_pipeline_deal_pipeline_id.8a0e3cd7a3": [], "test.hubspot_source.not_null_stg_hubspot__deal_deal_id.ff48693e20": [], "test.hubspot_source.unique_stg_hubspot__deal_deal_id.ac1628ac69": [], "test.hubspot_source.dbt_utils_unique_combination_of_columns_stg_hubspot__deal_company_company_id__deal_id__type_id.59d48f3923": [], "test.hubspot_source.dbt_utils_unique_combination_of_columns_stg_hubspot__deal_contact_contact_id__deal_id__type_id.37de71798b": [], "test.hubspot_source.unique_stg_hubspot__contact_list_contact_list_id.036739c1b0": [], "test.hubspot_source.not_null_stg_hubspot__contact_list_contact_list_id.ff8e4cc29a": [], "test.hubspot_source.unique_stg_hubspot__contact_contact_id.b9135eb03a": [], "test.hubspot_source.not_null_stg_hubspot__contact_contact_id.9f112f8944": [], "test.hubspot_source.unique_stg_hubspot__email_event_bounce_event_id.0341ffa8e9": [], "test.hubspot_source.not_null_stg_hubspot__email_event_bounce_event_id.71b13d26d3": [], "test.hubspot_source.unique_stg_hubspot__email_event_click_event_id.da8d8487a1": [], "test.hubspot_source.not_null_stg_hubspot__email_event_click_event_id.8a1be931c5": [], "test.hubspot_source.unique_stg_hubspot__email_event_deferred_event_id.2f779e2912": [], "test.hubspot_source.not_null_stg_hubspot__email_event_deferred_event_id.80293078e0": [], "test.hubspot_source.unique_stg_hubspot__email_event_delivered_event_id.f818bf03fc": [], "test.hubspot_source.not_null_stg_hubspot__email_event_delivered_event_id.87c8eb3f20": [], "test.hubspot_source.unique_stg_hubspot__email_event_dropped_event_id.40706bbf71": [], "test.hubspot_source.not_null_stg_hubspot__email_event_dropped_event_id.c92d449f52": [], "test.hubspot_source.unique_stg_hubspot__email_event_forward_event_id.7f133d2dd1": [], "test.hubspot_source.not_null_stg_hubspot__email_event_forward_event_id.b9a8bf63b3": [], "test.hubspot_source.unique_stg_hubspot__email_event_open_event_id.3a369549b1": [], "test.hubspot_source.not_null_stg_hubspot__email_event_open_event_id.a2e658fe16": [], "test.hubspot_source.unique_stg_hubspot__email_event_print_event_id.40a8ccd3f3": [], "test.hubspot_source.not_null_stg_hubspot__email_event_print_event_id.94d4e09b3b": [], "test.hubspot_source.unique_stg_hubspot__email_event_sent_event_id.122cb22272": [], "test.hubspot_source.not_null_stg_hubspot__email_event_sent_event_id.cf77d9f15d": [], "test.hubspot_source.unique_stg_hubspot__email_event_spam_report_event_id.448320447a": [], "test.hubspot_source.not_null_stg_hubspot__email_event_spam_report_event_id.2a56aced8f": [], "test.hubspot_source.unique_stg_hubspot__email_event_status_change_event_id.13105203e0": [], "test.hubspot_source.not_null_stg_hubspot__email_event_status_change_event_id.c5e80297b1": [], "test.hubspot_source.unique_stg_hubspot__email_event_event_id.734683460d": [], "test.hubspot_source.not_null_stg_hubspot__email_event_event_id.4f287f3531": [], "test.hubspot_source.unique_stg_hubspot__email_campaign_email_campaign_id.9820d33f2e": [], "test.hubspot_source.not_null_stg_hubspot__email_campaign_email_campaign_id.79921899a6": [], "test.hubspot_source.not_null_stg_hubspot__engagement_call_engagement_id.5ceb3917bf": [], "test.hubspot_source.unique_stg_hubspot__engagement_call_engagement_id.43b4413603": [], "test.hubspot_source.not_null_stg_hubspot__engagement_email_engagement_id.175561ecca": [], "test.hubspot_source.unique_stg_hubspot__engagement_email_engagement_id.5eeb06dcfc": [], "test.hubspot_source.not_null_stg_hubspot__engagement_meeting_engagement_id.18dd11dc28": [], "test.hubspot_source.unique_stg_hubspot__engagement_meeting_engagement_id.70721fb830": [], "test.hubspot_source.not_null_stg_hubspot__engagement_note_engagement_id.244059891e": [], "test.hubspot_source.unique_stg_hubspot__engagement_note_engagement_id.e2eaf5256e": [], "test.hubspot_source.not_null_stg_hubspot__engagement_task_engagement_id.0bbd752d82": [], "test.hubspot_source.unique_stg_hubspot__engagement_task_engagement_id.0f578bc80c": [], "test.hubspot_source.not_null_stg_hubspot__engagement_engagement_id.b26f4d328f": [], "test.hubspot_source.unique_stg_hubspot__engagement_engagement_id.4f054187b0": [], "test.hubspot_source.unique_stg_hubspot__ticket_ticket_id.78c6fbfcaf": [], "test.hubspot_source.not_null_stg_hubspot__ticket_ticket_id.299e7c4c53": [], "test.hubspot_source.unique_stg_hubspot__company_company_id.394a2a4ba0": [], "test.hubspot_source.not_null_stg_hubspot__company_company_id.0d0a080d43": [], "test.hubspot.unique_hubspot__deals_deal_id.d728fe5f71": [], "test.hubspot.unique_hubspot__deal_stages_deal_stage_id.7fd3732373": [], "test.hubspot.not_null_hubspot__companies_company_id.687ec98e97": [], "test.hubspot.not_null_hubspot__engagements_engagement_id.59b32bc0d7": [], "test.hubspot.unique_hubspot__engagements_engagement_id.01d5c3ee5d": [], "test.hubspot.unique_hubspot__company_history_id.f1af964b1f": [], "test.hubspot.not_null_hubspot__company_history_id.33035793ff": [], "test.hubspot.dbt_utils_unique_combination_of_columns_hubspot__company_history_company_id__field_name__valid_to.654ef778b1": [], "test.hubspot.unique_hubspot__deal_history_id.1cb93fca79": [], "test.hubspot.not_null_hubspot__deal_history_id.a1c6cd6a75": [], "test.hubspot.dbt_utils_unique_combination_of_columns_hubspot__deal_history_deal_id__field_name__valid_to.f55c724804": [], "test.hubspot.not_null_hubspot__engagement_calls_engagement_id.00f8d8357f": [], "test.hubspot.unique_hubspot__engagement_calls_engagement_id.972572ce6c": [], "test.hubspot.not_null_hubspot__engagement_emails_engagement_id.13a39d1e09": [], "test.hubspot.unique_hubspot__engagement_emails_engagement_id.b18e2acbde": [], "test.hubspot.not_null_hubspot__engagement_meetings_engagement_id.83a791c3df": [], "test.hubspot.unique_hubspot__engagement_meetings_engagement_id.3098aabcd1": [], "test.hubspot.not_null_hubspot__engagement_notes_engagement_id.76434ac965": [], "test.hubspot.unique_hubspot__engagement_notes_engagement_id.c9864b5001": [], "test.hubspot.not_null_hubspot__engagement_tasks_engagement_id.67738794ae": [], "test.hubspot.unique_hubspot__engagement_tasks_engagement_id.754d36b939": [], "test.hubspot.not_null_hubspot__email_sends_event_id.9fc8a8bef3": [], "test.hubspot.unique_hubspot__email_campaigns_email_campaign_id.2470fabe62": [], "test.hubspot.not_null_hubspot__email_campaigns_email_campaign_id.6b2d6f43c0": [], "test.hubspot.not_null_hubspot__contacts_contact_id.e28e88dce3": [], "test.hubspot.not_null_hubspot__contact_lists_contact_list_id.3bde1bb891": [], "test.hubspot.not_null_hubspot__email_event_bounce_event_id.39d8daa6f5": [], "test.hubspot.not_null_hubspot__email_event_clicks_event_id.f603501ca0": [], "test.hubspot.not_null_hubspot__email_event_deferred_event_id.2c6decaa91": [], "test.hubspot.not_null_hubspot__email_event_delivered_event_id.0609870be3": [], "test.hubspot.not_null_hubspot__email_event_dropped_event_id.5cfe4eeb95": [], "test.hubspot.not_null_hubspot__email_event_forward_event_id.417a73da08": [], "test.hubspot.not_null_hubspot__email_event_opens_event_id.a9fe279ee1": [], "test.hubspot.not_null_hubspot__email_event_print_event_id.9dac8a147e": [], "test.hubspot.not_null_hubspot__email_event_sent_event_id.5507dcc5b9": [], "test.hubspot.not_null_hubspot__email_event_spam_report_event_id.5ddca8771a": [], "test.hubspot.not_null_hubspot__email_event_status_change_event_id.a1737e44b3": [], "test.hubspot.unique_hubspot__contact_history_id.aef69ae1ec": [], "test.hubspot.not_null_hubspot__contact_history_id.eaae22e088": [], "test.hubspot.dbt_utils_unique_combination_of_columns_hubspot__contact_history_contact_id__field_name__valid_to.42ccfb8329": [], "test.hubspot.unique_int_hubspot__email_aggregate_status_change_email_send_id.7c03e87c05": [], "test.hubspot.not_null_int_hubspot__email_aggregate_status_change_email_send_id.16bf74a3bc": [], "test.hubspot.unique_int_hubspot__email_metrics__by_contact_list_contact_list_id.095d72d5b8": [], "test.hubspot.not_null_int_hubspot__email_metrics__by_contact_list_contact_list_id.1d3cf4caf2": [], "test.hubspot.unique_int_hubspot__email_event_aggregates_email_send_id.4deec238f9": [], "test.hubspot.not_null_int_hubspot__email_event_aggregates_email_send_id.ac29e6997a": [], "test.hubspot.unique_int_hubspot__engagement_metrics__by_contact_contact_id.1c156b64ed": [], "test.hubspot.not_null_int_hubspot__engagement_metrics__by_contact_contact_id.4a800df06b": [], "source.hubspot_source.hubspot.calendar_event": [], "source.hubspot_source.hubspot.company": ["model.hubspot_source.stg_hubspot__company_tmp"], "source.hubspot_source.hubspot.company_property_history": ["model.hubspot_source.stg_hubspot__company_property_history_tmp"], "source.hubspot_source.hubspot.contact": ["model.hubspot_source.stg_hubspot__contact_tmp"], "source.hubspot_source.hubspot.contact_form_submission": [], "source.hubspot_source.hubspot.contact_list": ["model.hubspot_source.stg_hubspot__contact_list_tmp"], "source.hubspot_source.hubspot.contact_list_member": ["model.hubspot_source.stg_hubspot__contact_list_member_tmp"], "source.hubspot_source.hubspot.contact_property_history": ["model.hubspot_source.stg_hubspot__contact_property_history_tmp"], "source.hubspot_source.hubspot.deal": ["model.hubspot_source.stg_hubspot__deal_tmp"], "source.hubspot_source.hubspot.deal_stage": ["model.hubspot_source.stg_hubspot__deal_stage_tmp"], "source.hubspot_source.hubspot.deal_company": ["model.hubspot_source.stg_hubspot__deal_company_tmp"], "source.hubspot_source.hubspot.deal_contact": ["model.hubspot_source.stg_hubspot__deal_contact_tmp"], "source.hubspot_source.hubspot.deal_pipeline": ["model.hubspot_source.stg_hubspot__deal_pipeline_tmp"], "source.hubspot_source.hubspot.deal_pipeline_stage": ["model.hubspot_source.stg_hubspot__deal_pipeline_stage_tmp"], "source.hubspot_source.hubspot.deal_property_history": ["model.hubspot_source.stg_hubspot__deal_property_history_tmp"], "source.hubspot_source.hubspot.email_subscription": [], "source.hubspot_source.hubspot.email_subscription_change": [], "source.hubspot_source.hubspot.engagement_email_cc": [], "source.hubspot_source.hubspot.engagement_email_to": [], "source.hubspot_source.hubspot.form": [], "source.hubspot_source.hubspot.owner": ["model.hubspot_source.stg_hubspot__owner_tmp"]}, "group_map": {}, "semantic_models": {}}
